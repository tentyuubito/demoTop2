'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.8833
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsBilling_Note"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsBilling_Note
    Inherits Global.System.Data.DataSet
    
    Private tableView_Billing_Note As View_Billing_NoteDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("View_Billing_Note")) Is Nothing) Then
                MyBase.Tables.Add(New View_Billing_NoteDataTable(ds.Tables("View_Billing_Note")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property View_Billing_Note() As View_Billing_NoteDataTable
        Get
            Return Me.tableView_Billing_Note
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsBilling_Note = CType(MyBase.Clone,dsBilling_Note)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("View_Billing_Note")) Is Nothing) Then
                MyBase.Tables.Add(New View_Billing_NoteDataTable(ds.Tables("View_Billing_Note")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableView_Billing_Note = CType(MyBase.Tables("View_Billing_Note"),View_Billing_NoteDataTable)
        If (initTable = true) Then
            If (Not (Me.tableView_Billing_Note) Is Nothing) Then
                Me.tableView_Billing_Note.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsBilling_Note"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DataSet1.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableView_Billing_Note = New View_Billing_NoteDataTable
        MyBase.Tables.Add(Me.tableView_Billing_Note)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeView_Billing_Note() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsBilling_Note = New dsBilling_Note
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub View_Billing_NoteRowChangeEventHandler(ByVal sender As Object, ByVal e As View_Billing_NoteRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class View_Billing_NoteDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnBarcode_No As Global.System.Data.DataColumn
        
        Private columnQRCode As Global.System.Data.DataColumn
        
        Private columnDocument_No As Global.System.Data.DataColumn
        
        Private columnDocument_Date As Global.System.Data.DataColumn
        
        Private columnCustomer_Shipping_Id As Global.System.Data.DataColumn
        
        Private columnCustomer_Shipping_Tax As Global.System.Data.DataColumn
        
        Private columnCustomer_Shipping_Depart As Global.System.Data.DataColumn
        
        Private columnCustomer_Shipping_Name As Global.System.Data.DataColumn
        
        Private columnCustomer_Shipping_Address As Global.System.Data.DataColumn
        
        Private columnCustomer_Shipping_Tel As Global.System.Data.DataColumn
        
        Private columnCustomer_Shipping_Fax As Global.System.Data.DataColumn
        
        Private columnDate_Payment As Global.System.Data.DataColumn
        
        Private columnCase_Payment As Global.System.Data.DataColumn
        
        Private columnInvoice_NO As Global.System.Data.DataColumn
        
        Private columnInvoice_Date As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnDue_Date As Global.System.Data.DataColumn
        
        Private columnQTY As Global.System.Data.DataColumn
        
        Private columnAmout As Global.System.Data.DataColumn
        
        Private columnItems As Global.System.Data.DataColumn
        
        Private columnTotal_Amount As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "View_Billing_Note"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Barcode_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBarcode_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QRCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQRCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Document_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocument_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Document_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocument_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Customer_Shipping_IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomer_Shipping_Id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Customer_Shipping_TaxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomer_Shipping_Tax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Customer_Shipping_DepartColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomer_Shipping_Depart
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Customer_Shipping_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomer_Shipping_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Customer_Shipping_AddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomer_Shipping_Address
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Customer_Shipping_TelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomer_Shipping_Tel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Customer_Shipping_FaxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomer_Shipping_Fax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Date_PaymentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDate_Payment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Case_PaymentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCase_Payment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Invoice_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvoice_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Invoice_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvoice_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Due_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDue_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AmoutColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAmout
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItems
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Total_AmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotal_Amount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As View_Billing_NoteRow
            Get
                Return CType(Me.Rows(index),View_Billing_NoteRow)
            End Get
        End Property
        
        Public Event View_Billing_NoteRowChanging As View_Billing_NoteRowChangeEventHandler
        
        Public Event View_Billing_NoteRowChanged As View_Billing_NoteRowChangeEventHandler
        
        Public Event View_Billing_NoteRowDeleting As View_Billing_NoteRowChangeEventHandler
        
        Public Event View_Billing_NoteRowDeleted As View_Billing_NoteRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddView_Billing_NoteRow(ByVal row As View_Billing_NoteRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddView_Billing_NoteRow( _
                    ByVal Barcode_No As Byte,  _
                    ByVal QRCode As Byte,  _
                    ByVal Document_No As String,  _
                    ByVal Document_Date As Date,  _
                    ByVal Customer_Shipping_Id As String,  _
                    ByVal Customer_Shipping_Tax As String,  _
                    ByVal Customer_Shipping_Depart As String,  _
                    ByVal Customer_Shipping_Name As String,  _
                    ByVal Customer_Shipping_Address As String,  _
                    ByVal Customer_Shipping_Tel As String,  _
                    ByVal Customer_Shipping_Fax As String,  _
                    ByVal Date_Payment As Date,  _
                    ByVal Case_Payment As String,  _
                    ByVal Invoice_NO As String,  _
                    ByVal Invoice_Date As Date,  _
                    ByVal Description As String,  _
                    ByVal Due_Date As Date,  _
                    ByVal QTY As Double,  _
                    ByVal Amout As Decimal,  _
                    ByVal Items As Short,  _
                    ByVal Total_Amount As Double) As View_Billing_NoteRow
            Dim rowView_Billing_NoteRow As View_Billing_NoteRow = CType(Me.NewRow,View_Billing_NoteRow)
            Dim columnValuesArray() As Object = New Object() {Barcode_No, QRCode, Document_No, Document_Date, Customer_Shipping_Id, Customer_Shipping_Tax, Customer_Shipping_Depart, Customer_Shipping_Name, Customer_Shipping_Address, Customer_Shipping_Tel, Customer_Shipping_Fax, Date_Payment, Case_Payment, Invoice_NO, Invoice_Date, Description, Due_Date, QTY, Amout, Items, Total_Amount}
            rowView_Billing_NoteRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowView_Billing_NoteRow)
            Return rowView_Billing_NoteRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As View_Billing_NoteDataTable = CType(MyBase.Clone,View_Billing_NoteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New View_Billing_NoteDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnBarcode_No = MyBase.Columns("Barcode_No")
            Me.columnQRCode = MyBase.Columns("QRCode")
            Me.columnDocument_No = MyBase.Columns("Document_No")
            Me.columnDocument_Date = MyBase.Columns("Document_Date")
            Me.columnCustomer_Shipping_Id = MyBase.Columns("Customer_Shipping_Id")
            Me.columnCustomer_Shipping_Tax = MyBase.Columns("Customer_Shipping_Tax")
            Me.columnCustomer_Shipping_Depart = MyBase.Columns("Customer_Shipping_Depart")
            Me.columnCustomer_Shipping_Name = MyBase.Columns("Customer_Shipping_Name")
            Me.columnCustomer_Shipping_Address = MyBase.Columns("Customer_Shipping_Address")
            Me.columnCustomer_Shipping_Tel = MyBase.Columns("Customer_Shipping_Tel")
            Me.columnCustomer_Shipping_Fax = MyBase.Columns("Customer_Shipping_Fax")
            Me.columnDate_Payment = MyBase.Columns("Date_Payment")
            Me.columnCase_Payment = MyBase.Columns("Case_Payment")
            Me.columnInvoice_NO = MyBase.Columns("Invoice_NO")
            Me.columnInvoice_Date = MyBase.Columns("Invoice_Date")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnDue_Date = MyBase.Columns("Due_Date")
            Me.columnQTY = MyBase.Columns("QTY")
            Me.columnAmout = MyBase.Columns("Amout")
            Me.columnItems = MyBase.Columns("Items")
            Me.columnTotal_Amount = MyBase.Columns("Total_Amount")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnBarcode_No = New Global.System.Data.DataColumn("Barcode_No", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBarcode_No)
            Me.columnQRCode = New Global.System.Data.DataColumn("QRCode", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQRCode)
            Me.columnDocument_No = New Global.System.Data.DataColumn("Document_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocument_No)
            Me.columnDocument_Date = New Global.System.Data.DataColumn("Document_Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocument_Date)
            Me.columnCustomer_Shipping_Id = New Global.System.Data.DataColumn("Customer_Shipping_Id", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomer_Shipping_Id)
            Me.columnCustomer_Shipping_Tax = New Global.System.Data.DataColumn("Customer_Shipping_Tax", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomer_Shipping_Tax)
            Me.columnCustomer_Shipping_Depart = New Global.System.Data.DataColumn("Customer_Shipping_Depart", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomer_Shipping_Depart)
            Me.columnCustomer_Shipping_Name = New Global.System.Data.DataColumn("Customer_Shipping_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomer_Shipping_Name)
            Me.columnCustomer_Shipping_Address = New Global.System.Data.DataColumn("Customer_Shipping_Address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomer_Shipping_Address)
            Me.columnCustomer_Shipping_Tel = New Global.System.Data.DataColumn("Customer_Shipping_Tel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomer_Shipping_Tel)
            Me.columnCustomer_Shipping_Fax = New Global.System.Data.DataColumn("Customer_Shipping_Fax", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomer_Shipping_Fax)
            Me.columnDate_Payment = New Global.System.Data.DataColumn("Date_Payment", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDate_Payment)
            Me.columnCase_Payment = New Global.System.Data.DataColumn("Case_Payment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCase_Payment)
            Me.columnInvoice_NO = New Global.System.Data.DataColumn("Invoice_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvoice_NO)
            Me.columnInvoice_Date = New Global.System.Data.DataColumn("Invoice_Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvoice_Date)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnDue_Date = New Global.System.Data.DataColumn("Due_Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDue_Date)
            Me.columnQTY = New Global.System.Data.DataColumn("QTY", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQTY)
            Me.columnAmout = New Global.System.Data.DataColumn("Amout", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAmout)
            Me.columnItems = New Global.System.Data.DataColumn("Items", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItems)
            Me.columnTotal_Amount = New Global.System.Data.DataColumn("Total_Amount", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotal_Amount)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewView_Billing_NoteRow() As View_Billing_NoteRow
            Return CType(Me.NewRow,View_Billing_NoteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New View_Billing_NoteRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(View_Billing_NoteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.View_Billing_NoteRowChangedEvent) Is Nothing) Then
                RaiseEvent View_Billing_NoteRowChanged(Me, New View_Billing_NoteRowChangeEvent(CType(e.Row,View_Billing_NoteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.View_Billing_NoteRowChangingEvent) Is Nothing) Then
                RaiseEvent View_Billing_NoteRowChanging(Me, New View_Billing_NoteRowChangeEvent(CType(e.Row,View_Billing_NoteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.View_Billing_NoteRowDeletedEvent) Is Nothing) Then
                RaiseEvent View_Billing_NoteRowDeleted(Me, New View_Billing_NoteRowChangeEvent(CType(e.Row,View_Billing_NoteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.View_Billing_NoteRowDeletingEvent) Is Nothing) Then
                RaiseEvent View_Billing_NoteRowDeleting(Me, New View_Billing_NoteRowChangeEvent(CType(e.Row,View_Billing_NoteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveView_Billing_NoteRow(ByVal row As View_Billing_NoteRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsBilling_Note = New dsBilling_Note
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "View_Billing_NoteDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class View_Billing_NoteRow
        Inherits Global.System.Data.DataRow
        
        Private tableView_Billing_Note As View_Billing_NoteDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableView_Billing_Note = CType(Me.Table,View_Billing_NoteDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Barcode_No() As Byte
            Get
                Try 
                    Return CType(Me(Me.tableView_Billing_Note.Barcode_NoColumn),Byte)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Barcode_No' in table 'View_Billing_Note' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_Billing_Note.Barcode_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QRCode() As Byte
            Get
                Try 
                    Return CType(Me(Me.tableView_Billing_Note.QRCodeColumn),Byte)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QRCode' in table 'View_Billing_Note' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_Billing_Note.QRCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Document_No() As String
            Get
                Try 
                    Return CType(Me(Me.tableView_Billing_Note.Document_NoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Document_No' in table 'View_Billing_Note' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_Billing_Note.Document_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Document_Date() As Date
            Get
                Try 
                    Return CType(Me(Me.tableView_Billing_Note.Document_DateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Document_Date' in table 'View_Billing_Note' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_Billing_Note.Document_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Customer_Shipping_Id() As String
            Get
                Try 
                    Return CType(Me(Me.tableView_Billing_Note.Customer_Shipping_IdColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Customer_Shipping_Id' in table 'View_Billing_Note' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_Billing_Note.Customer_Shipping_IdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Customer_Shipping_Tax() As String
            Get
                Try 
                    Return CType(Me(Me.tableView_Billing_Note.Customer_Shipping_TaxColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Customer_Shipping_Tax' in table 'View_Billing_Note' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_Billing_Note.Customer_Shipping_TaxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Customer_Shipping_Depart() As String
            Get
                Try 
                    Return CType(Me(Me.tableView_Billing_Note.Customer_Shipping_DepartColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Customer_Shipping_Depart' in table 'View_Billing_Note' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_Billing_Note.Customer_Shipping_DepartColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Customer_Shipping_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableView_Billing_Note.Customer_Shipping_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Customer_Shipping_Name' in table 'View_Billing_Note' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_Billing_Note.Customer_Shipping_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Customer_Shipping_Address() As String
            Get
                Try 
                    Return CType(Me(Me.tableView_Billing_Note.Customer_Shipping_AddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Customer_Shipping_Address' in table 'View_Billing_Note' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_Billing_Note.Customer_Shipping_AddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Customer_Shipping_Tel() As String
            Get
                Try 
                    Return CType(Me(Me.tableView_Billing_Note.Customer_Shipping_TelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Customer_Shipping_Tel' in table 'View_Billing_Note' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_Billing_Note.Customer_Shipping_TelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Customer_Shipping_Fax() As String
            Get
                Try 
                    Return CType(Me(Me.tableView_Billing_Note.Customer_Shipping_FaxColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Customer_Shipping_Fax' in table 'View_Billing_Note' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_Billing_Note.Customer_Shipping_FaxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Date_Payment() As Date
            Get
                Try 
                    Return CType(Me(Me.tableView_Billing_Note.Date_PaymentColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Date_Payment' in table 'View_Billing_Note' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_Billing_Note.Date_PaymentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Case_Payment() As String
            Get
                Try 
                    Return CType(Me(Me.tableView_Billing_Note.Case_PaymentColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Case_Payment' in table 'View_Billing_Note' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_Billing_Note.Case_PaymentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Invoice_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tableView_Billing_Note.Invoice_NOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Invoice_NO' in table 'View_Billing_Note' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_Billing_Note.Invoice_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Invoice_Date() As Date
            Get
                Try 
                    Return CType(Me(Me.tableView_Billing_Note.Invoice_DateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Invoice_Date' in table 'View_Billing_Note' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_Billing_Note.Invoice_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me.tableView_Billing_Note.DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'View_Billing_Note' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_Billing_Note.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Due_Date() As Date
            Get
                Try 
                    Return CType(Me(Me.tableView_Billing_Note.Due_DateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Due_Date' in table 'View_Billing_Note' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_Billing_Note.Due_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QTY() As Double
            Get
                Try 
                    Return CType(Me(Me.tableView_Billing_Note.QTYColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QTY' in table 'View_Billing_Note' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_Billing_Note.QTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Amout() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableView_Billing_Note.AmoutColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Amout' in table 'View_Billing_Note' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_Billing_Note.AmoutColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Items() As Short
            Get
                Try 
                    Return CType(Me(Me.tableView_Billing_Note.ItemsColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Items' in table 'View_Billing_Note' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_Billing_Note.ItemsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Total_Amount() As Double
            Get
                Try 
                    Return CType(Me(Me.tableView_Billing_Note.Total_AmountColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Total_Amount' in table 'View_Billing_Note' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_Billing_Note.Total_AmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBarcode_NoNull() As Boolean
            Return Me.IsNull(Me.tableView_Billing_Note.Barcode_NoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBarcode_NoNull()
            Me(Me.tableView_Billing_Note.Barcode_NoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQRCodeNull() As Boolean
            Return Me.IsNull(Me.tableView_Billing_Note.QRCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQRCodeNull()
            Me(Me.tableView_Billing_Note.QRCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocument_NoNull() As Boolean
            Return Me.IsNull(Me.tableView_Billing_Note.Document_NoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocument_NoNull()
            Me(Me.tableView_Billing_Note.Document_NoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocument_DateNull() As Boolean
            Return Me.IsNull(Me.tableView_Billing_Note.Document_DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocument_DateNull()
            Me(Me.tableView_Billing_Note.Document_DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomer_Shipping_IdNull() As Boolean
            Return Me.IsNull(Me.tableView_Billing_Note.Customer_Shipping_IdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustomer_Shipping_IdNull()
            Me(Me.tableView_Billing_Note.Customer_Shipping_IdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomer_Shipping_TaxNull() As Boolean
            Return Me.IsNull(Me.tableView_Billing_Note.Customer_Shipping_TaxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustomer_Shipping_TaxNull()
            Me(Me.tableView_Billing_Note.Customer_Shipping_TaxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomer_Shipping_DepartNull() As Boolean
            Return Me.IsNull(Me.tableView_Billing_Note.Customer_Shipping_DepartColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustomer_Shipping_DepartNull()
            Me(Me.tableView_Billing_Note.Customer_Shipping_DepartColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomer_Shipping_NameNull() As Boolean
            Return Me.IsNull(Me.tableView_Billing_Note.Customer_Shipping_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustomer_Shipping_NameNull()
            Me(Me.tableView_Billing_Note.Customer_Shipping_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomer_Shipping_AddressNull() As Boolean
            Return Me.IsNull(Me.tableView_Billing_Note.Customer_Shipping_AddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustomer_Shipping_AddressNull()
            Me(Me.tableView_Billing_Note.Customer_Shipping_AddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomer_Shipping_TelNull() As Boolean
            Return Me.IsNull(Me.tableView_Billing_Note.Customer_Shipping_TelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustomer_Shipping_TelNull()
            Me(Me.tableView_Billing_Note.Customer_Shipping_TelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomer_Shipping_FaxNull() As Boolean
            Return Me.IsNull(Me.tableView_Billing_Note.Customer_Shipping_FaxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustomer_Shipping_FaxNull()
            Me(Me.tableView_Billing_Note.Customer_Shipping_FaxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDate_PaymentNull() As Boolean
            Return Me.IsNull(Me.tableView_Billing_Note.Date_PaymentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDate_PaymentNull()
            Me(Me.tableView_Billing_Note.Date_PaymentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCase_PaymentNull() As Boolean
            Return Me.IsNull(Me.tableView_Billing_Note.Case_PaymentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCase_PaymentNull()
            Me(Me.tableView_Billing_Note.Case_PaymentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvoice_NONull() As Boolean
            Return Me.IsNull(Me.tableView_Billing_Note.Invoice_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvoice_NONull()
            Me(Me.tableView_Billing_Note.Invoice_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvoice_DateNull() As Boolean
            Return Me.IsNull(Me.tableView_Billing_Note.Invoice_DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvoice_DateNull()
            Me(Me.tableView_Billing_Note.Invoice_DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableView_Billing_Note.DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescriptionNull()
            Me(Me.tableView_Billing_Note.DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDue_DateNull() As Boolean
            Return Me.IsNull(Me.tableView_Billing_Note.Due_DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDue_DateNull()
            Me(Me.tableView_Billing_Note.Due_DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQTYNull() As Boolean
            Return Me.IsNull(Me.tableView_Billing_Note.QTYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQTYNull()
            Me(Me.tableView_Billing_Note.QTYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAmoutNull() As Boolean
            Return Me.IsNull(Me.tableView_Billing_Note.AmoutColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAmoutNull()
            Me(Me.tableView_Billing_Note.AmoutColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemsNull() As Boolean
            Return Me.IsNull(Me.tableView_Billing_Note.ItemsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemsNull()
            Me(Me.tableView_Billing_Note.ItemsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotal_AmountNull() As Boolean
            Return Me.IsNull(Me.tableView_Billing_Note.Total_AmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotal_AmountNull()
            Me(Me.tableView_Billing_Note.Total_AmountColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class View_Billing_NoteRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As View_Billing_NoteRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As View_Billing_NoteRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As View_Billing_NoteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
