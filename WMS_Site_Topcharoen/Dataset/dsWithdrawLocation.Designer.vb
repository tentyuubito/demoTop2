'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.8937
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsWithdrawLocation"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsWithdrawLocation
    Inherits Global.System.Data.DataSet
    
    Private tableVIEW_WithdrawLocation As VIEW_WithdrawLocationDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("VIEW_WithdrawLocation")) Is Nothing) Then
                MyBase.Tables.Add(New VIEW_WithdrawLocationDataTable(ds.Tables("VIEW_WithdrawLocation")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_WithdrawLocation() As VIEW_WithdrawLocationDataTable
        Get
            Return Me.tableVIEW_WithdrawLocation
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsWithdrawLocation = CType(MyBase.Clone,dsWithdrawLocation)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("VIEW_WithdrawLocation")) Is Nothing) Then
                MyBase.Tables.Add(New VIEW_WithdrawLocationDataTable(ds.Tables("VIEW_WithdrawLocation")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableVIEW_WithdrawLocation = CType(MyBase.Tables("VIEW_WithdrawLocation"),VIEW_WithdrawLocationDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVIEW_WithdrawLocation) Is Nothing) Then
                Me.tableVIEW_WithdrawLocation.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsWithdrawLocation"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsWithdrawLocation.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableVIEW_WithdrawLocation = New VIEW_WithdrawLocationDataTable
        MyBase.Tables.Add(Me.tableVIEW_WithdrawLocation)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVIEW_WithdrawLocation() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsWithdrawLocation = New dsWithdrawLocation
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub VIEW_WithdrawLocationRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_WithdrawLocationRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VIEW_WithdrawLocationDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnWithdrawItem_Index As Global.System.Data.DataColumn
        
        Private columnWithdraw_Index As Global.System.Data.DataColumn
        
        Private columnWithdraw_No As Global.System.Data.DataColumn
        
        Private columnWithdraw_Date As Global.System.Data.DataColumn
        
        Private columnCustomer_Index As Global.System.Data.DataColumn
        
        Private columnCustomer_Id As Global.System.Data.DataColumn
        
        Private columnTitle As Global.System.Data.DataColumn
        
        Private columnCustomer_Name As Global.System.Data.DataColumn
        
        Private columnSku_Index As Global.System.Data.DataColumn
        
        Private columnSku_Id As Global.System.Data.DataColumn
        
        Private columnsku_des As Global.System.Data.DataColumn
        
        Private columnItemStatus_Index As Global.System.Data.DataColumn
        
        Private columnItemStatus_Id As Global.System.Data.DataColumn
        
        Private columnStaDes As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnWithdrawItemLocation_Index As Global.System.Data.DataColumn
        
        Private columnLot_No As Global.System.Data.DataColumn
        
        Private columnPlot As Global.System.Data.DataColumn
        
        Private columnTag_No As Global.System.Data.DataColumn
        
        Private columnLocation_Index As Global.System.Data.DataColumn
        
        Private columnLocation_Id As Global.System.Data.DataColumn
        
        Private columnLocation_Alias As Global.System.Data.DataColumn
        
        Private columnSkuPack As Global.System.Data.DataColumn
        
        Private columnQty_WithLocation As Global.System.Data.DataColumn
        
        Private columnQty_Sub As Global.System.Data.DataColumn
        
        Private columnWeight As Global.System.Data.DataColumn
        
        Private columnVolume As Global.System.Data.DataColumn
        
        Private columnOrderPack As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VIEW_WithdrawLocation"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WithdrawItem_IndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWithdrawItem_Index
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Withdraw_IndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWithdraw_Index
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Withdraw_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWithdraw_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Withdraw_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWithdraw_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Customer_IndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomer_Index
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Customer_IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomer_Id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TitleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTitle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Customer_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomer_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Sku_IndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSku_Index
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Sku_IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSku_Id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sku_desColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsku_des
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemStatus_IndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemStatus_Index
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemStatus_IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemStatus_Id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StaDesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStaDes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WithdrawItemLocation_IndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWithdrawItemLocation_Index
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Lot_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLot_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Tag_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTag_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Location_IndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLocation_Index
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Location_IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLocation_Id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Location_AliasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLocation_Alias
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SkuPackColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSkuPack
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Qty_WithLocationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQty_WithLocation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Qty_SubColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQty_Sub
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WeightColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWeight
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VolumeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVolume
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrderPackColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrderPack
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_WithdrawLocationRow
            Get
                Return CType(Me.Rows(index),VIEW_WithdrawLocationRow)
            End Get
        End Property
        
        Public Event VIEW_WithdrawLocationRowChanging As VIEW_WithdrawLocationRowChangeEventHandler
        
        Public Event VIEW_WithdrawLocationRowChanged As VIEW_WithdrawLocationRowChangeEventHandler
        
        Public Event VIEW_WithdrawLocationRowDeleting As VIEW_WithdrawLocationRowChangeEventHandler
        
        Public Event VIEW_WithdrawLocationRowDeleted As VIEW_WithdrawLocationRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVIEW_WithdrawLocationRow(ByVal row As VIEW_WithdrawLocationRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVIEW_WithdrawLocationRow( _
                    ByVal WithdrawItem_Index As String,  _
                    ByVal Withdraw_Index As String,  _
                    ByVal Withdraw_No As String,  _
                    ByVal Withdraw_Date As Date,  _
                    ByVal Customer_Index As String,  _
                    ByVal Customer_Id As String,  _
                    ByVal Title As String,  _
                    ByVal Customer_Name As String,  _
                    ByVal Sku_Index As String,  _
                    ByVal Sku_Id As String,  _
                    ByVal sku_des As String,  _
                    ByVal ItemStatus_Index As String,  _
                    ByVal ItemStatus_Id As String,  _
                    ByVal StaDes As String,  _
                    ByVal Status As Integer,  _
                    ByVal WithdrawItemLocation_Index As String,  _
                    ByVal Lot_No As String,  _
                    ByVal Plot As String,  _
                    ByVal Tag_No As String,  _
                    ByVal Location_Index As String,  _
                    ByVal Location_Id As String,  _
                    ByVal Location_Alias As String,  _
                    ByVal SkuPack As String,  _
                    ByVal Qty_WithLocation As Double,  _
                    ByVal Qty_Sub As Double,  _
                    ByVal Weight As Double,  _
                    ByVal Volume As Double,  _
                    ByVal OrderPack As String) As VIEW_WithdrawLocationRow
            Dim rowVIEW_WithdrawLocationRow As VIEW_WithdrawLocationRow = CType(Me.NewRow,VIEW_WithdrawLocationRow)
            Dim columnValuesArray() As Object = New Object() {WithdrawItem_Index, Withdraw_Index, Withdraw_No, Withdraw_Date, Customer_Index, Customer_Id, Title, Customer_Name, Sku_Index, Sku_Id, sku_des, ItemStatus_Index, ItemStatus_Id, StaDes, Status, WithdrawItemLocation_Index, Lot_No, Plot, Tag_No, Location_Index, Location_Id, Location_Alias, SkuPack, Qty_WithLocation, Qty_Sub, Weight, Volume, OrderPack}
            rowVIEW_WithdrawLocationRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVIEW_WithdrawLocationRow)
            Return rowVIEW_WithdrawLocationRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VIEW_WithdrawLocationDataTable = CType(MyBase.Clone,VIEW_WithdrawLocationDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VIEW_WithdrawLocationDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnWithdrawItem_Index = MyBase.Columns("WithdrawItem_Index")
            Me.columnWithdraw_Index = MyBase.Columns("Withdraw_Index")
            Me.columnWithdraw_No = MyBase.Columns("Withdraw_No")
            Me.columnWithdraw_Date = MyBase.Columns("Withdraw_Date")
            Me.columnCustomer_Index = MyBase.Columns("Customer_Index")
            Me.columnCustomer_Id = MyBase.Columns("Customer_Id")
            Me.columnTitle = MyBase.Columns("Title")
            Me.columnCustomer_Name = MyBase.Columns("Customer_Name")
            Me.columnSku_Index = MyBase.Columns("Sku_Index")
            Me.columnSku_Id = MyBase.Columns("Sku_Id")
            Me.columnsku_des = MyBase.Columns("sku_des")
            Me.columnItemStatus_Index = MyBase.Columns("ItemStatus_Index")
            Me.columnItemStatus_Id = MyBase.Columns("ItemStatus_Id")
            Me.columnStaDes = MyBase.Columns("StaDes")
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnWithdrawItemLocation_Index = MyBase.Columns("WithdrawItemLocation_Index")
            Me.columnLot_No = MyBase.Columns("Lot_No")
            Me.columnPlot = MyBase.Columns("Plot")
            Me.columnTag_No = MyBase.Columns("Tag_No")
            Me.columnLocation_Index = MyBase.Columns("Location_Index")
            Me.columnLocation_Id = MyBase.Columns("Location_Id")
            Me.columnLocation_Alias = MyBase.Columns("Location_Alias")
            Me.columnSkuPack = MyBase.Columns("SkuPack")
            Me.columnQty_WithLocation = MyBase.Columns("Qty_WithLocation")
            Me.columnQty_Sub = MyBase.Columns("Qty_Sub")
            Me.columnWeight = MyBase.Columns("Weight")
            Me.columnVolume = MyBase.Columns("Volume")
            Me.columnOrderPack = MyBase.Columns("OrderPack")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnWithdrawItem_Index = New Global.System.Data.DataColumn("WithdrawItem_Index", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWithdrawItem_Index)
            Me.columnWithdraw_Index = New Global.System.Data.DataColumn("Withdraw_Index", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWithdraw_Index)
            Me.columnWithdraw_No = New Global.System.Data.DataColumn("Withdraw_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWithdraw_No)
            Me.columnWithdraw_Date = New Global.System.Data.DataColumn("Withdraw_Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWithdraw_Date)
            Me.columnCustomer_Index = New Global.System.Data.DataColumn("Customer_Index", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomer_Index)
            Me.columnCustomer_Id = New Global.System.Data.DataColumn("Customer_Id", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomer_Id)
            Me.columnTitle = New Global.System.Data.DataColumn("Title", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTitle)
            Me.columnCustomer_Name = New Global.System.Data.DataColumn("Customer_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomer_Name)
            Me.columnSku_Index = New Global.System.Data.DataColumn("Sku_Index", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSku_Index)
            Me.columnSku_Id = New Global.System.Data.DataColumn("Sku_Id", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSku_Id)
            Me.columnsku_des = New Global.System.Data.DataColumn("sku_des", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsku_des)
            Me.columnItemStatus_Index = New Global.System.Data.DataColumn("ItemStatus_Index", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemStatus_Index)
            Me.columnItemStatus_Id = New Global.System.Data.DataColumn("ItemStatus_Id", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemStatus_Id)
            Me.columnStaDes = New Global.System.Data.DataColumn("StaDes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStaDes)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnWithdrawItemLocation_Index = New Global.System.Data.DataColumn("WithdrawItemLocation_Index", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWithdrawItemLocation_Index)
            Me.columnLot_No = New Global.System.Data.DataColumn("Lot_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLot_No)
            Me.columnPlot = New Global.System.Data.DataColumn("Plot", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlot)
            Me.columnTag_No = New Global.System.Data.DataColumn("Tag_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTag_No)
            Me.columnLocation_Index = New Global.System.Data.DataColumn("Location_Index", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocation_Index)
            Me.columnLocation_Id = New Global.System.Data.DataColumn("Location_Id", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocation_Id)
            Me.columnLocation_Alias = New Global.System.Data.DataColumn("Location_Alias", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocation_Alias)
            Me.columnSkuPack = New Global.System.Data.DataColumn("SkuPack", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSkuPack)
            Me.columnQty_WithLocation = New Global.System.Data.DataColumn("Qty_WithLocation", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQty_WithLocation)
            Me.columnQty_Sub = New Global.System.Data.DataColumn("Qty_Sub", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQty_Sub)
            Me.columnWeight = New Global.System.Data.DataColumn("Weight", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWeight)
            Me.columnVolume = New Global.System.Data.DataColumn("Volume", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVolume)
            Me.columnOrderPack = New Global.System.Data.DataColumn("OrderPack", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrderPack)
            Me.columnWithdrawItem_Index.AllowDBNull = false
            Me.columnWithdrawItem_Index.MaxLength = 13
            Me.columnWithdraw_Index.MaxLength = 13
            Me.columnWithdraw_No.MaxLength = 50
            Me.columnCustomer_Index.MaxLength = 50
            Me.columnCustomer_Id.MaxLength = 13
            Me.columnTitle.MaxLength = 50
            Me.columnCustomer_Name.MaxLength = 100
            Me.columnSku_Index.MaxLength = 50
            Me.columnSku_Id.MaxLength = 50
            Me.columnsku_des.MaxLength = 100
            Me.columnItemStatus_Index.MaxLength = 13
            Me.columnItemStatus_Id.MaxLength = 15
            Me.columnStaDes.MaxLength = 100
            Me.columnWithdrawItemLocation_Index.MaxLength = 13
            Me.columnLot_No.MaxLength = 50
            Me.columnPlot.MaxLength = 50
            Me.columnTag_No.MaxLength = 50
            Me.columnLocation_Index.MaxLength = 13
            Me.columnLocation_Id.MaxLength = 50
            Me.columnLocation_Alias.MaxLength = 50
            Me.columnSkuPack.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVIEW_WithdrawLocationRow() As VIEW_WithdrawLocationRow
            Return CType(Me.NewRow,VIEW_WithdrawLocationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VIEW_WithdrawLocationRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VIEW_WithdrawLocationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_WithdrawLocationRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_WithdrawLocationRowChanged(Me, New VIEW_WithdrawLocationRowChangeEvent(CType(e.Row,VIEW_WithdrawLocationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_WithdrawLocationRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_WithdrawLocationRowChanging(Me, New VIEW_WithdrawLocationRowChangeEvent(CType(e.Row,VIEW_WithdrawLocationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_WithdrawLocationRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_WithdrawLocationRowDeleted(Me, New VIEW_WithdrawLocationRowChangeEvent(CType(e.Row,VIEW_WithdrawLocationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_WithdrawLocationRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_WithdrawLocationRowDeleting(Me, New VIEW_WithdrawLocationRowChangeEvent(CType(e.Row,VIEW_WithdrawLocationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVIEW_WithdrawLocationRow(ByVal row As VIEW_WithdrawLocationRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsWithdrawLocation = New dsWithdrawLocation
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VIEW_WithdrawLocationDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VIEW_WithdrawLocationRow
        Inherits Global.System.Data.DataRow
        
        Private tableVIEW_WithdrawLocation As VIEW_WithdrawLocationDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_WithdrawLocation = CType(Me.Table,VIEW_WithdrawLocationDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WithdrawItem_Index() As String
            Get
                Return CType(Me(Me.tableVIEW_WithdrawLocation.WithdrawItem_IndexColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_WithdrawLocation.WithdrawItem_IndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Withdraw_Index() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_WithdrawLocation.Withdraw_IndexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Withdraw_Index' in table 'VIEW_WithdrawLocation' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_WithdrawLocation.Withdraw_IndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Withdraw_No() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_WithdrawLocation.Withdraw_NoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Withdraw_No' in table 'VIEW_WithdrawLocation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_WithdrawLocation.Withdraw_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Withdraw_Date() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_WithdrawLocation.Withdraw_DateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Withdraw_Date' in table 'VIEW_WithdrawLocation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_WithdrawLocation.Withdraw_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Customer_Index() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_WithdrawLocation.Customer_IndexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Customer_Index' in table 'VIEW_WithdrawLocation' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_WithdrawLocation.Customer_IndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Customer_Id() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_WithdrawLocation.Customer_IdColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Customer_Id' in table 'VIEW_WithdrawLocation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_WithdrawLocation.Customer_IdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Title() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_WithdrawLocation.TitleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Title' in table 'VIEW_WithdrawLocation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_WithdrawLocation.TitleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Customer_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_WithdrawLocation.Customer_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Customer_Name' in table 'VIEW_WithdrawLocation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_WithdrawLocation.Customer_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sku_Index() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_WithdrawLocation.Sku_IndexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sku_Index' in table 'VIEW_WithdrawLocation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_WithdrawLocation.Sku_IndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sku_Id() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_WithdrawLocation.Sku_IdColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sku_Id' in table 'VIEW_WithdrawLocation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_WithdrawLocation.Sku_IdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sku_des() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_WithdrawLocation.sku_desColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sku_des' in table 'VIEW_WithdrawLocation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_WithdrawLocation.sku_desColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemStatus_Index() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_WithdrawLocation.ItemStatus_IndexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemStatus_Index' in table 'VIEW_WithdrawLocation' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_WithdrawLocation.ItemStatus_IndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemStatus_Id() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_WithdrawLocation.ItemStatus_IdColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemStatus_Id' in table 'VIEW_WithdrawLocation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_WithdrawLocation.ItemStatus_IdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StaDes() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_WithdrawLocation.StaDesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StaDes' in table 'VIEW_WithdrawLocation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_WithdrawLocation.StaDesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_WithdrawLocation.StatusColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Status' in table 'VIEW_WithdrawLocation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_WithdrawLocation.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WithdrawItemLocation_Index() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_WithdrawLocation.WithdrawItemLocation_IndexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WithdrawItemLocation_Index' in table 'VIEW_WithdrawLocation"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_WithdrawLocation.WithdrawItemLocation_IndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Lot_No() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_WithdrawLocation.Lot_NoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Lot_No' in table 'VIEW_WithdrawLocation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_WithdrawLocation.Lot_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Plot() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_WithdrawLocation.PlotColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Plot' in table 'VIEW_WithdrawLocation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_WithdrawLocation.PlotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tag_No() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_WithdrawLocation.Tag_NoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tag_No' in table 'VIEW_WithdrawLocation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_WithdrawLocation.Tag_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Location_Index() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_WithdrawLocation.Location_IndexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Location_Index' in table 'VIEW_WithdrawLocation' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_WithdrawLocation.Location_IndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Location_Id() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_WithdrawLocation.Location_IdColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Location_Id' in table 'VIEW_WithdrawLocation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_WithdrawLocation.Location_IdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Location_Alias() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_WithdrawLocation.Location_AliasColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Location_Alias' in table 'VIEW_WithdrawLocation' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_WithdrawLocation.Location_AliasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SkuPack() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_WithdrawLocation.SkuPackColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SkuPack' in table 'VIEW_WithdrawLocation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_WithdrawLocation.SkuPackColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Qty_WithLocation() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_WithdrawLocation.Qty_WithLocationColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Qty_WithLocation' in table 'VIEW_WithdrawLocation' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_WithdrawLocation.Qty_WithLocationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Qty_Sub() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_WithdrawLocation.Qty_SubColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Qty_Sub' in table 'VIEW_WithdrawLocation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_WithdrawLocation.Qty_SubColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Weight() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_WithdrawLocation.WeightColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Weight' in table 'VIEW_WithdrawLocation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_WithdrawLocation.WeightColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Volume() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_WithdrawLocation.VolumeColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Volume' in table 'VIEW_WithdrawLocation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_WithdrawLocation.VolumeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OrderPack() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_WithdrawLocation.OrderPackColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OrderPack' in table 'VIEW_WithdrawLocation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_WithdrawLocation.OrderPackColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWithdraw_IndexNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_WithdrawLocation.Withdraw_IndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWithdraw_IndexNull()
            Me(Me.tableVIEW_WithdrawLocation.Withdraw_IndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWithdraw_NoNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_WithdrawLocation.Withdraw_NoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWithdraw_NoNull()
            Me(Me.tableVIEW_WithdrawLocation.Withdraw_NoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWithdraw_DateNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_WithdrawLocation.Withdraw_DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWithdraw_DateNull()
            Me(Me.tableVIEW_WithdrawLocation.Withdraw_DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomer_IndexNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_WithdrawLocation.Customer_IndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustomer_IndexNull()
            Me(Me.tableVIEW_WithdrawLocation.Customer_IndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomer_IdNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_WithdrawLocation.Customer_IdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustomer_IdNull()
            Me(Me.tableVIEW_WithdrawLocation.Customer_IdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTitleNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_WithdrawLocation.TitleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTitleNull()
            Me(Me.tableVIEW_WithdrawLocation.TitleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomer_NameNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_WithdrawLocation.Customer_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustomer_NameNull()
            Me(Me.tableVIEW_WithdrawLocation.Customer_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSku_IndexNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_WithdrawLocation.Sku_IndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSku_IndexNull()
            Me(Me.tableVIEW_WithdrawLocation.Sku_IndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSku_IdNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_WithdrawLocation.Sku_IdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSku_IdNull()
            Me(Me.tableVIEW_WithdrawLocation.Sku_IdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issku_desNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_WithdrawLocation.sku_desColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsku_desNull()
            Me(Me.tableVIEW_WithdrawLocation.sku_desColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemStatus_IndexNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_WithdrawLocation.ItemStatus_IndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemStatus_IndexNull()
            Me(Me.tableVIEW_WithdrawLocation.ItemStatus_IndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemStatus_IdNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_WithdrawLocation.ItemStatus_IdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemStatus_IdNull()
            Me(Me.tableVIEW_WithdrawLocation.ItemStatus_IdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStaDesNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_WithdrawLocation.StaDesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStaDesNull()
            Me(Me.tableVIEW_WithdrawLocation.StaDesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_WithdrawLocation.StatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusNull()
            Me(Me.tableVIEW_WithdrawLocation.StatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWithdrawItemLocation_IndexNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_WithdrawLocation.WithdrawItemLocation_IndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWithdrawItemLocation_IndexNull()
            Me(Me.tableVIEW_WithdrawLocation.WithdrawItemLocation_IndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLot_NoNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_WithdrawLocation.Lot_NoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLot_NoNull()
            Me(Me.tableVIEW_WithdrawLocation.Lot_NoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlotNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_WithdrawLocation.PlotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlotNull()
            Me(Me.tableVIEW_WithdrawLocation.PlotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTag_NoNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_WithdrawLocation.Tag_NoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTag_NoNull()
            Me(Me.tableVIEW_WithdrawLocation.Tag_NoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLocation_IndexNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_WithdrawLocation.Location_IndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLocation_IndexNull()
            Me(Me.tableVIEW_WithdrawLocation.Location_IndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLocation_IdNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_WithdrawLocation.Location_IdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLocation_IdNull()
            Me(Me.tableVIEW_WithdrawLocation.Location_IdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLocation_AliasNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_WithdrawLocation.Location_AliasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLocation_AliasNull()
            Me(Me.tableVIEW_WithdrawLocation.Location_AliasColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSkuPackNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_WithdrawLocation.SkuPackColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSkuPackNull()
            Me(Me.tableVIEW_WithdrawLocation.SkuPackColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQty_WithLocationNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_WithdrawLocation.Qty_WithLocationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQty_WithLocationNull()
            Me(Me.tableVIEW_WithdrawLocation.Qty_WithLocationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQty_SubNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_WithdrawLocation.Qty_SubColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQty_SubNull()
            Me(Me.tableVIEW_WithdrawLocation.Qty_SubColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWeightNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_WithdrawLocation.WeightColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWeightNull()
            Me(Me.tableVIEW_WithdrawLocation.WeightColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVolumeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_WithdrawLocation.VolumeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVolumeNull()
            Me(Me.tableVIEW_WithdrawLocation.VolumeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrderPackNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_WithdrawLocation.OrderPackColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrderPackNull()
            Me(Me.tableVIEW_WithdrawLocation.OrderPackColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VIEW_WithdrawLocationRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VIEW_WithdrawLocationRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VIEW_WithdrawLocationRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VIEW_WithdrawLocationRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
