'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.8937
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsPO_Receipt_CBC"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsPO_Receipt_CBC
    Inherits Global.System.Data.DataSet
    
    Private tableVIEW_CBC_RPT_PO_RECEIPT As VIEW_CBC_RPT_PO_RECEIPTDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("VIEW_CBC_RPT_PO_RECEIPT")) Is Nothing) Then
                MyBase.Tables.Add(New VIEW_CBC_RPT_PO_RECEIPTDataTable(ds.Tables("VIEW_CBC_RPT_PO_RECEIPT")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_CBC_RPT_PO_RECEIPT() As VIEW_CBC_RPT_PO_RECEIPTDataTable
        Get
            Return Me.tableVIEW_CBC_RPT_PO_RECEIPT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsPO_Receipt_CBC = CType(MyBase.Clone,dsPO_Receipt_CBC)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("VIEW_CBC_RPT_PO_RECEIPT")) Is Nothing) Then
                MyBase.Tables.Add(New VIEW_CBC_RPT_PO_RECEIPTDataTable(ds.Tables("VIEW_CBC_RPT_PO_RECEIPT")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableVIEW_CBC_RPT_PO_RECEIPT = CType(MyBase.Tables("VIEW_CBC_RPT_PO_RECEIPT"),VIEW_CBC_RPT_PO_RECEIPTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVIEW_CBC_RPT_PO_RECEIPT) Is Nothing) Then
                Me.tableVIEW_CBC_RPT_PO_RECEIPT.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsPO_Receipt_CBC"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsPO_Receipt_CBC.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableVIEW_CBC_RPT_PO_RECEIPT = New VIEW_CBC_RPT_PO_RECEIPTDataTable
        MyBase.Tables.Add(Me.tableVIEW_CBC_RPT_PO_RECEIPT)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVIEW_CBC_RPT_PO_RECEIPT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsPO_Receipt_CBC = New dsPO_Receipt_CBC
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub VIEW_CBC_RPT_PO_RECEIPTRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_CBC_RPT_PO_RECEIPTRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VIEW_CBC_RPT_PO_RECEIPTDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPurchaseOrder_No As Global.System.Data.DataColumn
        
        Private columnPurchaseOrder_Date As Global.System.Data.DataColumn
        
        Private columnSupplier_Name As Global.System.Data.DataColumn
        
        Private columnStr1 As Global.System.Data.DataColumn
        
        Private columnQty_PO As Global.System.Data.DataColumn
        
        Private columnUnitPrice As Global.System.Data.DataColumn
        
        Private columnAmount As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnExpected_Delivery_Date As Global.System.Data.DataColumn
        
        Private columnInvoice_No As Global.System.Data.DataColumn
        
        Private columnQty_Receive As Global.System.Data.DataColumn
        
        Private columnOrder_Date As Global.System.Data.DataColumn
        
        Private columnOrder_No As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VIEW_CBC_RPT_PO_RECEIPT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PurchaseOrder_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPurchaseOrder_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PurchaseOrder_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPurchaseOrder_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Supplier_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupplier_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Str1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnStr1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Qty_POColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQty_PO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnitPriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnitPrice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Expected_Delivery_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExpected_Delivery_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Invoice_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvoice_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Qty_ReceiveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQty_Receive
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Order_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrder_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Order_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrder_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_CBC_RPT_PO_RECEIPTRow
            Get
                Return CType(Me.Rows(index),VIEW_CBC_RPT_PO_RECEIPTRow)
            End Get
        End Property
        
        Public Event VIEW_CBC_RPT_PO_RECEIPTRowChanging As VIEW_CBC_RPT_PO_RECEIPTRowChangeEventHandler
        
        Public Event VIEW_CBC_RPT_PO_RECEIPTRowChanged As VIEW_CBC_RPT_PO_RECEIPTRowChangeEventHandler
        
        Public Event VIEW_CBC_RPT_PO_RECEIPTRowDeleting As VIEW_CBC_RPT_PO_RECEIPTRowChangeEventHandler
        
        Public Event VIEW_CBC_RPT_PO_RECEIPTRowDeleted As VIEW_CBC_RPT_PO_RECEIPTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVIEW_CBC_RPT_PO_RECEIPTRow(ByVal row As VIEW_CBC_RPT_PO_RECEIPTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVIEW_CBC_RPT_PO_RECEIPTRow(ByVal PurchaseOrder_No As String, ByVal PurchaseOrder_Date As Date, ByVal Supplier_Name As String, ByVal Str1 As String, ByVal Qty_PO As Double, ByVal UnitPrice As Double, ByVal Amount As Double, ByVal Description As String, ByVal Expected_Delivery_Date As Date, ByVal Invoice_No As String, ByVal Qty_Receive As Double, ByVal Order_Date As Date, ByVal Order_No As String, ByVal Status As Integer) As VIEW_CBC_RPT_PO_RECEIPTRow
            Dim rowVIEW_CBC_RPT_PO_RECEIPTRow As VIEW_CBC_RPT_PO_RECEIPTRow = CType(Me.NewRow,VIEW_CBC_RPT_PO_RECEIPTRow)
            Dim columnValuesArray() As Object = New Object() {PurchaseOrder_No, PurchaseOrder_Date, Supplier_Name, Str1, Qty_PO, UnitPrice, Amount, Description, Expected_Delivery_Date, Invoice_No, Qty_Receive, Order_Date, Order_No, Status}
            rowVIEW_CBC_RPT_PO_RECEIPTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVIEW_CBC_RPT_PO_RECEIPTRow)
            Return rowVIEW_CBC_RPT_PO_RECEIPTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VIEW_CBC_RPT_PO_RECEIPTDataTable = CType(MyBase.Clone,VIEW_CBC_RPT_PO_RECEIPTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VIEW_CBC_RPT_PO_RECEIPTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPurchaseOrder_No = MyBase.Columns("PurchaseOrder_No")
            Me.columnPurchaseOrder_Date = MyBase.Columns("PurchaseOrder_Date")
            Me.columnSupplier_Name = MyBase.Columns("Supplier_Name")
            Me.columnStr1 = MyBase.Columns("Str1")
            Me.columnQty_PO = MyBase.Columns("Qty_PO")
            Me.columnUnitPrice = MyBase.Columns("UnitPrice")
            Me.columnAmount = MyBase.Columns("Amount")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnExpected_Delivery_Date = MyBase.Columns("Expected_Delivery_Date")
            Me.columnInvoice_No = MyBase.Columns("Invoice_No")
            Me.columnQty_Receive = MyBase.Columns("Qty_Receive")
            Me.columnOrder_Date = MyBase.Columns("Order_Date")
            Me.columnOrder_No = MyBase.Columns("Order_No")
            Me.columnStatus = MyBase.Columns("Status")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPurchaseOrder_No = New Global.System.Data.DataColumn("PurchaseOrder_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPurchaseOrder_No)
            Me.columnPurchaseOrder_Date = New Global.System.Data.DataColumn("PurchaseOrder_Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPurchaseOrder_Date)
            Me.columnSupplier_Name = New Global.System.Data.DataColumn("Supplier_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupplier_Name)
            Me.columnStr1 = New Global.System.Data.DataColumn("Str1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStr1)
            Me.columnQty_PO = New Global.System.Data.DataColumn("Qty_PO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQty_PO)
            Me.columnUnitPrice = New Global.System.Data.DataColumn("UnitPrice", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnitPrice)
            Me.columnAmount = New Global.System.Data.DataColumn("Amount", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAmount)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnExpected_Delivery_Date = New Global.System.Data.DataColumn("Expected_Delivery_Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExpected_Delivery_Date)
            Me.columnInvoice_No = New Global.System.Data.DataColumn("Invoice_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvoice_No)
            Me.columnQty_Receive = New Global.System.Data.DataColumn("Qty_Receive", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQty_Receive)
            Me.columnOrder_Date = New Global.System.Data.DataColumn("Order_Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrder_Date)
            Me.columnOrder_No = New Global.System.Data.DataColumn("Order_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrder_No)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnPurchaseOrder_No.MaxLength = 50
            Me.columnSupplier_Name.MaxLength = 100
            Me.columnStr1.MaxLength = 255
            Me.columnDescription.MaxLength = 100
            Me.columnInvoice_No.MaxLength = 100
            Me.columnOrder_No.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVIEW_CBC_RPT_PO_RECEIPTRow() As VIEW_CBC_RPT_PO_RECEIPTRow
            Return CType(Me.NewRow,VIEW_CBC_RPT_PO_RECEIPTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VIEW_CBC_RPT_PO_RECEIPTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VIEW_CBC_RPT_PO_RECEIPTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_CBC_RPT_PO_RECEIPTRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_CBC_RPT_PO_RECEIPTRowChanged(Me, New VIEW_CBC_RPT_PO_RECEIPTRowChangeEvent(CType(e.Row,VIEW_CBC_RPT_PO_RECEIPTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_CBC_RPT_PO_RECEIPTRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_CBC_RPT_PO_RECEIPTRowChanging(Me, New VIEW_CBC_RPT_PO_RECEIPTRowChangeEvent(CType(e.Row,VIEW_CBC_RPT_PO_RECEIPTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_CBC_RPT_PO_RECEIPTRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_CBC_RPT_PO_RECEIPTRowDeleted(Me, New VIEW_CBC_RPT_PO_RECEIPTRowChangeEvent(CType(e.Row,VIEW_CBC_RPT_PO_RECEIPTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_CBC_RPT_PO_RECEIPTRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_CBC_RPT_PO_RECEIPTRowDeleting(Me, New VIEW_CBC_RPT_PO_RECEIPTRowChangeEvent(CType(e.Row,VIEW_CBC_RPT_PO_RECEIPTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVIEW_CBC_RPT_PO_RECEIPTRow(ByVal row As VIEW_CBC_RPT_PO_RECEIPTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPO_Receipt_CBC = New dsPO_Receipt_CBC
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VIEW_CBC_RPT_PO_RECEIPTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VIEW_CBC_RPT_PO_RECEIPTRow
        Inherits Global.System.Data.DataRow
        
        Private tableVIEW_CBC_RPT_PO_RECEIPT As VIEW_CBC_RPT_PO_RECEIPTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_CBC_RPT_PO_RECEIPT = CType(Me.Table,VIEW_CBC_RPT_PO_RECEIPTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PurchaseOrder_No() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_CBC_RPT_PO_RECEIPT.PurchaseOrder_NoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PurchaseOrder_No' in table 'VIEW_CBC_RPT_PO_RECEIPT' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_CBC_RPT_PO_RECEIPT.PurchaseOrder_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PurchaseOrder_Date() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_CBC_RPT_PO_RECEIPT.PurchaseOrder_DateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PurchaseOrder_Date' in table 'VIEW_CBC_RPT_PO_RECEIPT' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_CBC_RPT_PO_RECEIPT.PurchaseOrder_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Supplier_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_CBC_RPT_PO_RECEIPT.Supplier_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Supplier_Name' in table 'VIEW_CBC_RPT_PO_RECEIPT' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_CBC_RPT_PO_RECEIPT.Supplier_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Str1() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_CBC_RPT_PO_RECEIPT.Str1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Str1' in table 'VIEW_CBC_RPT_PO_RECEIPT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_CBC_RPT_PO_RECEIPT.Str1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Qty_PO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_CBC_RPT_PO_RECEIPT.Qty_POColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Qty_PO' in table 'VIEW_CBC_RPT_PO_RECEIPT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_CBC_RPT_PO_RECEIPT.Qty_POColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UnitPrice() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_CBC_RPT_PO_RECEIPT.UnitPriceColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UnitPrice' in table 'VIEW_CBC_RPT_PO_RECEIPT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_CBC_RPT_PO_RECEIPT.UnitPriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Amount() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_CBC_RPT_PO_RECEIPT.AmountColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Amount' in table 'VIEW_CBC_RPT_PO_RECEIPT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_CBC_RPT_PO_RECEIPT.AmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_CBC_RPT_PO_RECEIPT.DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'VIEW_CBC_RPT_PO_RECEIPT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_CBC_RPT_PO_RECEIPT.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Expected_Delivery_Date() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_CBC_RPT_PO_RECEIPT.Expected_Delivery_DateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Expected_Delivery_Date' in table 'VIEW_CBC_RPT_PO_RECEIPT' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_CBC_RPT_PO_RECEIPT.Expected_Delivery_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Invoice_No() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_CBC_RPT_PO_RECEIPT.Invoice_NoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Invoice_No' in table 'VIEW_CBC_RPT_PO_RECEIPT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_CBC_RPT_PO_RECEIPT.Invoice_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Qty_Receive() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_CBC_RPT_PO_RECEIPT.Qty_ReceiveColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Qty_Receive' in table 'VIEW_CBC_RPT_PO_RECEIPT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_CBC_RPT_PO_RECEIPT.Qty_ReceiveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Order_Date() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_CBC_RPT_PO_RECEIPT.Order_DateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Order_Date' in table 'VIEW_CBC_RPT_PO_RECEIPT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_CBC_RPT_PO_RECEIPT.Order_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Order_No() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_CBC_RPT_PO_RECEIPT.Order_NoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Order_No' in table 'VIEW_CBC_RPT_PO_RECEIPT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_CBC_RPT_PO_RECEIPT.Order_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_CBC_RPT_PO_RECEIPT.StatusColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Status' in table 'VIEW_CBC_RPT_PO_RECEIPT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_CBC_RPT_PO_RECEIPT.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPurchaseOrder_NoNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_CBC_RPT_PO_RECEIPT.PurchaseOrder_NoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPurchaseOrder_NoNull()
            Me(Me.tableVIEW_CBC_RPT_PO_RECEIPT.PurchaseOrder_NoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPurchaseOrder_DateNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_CBC_RPT_PO_RECEIPT.PurchaseOrder_DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPurchaseOrder_DateNull()
            Me(Me.tableVIEW_CBC_RPT_PO_RECEIPT.PurchaseOrder_DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSupplier_NameNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_CBC_RPT_PO_RECEIPT.Supplier_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSupplier_NameNull()
            Me(Me.tableVIEW_CBC_RPT_PO_RECEIPT.Supplier_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStr1Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_CBC_RPT_PO_RECEIPT.Str1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStr1Null()
            Me(Me.tableVIEW_CBC_RPT_PO_RECEIPT.Str1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQty_PONull() As Boolean
            Return Me.IsNull(Me.tableVIEW_CBC_RPT_PO_RECEIPT.Qty_POColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQty_PONull()
            Me(Me.tableVIEW_CBC_RPT_PO_RECEIPT.Qty_POColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnitPriceNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_CBC_RPT_PO_RECEIPT.UnitPriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnitPriceNull()
            Me(Me.tableVIEW_CBC_RPT_PO_RECEIPT.UnitPriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAmountNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_CBC_RPT_PO_RECEIPT.AmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAmountNull()
            Me(Me.tableVIEW_CBC_RPT_PO_RECEIPT.AmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_CBC_RPT_PO_RECEIPT.DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescriptionNull()
            Me(Me.tableVIEW_CBC_RPT_PO_RECEIPT.DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsExpected_Delivery_DateNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_CBC_RPT_PO_RECEIPT.Expected_Delivery_DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetExpected_Delivery_DateNull()
            Me(Me.tableVIEW_CBC_RPT_PO_RECEIPT.Expected_Delivery_DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvoice_NoNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_CBC_RPT_PO_RECEIPT.Invoice_NoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvoice_NoNull()
            Me(Me.tableVIEW_CBC_RPT_PO_RECEIPT.Invoice_NoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQty_ReceiveNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_CBC_RPT_PO_RECEIPT.Qty_ReceiveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQty_ReceiveNull()
            Me(Me.tableVIEW_CBC_RPT_PO_RECEIPT.Qty_ReceiveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrder_DateNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_CBC_RPT_PO_RECEIPT.Order_DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrder_DateNull()
            Me(Me.tableVIEW_CBC_RPT_PO_RECEIPT.Order_DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrder_NoNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_CBC_RPT_PO_RECEIPT.Order_NoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrder_NoNull()
            Me(Me.tableVIEW_CBC_RPT_PO_RECEIPT.Order_NoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_CBC_RPT_PO_RECEIPT.StatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusNull()
            Me(Me.tableVIEW_CBC_RPT_PO_RECEIPT.StatusColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VIEW_CBC_RPT_PO_RECEIPTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VIEW_CBC_RPT_PO_RECEIPTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VIEW_CBC_RPT_PO_RECEIPTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VIEW_CBC_RPT_PO_RECEIPTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
