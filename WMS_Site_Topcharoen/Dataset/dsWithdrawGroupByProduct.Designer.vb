'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.8937
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsWithdrawGroupByProduct"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsWithdrawGroupByProduct
    Inherits Global.System.Data.DataSet
    
    Private tableVIEW_RPT_WithdrawGroupByProduct As VIEW_RPT_WithdrawGroupByProductDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("VIEW_RPT_WithdrawGroupByProduct")) Is Nothing) Then
                MyBase.Tables.Add(New VIEW_RPT_WithdrawGroupByProductDataTable(ds.Tables("VIEW_RPT_WithdrawGroupByProduct")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_RPT_WithdrawGroupByProduct() As VIEW_RPT_WithdrawGroupByProductDataTable
        Get
            Return Me.tableVIEW_RPT_WithdrawGroupByProduct
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsWithdrawGroupByProduct = CType(MyBase.Clone,dsWithdrawGroupByProduct)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("VIEW_RPT_WithdrawGroupByProduct")) Is Nothing) Then
                MyBase.Tables.Add(New VIEW_RPT_WithdrawGroupByProductDataTable(ds.Tables("VIEW_RPT_WithdrawGroupByProduct")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableVIEW_RPT_WithdrawGroupByProduct = CType(MyBase.Tables("VIEW_RPT_WithdrawGroupByProduct"),VIEW_RPT_WithdrawGroupByProductDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVIEW_RPT_WithdrawGroupByProduct) Is Nothing) Then
                Me.tableVIEW_RPT_WithdrawGroupByProduct.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsWithdrawGroupByProduct"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsWithdrawGroupByProduct.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableVIEW_RPT_WithdrawGroupByProduct = New VIEW_RPT_WithdrawGroupByProductDataTable
        MyBase.Tables.Add(Me.tableVIEW_RPT_WithdrawGroupByProduct)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVIEW_RPT_WithdrawGroupByProduct() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsWithdrawGroupByProduct = New dsWithdrawGroupByProduct
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub VIEW_RPT_WithdrawGroupByProductRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_RPT_WithdrawGroupByProductRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VIEW_RPT_WithdrawGroupByProductDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnWithdraw_No As Global.System.Data.DataColumn
        
        Private columnWithdraw_Date As Global.System.Data.DataColumn
        
        Private columnCustomer_Index As Global.System.Data.DataColumn
        
        Private columnRef_No1 As Global.System.Data.DataColumn
        
        Private columnRef_No2 As Global.System.Data.DataColumn
        
        Private columnWithdraw_Index As Global.System.Data.DataColumn
        
        Private columnSKU_Index As Global.System.Data.DataColumn
        
        Private columnQty As Global.System.Data.DataColumn
        
        Private columnTotal_Qty As Global.System.Data.DataColumn
        
        Private columnItemStatus_Index As Global.System.Data.DataColumn
        
        Private columnMfg_Date As Global.System.Data.DataColumn
        
        Private columnExp_Date As Global.System.Data.DataColumn
        
        Private columnLot_No As Global.System.Data.DataColumn
        
        Private columnPLot As Global.System.Data.DataColumn
        
        Private columnItemDefinition_Index As Global.System.Data.DataColumn
        
        Private columnReceiptPackage As Global.System.Data.DataColumn
        
        Private columnPackage_Index As Global.System.Data.DataColumn
        
        Private columnStr1 As Global.System.Data.DataColumn
        
        Private columnStr2 As Global.System.Data.DataColumn
        
        Private columnSKU_Id As Global.System.Data.DataColumn
        
        Private columnWeight As Global.System.Data.DataColumn
        
        Private columnPallet_No As Global.System.Data.DataColumn
        
        Private columnVolume As Global.System.Data.DataColumn
        
        Private columnItemStatus As Global.System.Data.DataColumn
        
        Private columnCustomerName As Global.System.Data.DataColumn
        
        Private columnDoc As Global.System.Data.DataColumn
        
        Private columnItemDefinition_Name As Global.System.Data.DataColumn
        
        Private columnItemDefinition_Name_th As Global.System.Data.DataColumn
        
        Private columnSKUPackage As Global.System.Data.DataColumn
        
        Private columnCustomer_Id As Global.System.Data.DataColumn
        
        Private columnModel_Des As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VIEW_RPT_WithdrawGroupByProduct"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Withdraw_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWithdraw_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Withdraw_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWithdraw_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Customer_IndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomer_Index
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Ref_No1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRef_No1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Ref_No2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRef_No2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Withdraw_IndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWithdraw_Index
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SKU_IndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSKU_Index
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Total_QtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotal_Qty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemStatus_IndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemStatus_Index
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Mfg_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMfg_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Exp_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExp_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Lot_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLot_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PLotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemDefinition_IndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemDefinition_Index
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReceiptPackageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReceiptPackage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Package_IndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPackage_Index
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Str1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnStr1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Str2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnStr2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SKU_IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSKU_Id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WeightColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWeight
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pallet_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPallet_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VolumeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVolume
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustomerNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomerName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDoc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemDefinition_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemDefinition_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemDefinition_Name_thColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemDefinition_Name_th
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SKUPackageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSKUPackage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Customer_IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomer_Id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Model_DesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModel_Des
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_RPT_WithdrawGroupByProductRow
            Get
                Return CType(Me.Rows(index),VIEW_RPT_WithdrawGroupByProductRow)
            End Get
        End Property
        
        Public Event VIEW_RPT_WithdrawGroupByProductRowChanging As VIEW_RPT_WithdrawGroupByProductRowChangeEventHandler
        
        Public Event VIEW_RPT_WithdrawGroupByProductRowChanged As VIEW_RPT_WithdrawGroupByProductRowChangeEventHandler
        
        Public Event VIEW_RPT_WithdrawGroupByProductRowDeleting As VIEW_RPT_WithdrawGroupByProductRowChangeEventHandler
        
        Public Event VIEW_RPT_WithdrawGroupByProductRowDeleted As VIEW_RPT_WithdrawGroupByProductRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVIEW_RPT_WithdrawGroupByProductRow(ByVal row As VIEW_RPT_WithdrawGroupByProductRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVIEW_RPT_WithdrawGroupByProductRow( _
                    ByVal Withdraw_No As String,  _
                    ByVal Withdraw_Date As Date,  _
                    ByVal Customer_Index As String,  _
                    ByVal Ref_No1 As String,  _
                    ByVal Ref_No2 As String,  _
                    ByVal Withdraw_Index As String,  _
                    ByVal SKU_Index As String,  _
                    ByVal Qty As Double,  _
                    ByVal Total_Qty As Double,  _
                    ByVal ItemStatus_Index As String,  _
                    ByVal Mfg_Date As String,  _
                    ByVal Exp_Date As String,  _
                    ByVal Lot_No As String,  _
                    ByVal PLot As String,  _
                    ByVal ItemDefinition_Index As String,  _
                    ByVal ReceiptPackage As String,  _
                    ByVal Package_Index As String,  _
                    ByVal Str1 As String,  _
                    ByVal Str2 As String,  _
                    ByVal SKU_Id As String,  _
                    ByVal Weight As Double,  _
                    ByVal Pallet_No As String,  _
                    ByVal Volume As Double,  _
                    ByVal ItemStatus As String,  _
                    ByVal CustomerName As String,  _
                    ByVal Doc As String,  _
                    ByVal ItemDefinition_Name As String,  _
                    ByVal ItemDefinition_Name_th As String,  _
                    ByVal SKUPackage As String,  _
                    ByVal Customer_Id As String,  _
                    ByVal Model_Des As String) As VIEW_RPT_WithdrawGroupByProductRow
            Dim rowVIEW_RPT_WithdrawGroupByProductRow As VIEW_RPT_WithdrawGroupByProductRow = CType(Me.NewRow,VIEW_RPT_WithdrawGroupByProductRow)
            Dim columnValuesArray() As Object = New Object() {Withdraw_No, Withdraw_Date, Customer_Index, Ref_No1, Ref_No2, Withdraw_Index, SKU_Index, Qty, Total_Qty, ItemStatus_Index, Mfg_Date, Exp_Date, Lot_No, PLot, ItemDefinition_Index, ReceiptPackage, Package_Index, Str1, Str2, SKU_Id, Weight, Pallet_No, Volume, ItemStatus, CustomerName, Doc, ItemDefinition_Name, ItemDefinition_Name_th, SKUPackage, Customer_Id, Model_Des}
            rowVIEW_RPT_WithdrawGroupByProductRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVIEW_RPT_WithdrawGroupByProductRow)
            Return rowVIEW_RPT_WithdrawGroupByProductRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VIEW_RPT_WithdrawGroupByProductDataTable = CType(MyBase.Clone,VIEW_RPT_WithdrawGroupByProductDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VIEW_RPT_WithdrawGroupByProductDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnWithdraw_No = MyBase.Columns("Withdraw_No")
            Me.columnWithdraw_Date = MyBase.Columns("Withdraw_Date")
            Me.columnCustomer_Index = MyBase.Columns("Customer_Index")
            Me.columnRef_No1 = MyBase.Columns("Ref_No1")
            Me.columnRef_No2 = MyBase.Columns("Ref_No2")
            Me.columnWithdraw_Index = MyBase.Columns("Withdraw_Index")
            Me.columnSKU_Index = MyBase.Columns("SKU_Index")
            Me.columnQty = MyBase.Columns("Qty")
            Me.columnTotal_Qty = MyBase.Columns("Total_Qty")
            Me.columnItemStatus_Index = MyBase.Columns("ItemStatus_Index")
            Me.columnMfg_Date = MyBase.Columns("Mfg_Date")
            Me.columnExp_Date = MyBase.Columns("Exp_Date")
            Me.columnLot_No = MyBase.Columns("Lot_No")
            Me.columnPLot = MyBase.Columns("PLot")
            Me.columnItemDefinition_Index = MyBase.Columns("ItemDefinition_Index")
            Me.columnReceiptPackage = MyBase.Columns("ReceiptPackage")
            Me.columnPackage_Index = MyBase.Columns("Package_Index")
            Me.columnStr1 = MyBase.Columns("Str1")
            Me.columnStr2 = MyBase.Columns("Str2")
            Me.columnSKU_Id = MyBase.Columns("SKU_Id")
            Me.columnWeight = MyBase.Columns("Weight")
            Me.columnPallet_No = MyBase.Columns("Pallet_No")
            Me.columnVolume = MyBase.Columns("Volume")
            Me.columnItemStatus = MyBase.Columns("ItemStatus")
            Me.columnCustomerName = MyBase.Columns("CustomerName")
            Me.columnDoc = MyBase.Columns("Doc")
            Me.columnItemDefinition_Name = MyBase.Columns("ItemDefinition_Name")
            Me.columnItemDefinition_Name_th = MyBase.Columns("ItemDefinition_Name_th")
            Me.columnSKUPackage = MyBase.Columns("SKUPackage")
            Me.columnCustomer_Id = MyBase.Columns("Customer_Id")
            Me.columnModel_Des = MyBase.Columns("Model_Des")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnWithdraw_No = New Global.System.Data.DataColumn("Withdraw_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWithdraw_No)
            Me.columnWithdraw_Date = New Global.System.Data.DataColumn("Withdraw_Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWithdraw_Date)
            Me.columnCustomer_Index = New Global.System.Data.DataColumn("Customer_Index", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomer_Index)
            Me.columnRef_No1 = New Global.System.Data.DataColumn("Ref_No1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRef_No1)
            Me.columnRef_No2 = New Global.System.Data.DataColumn("Ref_No2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRef_No2)
            Me.columnWithdraw_Index = New Global.System.Data.DataColumn("Withdraw_Index", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWithdraw_Index)
            Me.columnSKU_Index = New Global.System.Data.DataColumn("SKU_Index", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSKU_Index)
            Me.columnQty = New Global.System.Data.DataColumn("Qty", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQty)
            Me.columnTotal_Qty = New Global.System.Data.DataColumn("Total_Qty", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotal_Qty)
            Me.columnItemStatus_Index = New Global.System.Data.DataColumn("ItemStatus_Index", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemStatus_Index)
            Me.columnMfg_Date = New Global.System.Data.DataColumn("Mfg_Date", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMfg_Date)
            Me.columnExp_Date = New Global.System.Data.DataColumn("Exp_Date", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExp_Date)
            Me.columnLot_No = New Global.System.Data.DataColumn("Lot_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLot_No)
            Me.columnPLot = New Global.System.Data.DataColumn("PLot", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLot)
            Me.columnItemDefinition_Index = New Global.System.Data.DataColumn("ItemDefinition_Index", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemDefinition_Index)
            Me.columnReceiptPackage = New Global.System.Data.DataColumn("ReceiptPackage", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReceiptPackage)
            Me.columnPackage_Index = New Global.System.Data.DataColumn("Package_Index", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPackage_Index)
            Me.columnStr1 = New Global.System.Data.DataColumn("Str1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStr1)
            Me.columnStr2 = New Global.System.Data.DataColumn("Str2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStr2)
            Me.columnSKU_Id = New Global.System.Data.DataColumn("SKU_Id", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSKU_Id)
            Me.columnWeight = New Global.System.Data.DataColumn("Weight", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWeight)
            Me.columnPallet_No = New Global.System.Data.DataColumn("Pallet_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPallet_No)
            Me.columnVolume = New Global.System.Data.DataColumn("Volume", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVolume)
            Me.columnItemStatus = New Global.System.Data.DataColumn("ItemStatus", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemStatus)
            Me.columnCustomerName = New Global.System.Data.DataColumn("CustomerName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomerName)
            Me.columnDoc = New Global.System.Data.DataColumn("Doc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDoc)
            Me.columnItemDefinition_Name = New Global.System.Data.DataColumn("ItemDefinition_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemDefinition_Name)
            Me.columnItemDefinition_Name_th = New Global.System.Data.DataColumn("ItemDefinition_Name_th", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemDefinition_Name_th)
            Me.columnSKUPackage = New Global.System.Data.DataColumn("SKUPackage", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSKUPackage)
            Me.columnCustomer_Id = New Global.System.Data.DataColumn("Customer_Id", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomer_Id)
            Me.columnModel_Des = New Global.System.Data.DataColumn("Model_Des", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModel_Des)
            Me.columnWithdraw_No.AllowDBNull = false
            Me.columnWithdraw_No.MaxLength = 50
            Me.columnCustomer_Index.MaxLength = 50
            Me.columnRef_No1.MaxLength = 50
            Me.columnRef_No2.MaxLength = 50
            Me.columnWithdraw_Index.MaxLength = 13
            Me.columnSKU_Index.MaxLength = 50
            Me.columnItemStatus_Index.MaxLength = 50
            Me.columnMfg_Date.AllowDBNull = false
            Me.columnExp_Date.AllowDBNull = false
            Me.columnLot_No.AllowDBNull = false
            Me.columnPLot.AllowDBNull = false
            Me.columnItemDefinition_Index.MaxLength = 13
            Me.columnReceiptPackage.MaxLength = 100
            Me.columnPackage_Index.MaxLength = 13
            Me.columnStr1.MaxLength = 255
            Me.columnStr2.MaxLength = 255
            Me.columnSKU_Id.MaxLength = 50
            Me.columnPallet_No.MaxLength = 100
            Me.columnItemStatus.MaxLength = 100
            Me.columnCustomerName.MaxLength = 100
            Me.columnDoc.MaxLength = 100
            Me.columnItemDefinition_Name.MaxLength = 255
            Me.columnItemDefinition_Name_th.MaxLength = 255
            Me.columnSKUPackage.MaxLength = 100
            Me.columnCustomer_Id.MaxLength = 13
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVIEW_RPT_WithdrawGroupByProductRow() As VIEW_RPT_WithdrawGroupByProductRow
            Return CType(Me.NewRow,VIEW_RPT_WithdrawGroupByProductRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VIEW_RPT_WithdrawGroupByProductRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VIEW_RPT_WithdrawGroupByProductRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_RPT_WithdrawGroupByProductRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_RPT_WithdrawGroupByProductRowChanged(Me, New VIEW_RPT_WithdrawGroupByProductRowChangeEvent(CType(e.Row,VIEW_RPT_WithdrawGroupByProductRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_RPT_WithdrawGroupByProductRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_RPT_WithdrawGroupByProductRowChanging(Me, New VIEW_RPT_WithdrawGroupByProductRowChangeEvent(CType(e.Row,VIEW_RPT_WithdrawGroupByProductRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_RPT_WithdrawGroupByProductRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_RPT_WithdrawGroupByProductRowDeleted(Me, New VIEW_RPT_WithdrawGroupByProductRowChangeEvent(CType(e.Row,VIEW_RPT_WithdrawGroupByProductRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_RPT_WithdrawGroupByProductRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_RPT_WithdrawGroupByProductRowDeleting(Me, New VIEW_RPT_WithdrawGroupByProductRowChangeEvent(CType(e.Row,VIEW_RPT_WithdrawGroupByProductRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVIEW_RPT_WithdrawGroupByProductRow(ByVal row As VIEW_RPT_WithdrawGroupByProductRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsWithdrawGroupByProduct = New dsWithdrawGroupByProduct
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VIEW_RPT_WithdrawGroupByProductDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VIEW_RPT_WithdrawGroupByProductRow
        Inherits Global.System.Data.DataRow
        
        Private tableVIEW_RPT_WithdrawGroupByProduct As VIEW_RPT_WithdrawGroupByProductDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_RPT_WithdrawGroupByProduct = CType(Me.Table,VIEW_RPT_WithdrawGroupByProductDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Withdraw_No() As String
            Get
                Return CType(Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.Withdraw_NoColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.Withdraw_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Withdraw_Date() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.Withdraw_DateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Withdraw_Date' in table 'VIEW_RPT_WithdrawGroupByProduct' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.Withdraw_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Customer_Index() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.Customer_IndexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Customer_Index' in table 'VIEW_RPT_WithdrawGroupByProduct' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.Customer_IndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ref_No1() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.Ref_No1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ref_No1' in table 'VIEW_RPT_WithdrawGroupByProduct' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.Ref_No1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ref_No2() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.Ref_No2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ref_No2' in table 'VIEW_RPT_WithdrawGroupByProduct' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.Ref_No2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Withdraw_Index() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.Withdraw_IndexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Withdraw_Index' in table 'VIEW_RPT_WithdrawGroupByProduct' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.Withdraw_IndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SKU_Index() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.SKU_IndexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SKU_Index' in table 'VIEW_RPT_WithdrawGroupByProduct' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.SKU_IndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Qty() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.QtyColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Qty' in table 'VIEW_RPT_WithdrawGroupByProduct' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.QtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Total_Qty() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.Total_QtyColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Total_Qty' in table 'VIEW_RPT_WithdrawGroupByProduct' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.Total_QtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemStatus_Index() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.ItemStatus_IndexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemStatus_Index' in table 'VIEW_RPT_WithdrawGroupByProduct"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.ItemStatus_IndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Mfg_Date() As String
            Get
                Return CType(Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.Mfg_DateColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.Mfg_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Exp_Date() As String
            Get
                Return CType(Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.Exp_DateColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.Exp_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Lot_No() As String
            Get
                Return CType(Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.Lot_NoColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.Lot_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PLot() As String
            Get
                Return CType(Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.PLotColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.PLotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemDefinition_Index() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.ItemDefinition_IndexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemDefinition_Index' in table 'VIEW_RPT_WithdrawGroupByPro"& _ 
                            "duct' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.ItemDefinition_IndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReceiptPackage() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.ReceiptPackageColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReceiptPackage' in table 'VIEW_RPT_WithdrawGroupByProduct' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.ReceiptPackageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Package_Index() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.Package_IndexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Package_Index' in table 'VIEW_RPT_WithdrawGroupByProduct' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.Package_IndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Str1() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.Str1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Str1' in table 'VIEW_RPT_WithdrawGroupByProduct' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.Str1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Str2() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.Str2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Str2' in table 'VIEW_RPT_WithdrawGroupByProduct' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.Str2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SKU_Id() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.SKU_IdColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SKU_Id' in table 'VIEW_RPT_WithdrawGroupByProduct' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.SKU_IdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Weight() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.WeightColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Weight' in table 'VIEW_RPT_WithdrawGroupByProduct' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.WeightColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pallet_No() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.Pallet_NoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pallet_No' in table 'VIEW_RPT_WithdrawGroupByProduct' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.Pallet_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Volume() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.VolumeColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Volume' in table 'VIEW_RPT_WithdrawGroupByProduct' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.VolumeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemStatus() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.ItemStatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemStatus' in table 'VIEW_RPT_WithdrawGroupByProduct' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.ItemStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustomerName() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.CustomerNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustomerName' in table 'VIEW_RPT_WithdrawGroupByProduct' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.CustomerNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Doc() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.DocColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Doc' in table 'VIEW_RPT_WithdrawGroupByProduct' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.DocColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemDefinition_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.ItemDefinition_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemDefinition_Name' in table 'VIEW_RPT_WithdrawGroupByProd"& _ 
                            "uct' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.ItemDefinition_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemDefinition_Name_th() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.ItemDefinition_Name_thColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemDefinition_Name_th' in table 'VIEW_RPT_WithdrawGroupByP"& _ 
                            "roduct' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.ItemDefinition_Name_thColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SKUPackage() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.SKUPackageColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SKUPackage' in table 'VIEW_RPT_WithdrawGroupByProduct' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.SKUPackageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Customer_Id() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.Customer_IdColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Customer_Id' in table 'VIEW_RPT_WithdrawGroupByProduct' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.Customer_IdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Model_Des() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.Model_DesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Model_Des' in table 'VIEW_RPT_WithdrawGroupByProduct' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.Model_DesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWithdraw_DateNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_RPT_WithdrawGroupByProduct.Withdraw_DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWithdraw_DateNull()
            Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.Withdraw_DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomer_IndexNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_RPT_WithdrawGroupByProduct.Customer_IndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustomer_IndexNull()
            Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.Customer_IndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRef_No1Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_RPT_WithdrawGroupByProduct.Ref_No1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRef_No1Null()
            Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.Ref_No1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRef_No2Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_RPT_WithdrawGroupByProduct.Ref_No2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRef_No2Null()
            Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.Ref_No2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWithdraw_IndexNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_RPT_WithdrawGroupByProduct.Withdraw_IndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWithdraw_IndexNull()
            Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.Withdraw_IndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSKU_IndexNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_RPT_WithdrawGroupByProduct.SKU_IndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSKU_IndexNull()
            Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.SKU_IndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQtyNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_RPT_WithdrawGroupByProduct.QtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQtyNull()
            Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.QtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotal_QtyNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_RPT_WithdrawGroupByProduct.Total_QtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotal_QtyNull()
            Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.Total_QtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemStatus_IndexNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_RPT_WithdrawGroupByProduct.ItemStatus_IndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemStatus_IndexNull()
            Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.ItemStatus_IndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemDefinition_IndexNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_RPT_WithdrawGroupByProduct.ItemDefinition_IndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemDefinition_IndexNull()
            Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.ItemDefinition_IndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReceiptPackageNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_RPT_WithdrawGroupByProduct.ReceiptPackageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReceiptPackageNull()
            Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.ReceiptPackageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPackage_IndexNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_RPT_WithdrawGroupByProduct.Package_IndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPackage_IndexNull()
            Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.Package_IndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStr1Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_RPT_WithdrawGroupByProduct.Str1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStr1Null()
            Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.Str1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStr2Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_RPT_WithdrawGroupByProduct.Str2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStr2Null()
            Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.Str2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSKU_IdNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_RPT_WithdrawGroupByProduct.SKU_IdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSKU_IdNull()
            Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.SKU_IdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWeightNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_RPT_WithdrawGroupByProduct.WeightColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWeightNull()
            Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.WeightColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPallet_NoNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_RPT_WithdrawGroupByProduct.Pallet_NoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPallet_NoNull()
            Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.Pallet_NoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVolumeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_RPT_WithdrawGroupByProduct.VolumeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVolumeNull()
            Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.VolumeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemStatusNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_RPT_WithdrawGroupByProduct.ItemStatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemStatusNull()
            Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.ItemStatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomerNameNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_RPT_WithdrawGroupByProduct.CustomerNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustomerNameNull()
            Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.CustomerNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_RPT_WithdrawGroupByProduct.DocColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocNull()
            Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.DocColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemDefinition_NameNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_RPT_WithdrawGroupByProduct.ItemDefinition_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemDefinition_NameNull()
            Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.ItemDefinition_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemDefinition_Name_thNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_RPT_WithdrawGroupByProduct.ItemDefinition_Name_thColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemDefinition_Name_thNull()
            Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.ItemDefinition_Name_thColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSKUPackageNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_RPT_WithdrawGroupByProduct.SKUPackageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSKUPackageNull()
            Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.SKUPackageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomer_IdNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_RPT_WithdrawGroupByProduct.Customer_IdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustomer_IdNull()
            Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.Customer_IdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModel_DesNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_RPT_WithdrawGroupByProduct.Model_DesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModel_DesNull()
            Me(Me.tableVIEW_RPT_WithdrawGroupByProduct.Model_DesColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VIEW_RPT_WithdrawGroupByProductRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VIEW_RPT_WithdrawGroupByProductRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VIEW_RPT_WithdrawGroupByProductRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VIEW_RPT_WithdrawGroupByProductRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
