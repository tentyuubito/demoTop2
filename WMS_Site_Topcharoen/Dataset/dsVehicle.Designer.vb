'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.8937
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsVehicle"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsVehicle
    Inherits Global.System.Data.DataSet
    
    Private tableVIEW_Master_Vehicle As VIEW_Master_VehicleDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("VIEW_Master_Vehicle")) Is Nothing) Then
                MyBase.Tables.Add(New VIEW_Master_VehicleDataTable(ds.Tables("VIEW_Master_Vehicle")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_Master_Vehicle() As VIEW_Master_VehicleDataTable
        Get
            Return Me.tableVIEW_Master_Vehicle
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsVehicle = CType(MyBase.Clone,dsVehicle)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("VIEW_Master_Vehicle")) Is Nothing) Then
                MyBase.Tables.Add(New VIEW_Master_VehicleDataTable(ds.Tables("VIEW_Master_Vehicle")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableVIEW_Master_Vehicle = CType(MyBase.Tables("VIEW_Master_Vehicle"),VIEW_Master_VehicleDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVIEW_Master_Vehicle) Is Nothing) Then
                Me.tableVIEW_Master_Vehicle.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsVehicle"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsVehicle.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableVIEW_Master_Vehicle = New VIEW_Master_VehicleDataTable
        MyBase.Tables.Add(Me.tableVIEW_Master_Vehicle)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVIEW_Master_Vehicle() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsVehicle = New dsVehicle
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub VIEW_Master_VehicleRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_Master_VehicleRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VIEW_Master_VehicleDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnVehicle_Index As Global.System.Data.DataColumn
        
        Private columnVehicle_Id As Global.System.Data.DataColumn
        
        Private columnVehicle_No As Global.System.Data.DataColumn
        
        Private columnEmployee_Index As Global.System.Data.DataColumn
        
        Private columnVehicleType_Index As Global.System.Data.DataColumn
        
        Private columnWeight_Vehicle As Global.System.Data.DataColumn
        
        Private columnpallet_Vehicle As Global.System.Data.DataColumn
        
        Private columnVolume_Vehicle As Global.System.Data.DataColumn
        
        Private columnVehicle_Date As Global.System.Data.DataColumn
        
        Private columnVehicle_color As Global.System.Data.DataColumn
        
        Private columnVehicle_Brand As Global.System.Data.DataColumn
        
        Private columnVehicle_Model As Global.System.Data.DataColumn
        
        Private columnVehicle_year As Global.System.Data.DataColumn
        
        Private columnRef_No1 As Global.System.Data.DataColumn
        
        Private columnStr1 As Global.System.Data.DataColumn
        
        Private columnStr2 As Global.System.Data.DataColumn
        
        Private columnStr3 As Global.System.Data.DataColumn
        
        Private columnStr4 As Global.System.Data.DataColumn
        
        Private columnStr5 As Global.System.Data.DataColumn
        
        Private columncomment As Global.System.Data.DataColumn
        
        Private columnadd_by As Global.System.Data.DataColumn
        
        Private columnadd_date As Global.System.Data.DataColumn
        
        Private columnadd_branch As Global.System.Data.DataColumn
        
        Private columnupdate_by As Global.System.Data.DataColumn
        
        Private columnupdate_date As Global.System.Data.DataColumn
        
        Private columnupdate_branch As Global.System.Data.DataColumn
        
        Private columnstatus_id As Global.System.Data.DataColumn
        
        Private columnVehicleType As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VIEW_Master_Vehicle"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Vehicle_IndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVehicle_Index
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Vehicle_IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVehicle_Id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Vehicle_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVehicle_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Employee_IndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmployee_Index
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VehicleType_IndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVehicleType_Index
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Weight_VehicleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWeight_Vehicle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pallet_VehicleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpallet_Vehicle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Volume_VehicleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVolume_Vehicle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Vehicle_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVehicle_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Vehicle_colorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVehicle_color
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Vehicle_BrandColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVehicle_Brand
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Vehicle_ModelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVehicle_Model
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Vehicle_yearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVehicle_year
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Ref_No1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRef_No1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Str1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnStr1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Str2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnStr2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Str3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnStr3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Str4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnStr4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Str5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnStr5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property commentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncomment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property add_byColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnadd_by
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property add_dateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnadd_date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property add_branchColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnadd_branch
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property update_byColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnupdate_by
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property update_dateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnupdate_date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property update_branchColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnupdate_branch
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property status_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstatus_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VehicleTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVehicleType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_Master_VehicleRow
            Get
                Return CType(Me.Rows(index),VIEW_Master_VehicleRow)
            End Get
        End Property
        
        Public Event VIEW_Master_VehicleRowChanging As VIEW_Master_VehicleRowChangeEventHandler
        
        Public Event VIEW_Master_VehicleRowChanged As VIEW_Master_VehicleRowChangeEventHandler
        
        Public Event VIEW_Master_VehicleRowDeleting As VIEW_Master_VehicleRowChangeEventHandler
        
        Public Event VIEW_Master_VehicleRowDeleted As VIEW_Master_VehicleRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVIEW_Master_VehicleRow(ByVal row As VIEW_Master_VehicleRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVIEW_Master_VehicleRow( _
                    ByVal Vehicle_Index As String,  _
                    ByVal Vehicle_Id As String,  _
                    ByVal Vehicle_No As String,  _
                    ByVal Employee_Index As String,  _
                    ByVal VehicleType_Index As String,  _
                    ByVal Weight_Vehicle As Double,  _
                    ByVal pallet_Vehicle As Integer,  _
                    ByVal Volume_Vehicle As Double,  _
                    ByVal Vehicle_Date As Date,  _
                    ByVal Vehicle_color As String,  _
                    ByVal Vehicle_Brand As String,  _
                    ByVal Vehicle_Model As String,  _
                    ByVal Vehicle_year As Integer,  _
                    ByVal Ref_No1 As String,  _
                    ByVal Str1 As String,  _
                    ByVal Str2 As String,  _
                    ByVal Str3 As String,  _
                    ByVal Str4 As String,  _
                    ByVal Str5 As String,  _
                    ByVal comment As String,  _
                    ByVal add_by As String,  _
                    ByVal add_date As Date,  _
                    ByVal add_branch As Integer,  _
                    ByVal update_by As String,  _
                    ByVal update_date As Date,  _
                    ByVal update_branch As Integer,  _
                    ByVal status_id As Integer,  _
                    ByVal VehicleType As String) As VIEW_Master_VehicleRow
            Dim rowVIEW_Master_VehicleRow As VIEW_Master_VehicleRow = CType(Me.NewRow,VIEW_Master_VehicleRow)
            Dim columnValuesArray() As Object = New Object() {Vehicle_Index, Vehicle_Id, Vehicle_No, Employee_Index, VehicleType_Index, Weight_Vehicle, pallet_Vehicle, Volume_Vehicle, Vehicle_Date, Vehicle_color, Vehicle_Brand, Vehicle_Model, Vehicle_year, Ref_No1, Str1, Str2, Str3, Str4, Str5, comment, add_by, add_date, add_branch, update_by, update_date, update_branch, status_id, VehicleType}
            rowVIEW_Master_VehicleRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVIEW_Master_VehicleRow)
            Return rowVIEW_Master_VehicleRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByVehicle_Index(ByVal Vehicle_Index As String) As VIEW_Master_VehicleRow
            Return CType(Me.Rows.Find(New Object() {Vehicle_Index}),VIEW_Master_VehicleRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VIEW_Master_VehicleDataTable = CType(MyBase.Clone,VIEW_Master_VehicleDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VIEW_Master_VehicleDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnVehicle_Index = MyBase.Columns("Vehicle_Index")
            Me.columnVehicle_Id = MyBase.Columns("Vehicle_Id")
            Me.columnVehicle_No = MyBase.Columns("Vehicle_No")
            Me.columnEmployee_Index = MyBase.Columns("Employee_Index")
            Me.columnVehicleType_Index = MyBase.Columns("VehicleType_Index")
            Me.columnWeight_Vehicle = MyBase.Columns("Weight_Vehicle")
            Me.columnpallet_Vehicle = MyBase.Columns("pallet_Vehicle")
            Me.columnVolume_Vehicle = MyBase.Columns("Volume_Vehicle")
            Me.columnVehicle_Date = MyBase.Columns("Vehicle_Date")
            Me.columnVehicle_color = MyBase.Columns("Vehicle_color")
            Me.columnVehicle_Brand = MyBase.Columns("Vehicle_Brand")
            Me.columnVehicle_Model = MyBase.Columns("Vehicle_Model")
            Me.columnVehicle_year = MyBase.Columns("Vehicle_year")
            Me.columnRef_No1 = MyBase.Columns("Ref_No1")
            Me.columnStr1 = MyBase.Columns("Str1")
            Me.columnStr2 = MyBase.Columns("Str2")
            Me.columnStr3 = MyBase.Columns("Str3")
            Me.columnStr4 = MyBase.Columns("Str4")
            Me.columnStr5 = MyBase.Columns("Str5")
            Me.columncomment = MyBase.Columns("comment")
            Me.columnadd_by = MyBase.Columns("add_by")
            Me.columnadd_date = MyBase.Columns("add_date")
            Me.columnadd_branch = MyBase.Columns("add_branch")
            Me.columnupdate_by = MyBase.Columns("update_by")
            Me.columnupdate_date = MyBase.Columns("update_date")
            Me.columnupdate_branch = MyBase.Columns("update_branch")
            Me.columnstatus_id = MyBase.Columns("status_id")
            Me.columnVehicleType = MyBase.Columns("VehicleType")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnVehicle_Index = New Global.System.Data.DataColumn("Vehicle_Index", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVehicle_Index)
            Me.columnVehicle_Id = New Global.System.Data.DataColumn("Vehicle_Id", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVehicle_Id)
            Me.columnVehicle_No = New Global.System.Data.DataColumn("Vehicle_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVehicle_No)
            Me.columnEmployee_Index = New Global.System.Data.DataColumn("Employee_Index", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmployee_Index)
            Me.columnVehicleType_Index = New Global.System.Data.DataColumn("VehicleType_Index", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVehicleType_Index)
            Me.columnWeight_Vehicle = New Global.System.Data.DataColumn("Weight_Vehicle", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWeight_Vehicle)
            Me.columnpallet_Vehicle = New Global.System.Data.DataColumn("pallet_Vehicle", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpallet_Vehicle)
            Me.columnVolume_Vehicle = New Global.System.Data.DataColumn("Volume_Vehicle", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVolume_Vehicle)
            Me.columnVehicle_Date = New Global.System.Data.DataColumn("Vehicle_Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVehicle_Date)
            Me.columnVehicle_color = New Global.System.Data.DataColumn("Vehicle_color", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVehicle_color)
            Me.columnVehicle_Brand = New Global.System.Data.DataColumn("Vehicle_Brand", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVehicle_Brand)
            Me.columnVehicle_Model = New Global.System.Data.DataColumn("Vehicle_Model", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVehicle_Model)
            Me.columnVehicle_year = New Global.System.Data.DataColumn("Vehicle_year", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVehicle_year)
            Me.columnRef_No1 = New Global.System.Data.DataColumn("Ref_No1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRef_No1)
            Me.columnStr1 = New Global.System.Data.DataColumn("Str1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStr1)
            Me.columnStr2 = New Global.System.Data.DataColumn("Str2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStr2)
            Me.columnStr3 = New Global.System.Data.DataColumn("Str3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStr3)
            Me.columnStr4 = New Global.System.Data.DataColumn("Str4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStr4)
            Me.columnStr5 = New Global.System.Data.DataColumn("Str5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStr5)
            Me.columncomment = New Global.System.Data.DataColumn("comment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncomment)
            Me.columnadd_by = New Global.System.Data.DataColumn("add_by", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnadd_by)
            Me.columnadd_date = New Global.System.Data.DataColumn("add_date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnadd_date)
            Me.columnadd_branch = New Global.System.Data.DataColumn("add_branch", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnadd_branch)
            Me.columnupdate_by = New Global.System.Data.DataColumn("update_by", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnupdate_by)
            Me.columnupdate_date = New Global.System.Data.DataColumn("update_date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnupdate_date)
            Me.columnupdate_branch = New Global.System.Data.DataColumn("update_branch", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnupdate_branch)
            Me.columnstatus_id = New Global.System.Data.DataColumn("status_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstatus_id)
            Me.columnVehicleType = New Global.System.Data.DataColumn("VehicleType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVehicleType)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnVehicle_Index}, true))
            Me.columnVehicle_Index.AllowDBNull = false
            Me.columnVehicle_Index.Unique = true
            Me.columnVehicle_Index.MaxLength = 13
            Me.columnVehicle_Id.AllowDBNull = false
            Me.columnVehicle_Id.MaxLength = 13
            Me.columnVehicle_No.AllowDBNull = false
            Me.columnVehicle_No.MaxLength = 13
            Me.columnEmployee_Index.MaxLength = 13
            Me.columnVehicleType_Index.MaxLength = 13
            Me.columnVehicle_color.MaxLength = 50
            Me.columnVehicle_Brand.MaxLength = 50
            Me.columnVehicle_Model.MaxLength = 50
            Me.columnRef_No1.MaxLength = 50
            Me.columnStr1.MaxLength = 100
            Me.columnStr2.MaxLength = 100
            Me.columnStr3.MaxLength = 100
            Me.columnStr4.MaxLength = 100
            Me.columnStr5.MaxLength = 100
            Me.columncomment.MaxLength = 100
            Me.columnadd_by.MaxLength = 50
            Me.columnupdate_by.MaxLength = 50
            Me.columnVehicleType.AllowDBNull = false
            Me.columnVehicleType.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVIEW_Master_VehicleRow() As VIEW_Master_VehicleRow
            Return CType(Me.NewRow,VIEW_Master_VehicleRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VIEW_Master_VehicleRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VIEW_Master_VehicleRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_Master_VehicleRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_Master_VehicleRowChanged(Me, New VIEW_Master_VehicleRowChangeEvent(CType(e.Row,VIEW_Master_VehicleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_Master_VehicleRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_Master_VehicleRowChanging(Me, New VIEW_Master_VehicleRowChangeEvent(CType(e.Row,VIEW_Master_VehicleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_Master_VehicleRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_Master_VehicleRowDeleted(Me, New VIEW_Master_VehicleRowChangeEvent(CType(e.Row,VIEW_Master_VehicleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_Master_VehicleRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_Master_VehicleRowDeleting(Me, New VIEW_Master_VehicleRowChangeEvent(CType(e.Row,VIEW_Master_VehicleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVIEW_Master_VehicleRow(ByVal row As VIEW_Master_VehicleRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsVehicle = New dsVehicle
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VIEW_Master_VehicleDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VIEW_Master_VehicleRow
        Inherits Global.System.Data.DataRow
        
        Private tableVIEW_Master_Vehicle As VIEW_Master_VehicleDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_Master_Vehicle = CType(Me.Table,VIEW_Master_VehicleDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Vehicle_Index() As String
            Get
                Return CType(Me(Me.tableVIEW_Master_Vehicle.Vehicle_IndexColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_Master_Vehicle.Vehicle_IndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Vehicle_Id() As String
            Get
                Return CType(Me(Me.tableVIEW_Master_Vehicle.Vehicle_IdColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_Master_Vehicle.Vehicle_IdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Vehicle_No() As String
            Get
                Return CType(Me(Me.tableVIEW_Master_Vehicle.Vehicle_NoColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_Master_Vehicle.Vehicle_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Employee_Index() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_Master_Vehicle.Employee_IndexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Employee_Index' in table 'VIEW_Master_Vehicle' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_Master_Vehicle.Employee_IndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VehicleType_Index() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_Master_Vehicle.VehicleType_IndexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VehicleType_Index' in table 'VIEW_Master_Vehicle' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_Master_Vehicle.VehicleType_IndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Weight_Vehicle() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_Master_Vehicle.Weight_VehicleColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Weight_Vehicle' in table 'VIEW_Master_Vehicle' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_Master_Vehicle.Weight_VehicleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pallet_Vehicle() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_Master_Vehicle.pallet_VehicleColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'pallet_Vehicle' in table 'VIEW_Master_Vehicle' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_Master_Vehicle.pallet_VehicleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Volume_Vehicle() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_Master_Vehicle.Volume_VehicleColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Volume_Vehicle' in table 'VIEW_Master_Vehicle' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_Master_Vehicle.Volume_VehicleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Vehicle_Date() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_Master_Vehicle.Vehicle_DateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Vehicle_Date' in table 'VIEW_Master_Vehicle' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_Master_Vehicle.Vehicle_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Vehicle_color() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_Master_Vehicle.Vehicle_colorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Vehicle_color' in table 'VIEW_Master_Vehicle' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_Master_Vehicle.Vehicle_colorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Vehicle_Brand() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_Master_Vehicle.Vehicle_BrandColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Vehicle_Brand' in table 'VIEW_Master_Vehicle' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_Master_Vehicle.Vehicle_BrandColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Vehicle_Model() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_Master_Vehicle.Vehicle_ModelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Vehicle_Model' in table 'VIEW_Master_Vehicle' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_Master_Vehicle.Vehicle_ModelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Vehicle_year() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_Master_Vehicle.Vehicle_yearColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Vehicle_year' in table 'VIEW_Master_Vehicle' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_Master_Vehicle.Vehicle_yearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ref_No1() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_Master_Vehicle.Ref_No1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ref_No1' in table 'VIEW_Master_Vehicle' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_Master_Vehicle.Ref_No1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Str1() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_Master_Vehicle.Str1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Str1' in table 'VIEW_Master_Vehicle' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_Master_Vehicle.Str1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Str2() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_Master_Vehicle.Str2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Str2' in table 'VIEW_Master_Vehicle' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_Master_Vehicle.Str2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Str3() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_Master_Vehicle.Str3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Str3' in table 'VIEW_Master_Vehicle' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_Master_Vehicle.Str3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Str4() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_Master_Vehicle.Str4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Str4' in table 'VIEW_Master_Vehicle' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_Master_Vehicle.Str4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Str5() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_Master_Vehicle.Str5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Str5' in table 'VIEW_Master_Vehicle' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_Master_Vehicle.Str5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property comment() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_Master_Vehicle.commentColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'comment' in table 'VIEW_Master_Vehicle' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_Master_Vehicle.commentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property add_by() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_Master_Vehicle.add_byColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'add_by' in table 'VIEW_Master_Vehicle' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_Master_Vehicle.add_byColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property add_date() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_Master_Vehicle.add_dateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'add_date' in table 'VIEW_Master_Vehicle' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_Master_Vehicle.add_dateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property add_branch() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_Master_Vehicle.add_branchColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'add_branch' in table 'VIEW_Master_Vehicle' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_Master_Vehicle.add_branchColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property update_by() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_Master_Vehicle.update_byColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'update_by' in table 'VIEW_Master_Vehicle' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_Master_Vehicle.update_byColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property update_date() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_Master_Vehicle.update_dateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'update_date' in table 'VIEW_Master_Vehicle' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_Master_Vehicle.update_dateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property update_branch() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_Master_Vehicle.update_branchColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'update_branch' in table 'VIEW_Master_Vehicle' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_Master_Vehicle.update_branchColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property status_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_Master_Vehicle.status_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'status_id' in table 'VIEW_Master_Vehicle' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_Master_Vehicle.status_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VehicleType() As String
            Get
                Return CType(Me(Me.tableVIEW_Master_Vehicle.VehicleTypeColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_Master_Vehicle.VehicleTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmployee_IndexNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_Master_Vehicle.Employee_IndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmployee_IndexNull()
            Me(Me.tableVIEW_Master_Vehicle.Employee_IndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVehicleType_IndexNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_Master_Vehicle.VehicleType_IndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVehicleType_IndexNull()
            Me(Me.tableVIEW_Master_Vehicle.VehicleType_IndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWeight_VehicleNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_Master_Vehicle.Weight_VehicleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWeight_VehicleNull()
            Me(Me.tableVIEW_Master_Vehicle.Weight_VehicleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ispallet_VehicleNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_Master_Vehicle.pallet_VehicleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setpallet_VehicleNull()
            Me(Me.tableVIEW_Master_Vehicle.pallet_VehicleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVolume_VehicleNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_Master_Vehicle.Volume_VehicleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVolume_VehicleNull()
            Me(Me.tableVIEW_Master_Vehicle.Volume_VehicleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVehicle_DateNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_Master_Vehicle.Vehicle_DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVehicle_DateNull()
            Me(Me.tableVIEW_Master_Vehicle.Vehicle_DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVehicle_colorNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_Master_Vehicle.Vehicle_colorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVehicle_colorNull()
            Me(Me.tableVIEW_Master_Vehicle.Vehicle_colorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVehicle_BrandNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_Master_Vehicle.Vehicle_BrandColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVehicle_BrandNull()
            Me(Me.tableVIEW_Master_Vehicle.Vehicle_BrandColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVehicle_ModelNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_Master_Vehicle.Vehicle_ModelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVehicle_ModelNull()
            Me(Me.tableVIEW_Master_Vehicle.Vehicle_ModelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVehicle_yearNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_Master_Vehicle.Vehicle_yearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVehicle_yearNull()
            Me(Me.tableVIEW_Master_Vehicle.Vehicle_yearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRef_No1Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_Master_Vehicle.Ref_No1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRef_No1Null()
            Me(Me.tableVIEW_Master_Vehicle.Ref_No1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStr1Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_Master_Vehicle.Str1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStr1Null()
            Me(Me.tableVIEW_Master_Vehicle.Str1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStr2Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_Master_Vehicle.Str2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStr2Null()
            Me(Me.tableVIEW_Master_Vehicle.Str2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStr3Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_Master_Vehicle.Str3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStr3Null()
            Me(Me.tableVIEW_Master_Vehicle.Str3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStr4Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_Master_Vehicle.Str4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStr4Null()
            Me(Me.tableVIEW_Master_Vehicle.Str4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStr5Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_Master_Vehicle.Str5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStr5Null()
            Me(Me.tableVIEW_Master_Vehicle.Str5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscommentNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_Master_Vehicle.commentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcommentNull()
            Me(Me.tableVIEW_Master_Vehicle.commentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isadd_byNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_Master_Vehicle.add_byColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setadd_byNull()
            Me(Me.tableVIEW_Master_Vehicle.add_byColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isadd_dateNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_Master_Vehicle.add_dateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setadd_dateNull()
            Me(Me.tableVIEW_Master_Vehicle.add_dateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isadd_branchNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_Master_Vehicle.add_branchColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setadd_branchNull()
            Me(Me.tableVIEW_Master_Vehicle.add_branchColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isupdate_byNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_Master_Vehicle.update_byColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setupdate_byNull()
            Me(Me.tableVIEW_Master_Vehicle.update_byColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isupdate_dateNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_Master_Vehicle.update_dateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setupdate_dateNull()
            Me(Me.tableVIEW_Master_Vehicle.update_dateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isupdate_branchNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_Master_Vehicle.update_branchColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setupdate_branchNull()
            Me(Me.tableVIEW_Master_Vehicle.update_branchColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isstatus_idNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_Master_Vehicle.status_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setstatus_idNull()
            Me(Me.tableVIEW_Master_Vehicle.status_idColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VIEW_Master_VehicleRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VIEW_Master_VehicleRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VIEW_Master_VehicleRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VIEW_Master_VehicleRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
