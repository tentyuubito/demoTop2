'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.8937
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsYearlyInOut"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsYearlyInOut
    Inherits Global.System.Data.DataSet
    
    Private tableVIEW_YearlyInOut As VIEW_YearlyInOutDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("VIEW_YearlyInOut")) Is Nothing) Then
                MyBase.Tables.Add(New VIEW_YearlyInOutDataTable(ds.Tables("VIEW_YearlyInOut")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_YearlyInOut() As VIEW_YearlyInOutDataTable
        Get
            Return Me.tableVIEW_YearlyInOut
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsYearlyInOut = CType(MyBase.Clone,dsYearlyInOut)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("VIEW_YearlyInOut")) Is Nothing) Then
                MyBase.Tables.Add(New VIEW_YearlyInOutDataTable(ds.Tables("VIEW_YearlyInOut")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableVIEW_YearlyInOut = CType(MyBase.Tables("VIEW_YearlyInOut"),VIEW_YearlyInOutDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVIEW_YearlyInOut) Is Nothing) Then
                Me.tableVIEW_YearlyInOut.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsYearlyInOut"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsYearlyInOut.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableVIEW_YearlyInOut = New VIEW_YearlyInOutDataTable
        MyBase.Tables.Add(Me.tableVIEW_YearlyInOut)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVIEW_YearlyInOut() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsYearlyInOut = New dsYearlyInOut
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub VIEW_YearlyInOutRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_YearlyInOutRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VIEW_YearlyInOutDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCustomer_Index As Global.System.Data.DataColumn
        
        Private columnSku_Index As Global.System.Data.DataColumn
        
        Private columnSelectYear As Global.System.Data.DataColumn
        
        Private columnSelectMonth As Global.System.Data.DataColumn
        
        Private columnMon As Global.System.Data.DataColumn
        
        Private columnsum_Qty_In As Global.System.Data.DataColumn
        
        Private columnsum_Weight_In As Global.System.Data.DataColumn
        
        Private columnsum_Volume_In As Global.System.Data.DataColumn
        
        Private columnsum_Qty_Out As Global.System.Data.DataColumn
        
        Private columnsum_Weight_Out As Global.System.Data.DataColumn
        
        Private columnsum_Volume_Out As Global.System.Data.DataColumn
        
        Private columnsum_Qty_Sku_Bal As Global.System.Data.DataColumn
        
        Private columnsum_Weight_Sku_Bal As Global.System.Data.DataColumn
        
        Private columnsum_Volume_Sku_Bal As Global.System.Data.DataColumn
        
        Private columntemp_ID As Global.System.Data.DataColumn
        
        Private columnTemp_Description As Global.System.Data.DataColumn
        
        Private columntempID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VIEW_YearlyInOut"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Customer_IndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomer_Index
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Sku_IndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSku_Index
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SelectYearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSelectYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SelectMonthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSelectMonth
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMon
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sum_Qty_InColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsum_Qty_In
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sum_Weight_InColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsum_Weight_In
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sum_Volume_InColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsum_Volume_In
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sum_Qty_OutColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsum_Qty_Out
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sum_Weight_OutColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsum_Weight_Out
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sum_Volume_OutColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsum_Volume_Out
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sum_Qty_Sku_BalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsum_Qty_Sku_Bal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sum_Weight_Sku_BalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsum_Weight_Sku_Bal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sum_Volume_Sku_BalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsum_Volume_Sku_Bal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property temp_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntemp_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Temp_DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTemp_Description
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tempIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntempID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_YearlyInOutRow
            Get
                Return CType(Me.Rows(index),VIEW_YearlyInOutRow)
            End Get
        End Property
        
        Public Event VIEW_YearlyInOutRowChanging As VIEW_YearlyInOutRowChangeEventHandler
        
        Public Event VIEW_YearlyInOutRowChanged As VIEW_YearlyInOutRowChangeEventHandler
        
        Public Event VIEW_YearlyInOutRowDeleting As VIEW_YearlyInOutRowChangeEventHandler
        
        Public Event VIEW_YearlyInOutRowDeleted As VIEW_YearlyInOutRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVIEW_YearlyInOutRow(ByVal row As VIEW_YearlyInOutRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVIEW_YearlyInOutRow( _
                    ByVal Customer_Index As String,  _
                    ByVal Sku_Index As String,  _
                    ByVal SelectYear As Integer,  _
                    ByVal SelectMonth As Integer,  _
                    ByVal Mon As String,  _
                    ByVal sum_Qty_In As Double,  _
                    ByVal sum_Weight_In As Double,  _
                    ByVal sum_Volume_In As Double,  _
                    ByVal sum_Qty_Out As Double,  _
                    ByVal sum_Weight_Out As Double,  _
                    ByVal sum_Volume_Out As Double,  _
                    ByVal sum_Qty_Sku_Bal As Double,  _
                    ByVal sum_Weight_Sku_Bal As Double,  _
                    ByVal sum_Volume_Sku_Bal As Double,  _
                    ByVal temp_ID As String,  _
                    ByVal Temp_Description As String,  _
                    ByVal tempID As Integer) As VIEW_YearlyInOutRow
            Dim rowVIEW_YearlyInOutRow As VIEW_YearlyInOutRow = CType(Me.NewRow,VIEW_YearlyInOutRow)
            Dim columnValuesArray() As Object = New Object() {Customer_Index, Sku_Index, SelectYear, SelectMonth, Mon, sum_Qty_In, sum_Weight_In, sum_Volume_In, sum_Qty_Out, sum_Weight_Out, sum_Volume_Out, sum_Qty_Sku_Bal, sum_Weight_Sku_Bal, sum_Volume_Sku_Bal, temp_ID, Temp_Description, tempID}
            rowVIEW_YearlyInOutRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVIEW_YearlyInOutRow)
            Return rowVIEW_YearlyInOutRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VIEW_YearlyInOutDataTable = CType(MyBase.Clone,VIEW_YearlyInOutDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VIEW_YearlyInOutDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCustomer_Index = MyBase.Columns("Customer_Index")
            Me.columnSku_Index = MyBase.Columns("Sku_Index")
            Me.columnSelectYear = MyBase.Columns("SelectYear")
            Me.columnSelectMonth = MyBase.Columns("SelectMonth")
            Me.columnMon = MyBase.Columns("Mon")
            Me.columnsum_Qty_In = MyBase.Columns("sum_Qty_In")
            Me.columnsum_Weight_In = MyBase.Columns("sum_Weight_In")
            Me.columnsum_Volume_In = MyBase.Columns("sum_Volume_In")
            Me.columnsum_Qty_Out = MyBase.Columns("sum_Qty_Out")
            Me.columnsum_Weight_Out = MyBase.Columns("sum_Weight_Out")
            Me.columnsum_Volume_Out = MyBase.Columns("sum_Volume_Out")
            Me.columnsum_Qty_Sku_Bal = MyBase.Columns("sum_Qty_Sku_Bal")
            Me.columnsum_Weight_Sku_Bal = MyBase.Columns("sum_Weight_Sku_Bal")
            Me.columnsum_Volume_Sku_Bal = MyBase.Columns("sum_Volume_Sku_Bal")
            Me.columntemp_ID = MyBase.Columns("temp_ID")
            Me.columnTemp_Description = MyBase.Columns("Temp_Description")
            Me.columntempID = MyBase.Columns("tempID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCustomer_Index = New Global.System.Data.DataColumn("Customer_Index", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomer_Index)
            Me.columnSku_Index = New Global.System.Data.DataColumn("Sku_Index", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSku_Index)
            Me.columnSelectYear = New Global.System.Data.DataColumn("SelectYear", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSelectYear)
            Me.columnSelectMonth = New Global.System.Data.DataColumn("SelectMonth", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSelectMonth)
            Me.columnMon = New Global.System.Data.DataColumn("Mon", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMon)
            Me.columnsum_Qty_In = New Global.System.Data.DataColumn("sum_Qty_In", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsum_Qty_In)
            Me.columnsum_Weight_In = New Global.System.Data.DataColumn("sum_Weight_In", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsum_Weight_In)
            Me.columnsum_Volume_In = New Global.System.Data.DataColumn("sum_Volume_In", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsum_Volume_In)
            Me.columnsum_Qty_Out = New Global.System.Data.DataColumn("sum_Qty_Out", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsum_Qty_Out)
            Me.columnsum_Weight_Out = New Global.System.Data.DataColumn("sum_Weight_Out", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsum_Weight_Out)
            Me.columnsum_Volume_Out = New Global.System.Data.DataColumn("sum_Volume_Out", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsum_Volume_Out)
            Me.columnsum_Qty_Sku_Bal = New Global.System.Data.DataColumn("sum_Qty_Sku_Bal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsum_Qty_Sku_Bal)
            Me.columnsum_Weight_Sku_Bal = New Global.System.Data.DataColumn("sum_Weight_Sku_Bal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsum_Weight_Sku_Bal)
            Me.columnsum_Volume_Sku_Bal = New Global.System.Data.DataColumn("sum_Volume_Sku_Bal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsum_Volume_Sku_Bal)
            Me.columntemp_ID = New Global.System.Data.DataColumn("temp_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntemp_ID)
            Me.columnTemp_Description = New Global.System.Data.DataColumn("Temp_Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTemp_Description)
            Me.columntempID = New Global.System.Data.DataColumn("tempID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntempID)
            Me.columnCustomer_Index.AllowDBNull = false
            Me.columnCustomer_Index.MaxLength = 13
            Me.columnSku_Index.AllowDBNull = false
            Me.columnSku_Index.MaxLength = 13
            Me.columnMon.MaxLength = 3
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVIEW_YearlyInOutRow() As VIEW_YearlyInOutRow
            Return CType(Me.NewRow,VIEW_YearlyInOutRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VIEW_YearlyInOutRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VIEW_YearlyInOutRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_YearlyInOutRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_YearlyInOutRowChanged(Me, New VIEW_YearlyInOutRowChangeEvent(CType(e.Row,VIEW_YearlyInOutRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_YearlyInOutRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_YearlyInOutRowChanging(Me, New VIEW_YearlyInOutRowChangeEvent(CType(e.Row,VIEW_YearlyInOutRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_YearlyInOutRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_YearlyInOutRowDeleted(Me, New VIEW_YearlyInOutRowChangeEvent(CType(e.Row,VIEW_YearlyInOutRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_YearlyInOutRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_YearlyInOutRowDeleting(Me, New VIEW_YearlyInOutRowChangeEvent(CType(e.Row,VIEW_YearlyInOutRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVIEW_YearlyInOutRow(ByVal row As VIEW_YearlyInOutRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsYearlyInOut = New dsYearlyInOut
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VIEW_YearlyInOutDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VIEW_YearlyInOutRow
        Inherits Global.System.Data.DataRow
        
        Private tableVIEW_YearlyInOut As VIEW_YearlyInOutDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_YearlyInOut = CType(Me.Table,VIEW_YearlyInOutDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Customer_Index() As String
            Get
                Return CType(Me(Me.tableVIEW_YearlyInOut.Customer_IndexColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_YearlyInOut.Customer_IndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sku_Index() As String
            Get
                Return CType(Me(Me.tableVIEW_YearlyInOut.Sku_IndexColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_YearlyInOut.Sku_IndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SelectYear() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_YearlyInOut.SelectYearColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SelectYear' in table 'VIEW_YearlyInOut' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_YearlyInOut.SelectYearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SelectMonth() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_YearlyInOut.SelectMonthColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SelectMonth' in table 'VIEW_YearlyInOut' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_YearlyInOut.SelectMonthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Mon() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_YearlyInOut.MonColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Mon' in table 'VIEW_YearlyInOut' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_YearlyInOut.MonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sum_Qty_In() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_YearlyInOut.sum_Qty_InColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sum_Qty_In' in table 'VIEW_YearlyInOut' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_YearlyInOut.sum_Qty_InColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sum_Weight_In() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_YearlyInOut.sum_Weight_InColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sum_Weight_In' in table 'VIEW_YearlyInOut' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_YearlyInOut.sum_Weight_InColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sum_Volume_In() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_YearlyInOut.sum_Volume_InColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sum_Volume_In' in table 'VIEW_YearlyInOut' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_YearlyInOut.sum_Volume_InColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sum_Qty_Out() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_YearlyInOut.sum_Qty_OutColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sum_Qty_Out' in table 'VIEW_YearlyInOut' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_YearlyInOut.sum_Qty_OutColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sum_Weight_Out() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_YearlyInOut.sum_Weight_OutColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sum_Weight_Out' in table 'VIEW_YearlyInOut' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_YearlyInOut.sum_Weight_OutColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sum_Volume_Out() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_YearlyInOut.sum_Volume_OutColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sum_Volume_Out' in table 'VIEW_YearlyInOut' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_YearlyInOut.sum_Volume_OutColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sum_Qty_Sku_Bal() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_YearlyInOut.sum_Qty_Sku_BalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sum_Qty_Sku_Bal' in table 'VIEW_YearlyInOut' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_YearlyInOut.sum_Qty_Sku_BalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sum_Weight_Sku_Bal() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_YearlyInOut.sum_Weight_Sku_BalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sum_Weight_Sku_Bal' in table 'VIEW_YearlyInOut' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_YearlyInOut.sum_Weight_Sku_BalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sum_Volume_Sku_Bal() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_YearlyInOut.sum_Volume_Sku_BalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sum_Volume_Sku_Bal' in table 'VIEW_YearlyInOut' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_YearlyInOut.sum_Volume_Sku_BalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property temp_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_YearlyInOut.temp_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'temp_ID' in table 'VIEW_YearlyInOut' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_YearlyInOut.temp_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Temp_Description() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_YearlyInOut.Temp_DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Temp_Description' in table 'VIEW_YearlyInOut' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_YearlyInOut.Temp_DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tempID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_YearlyInOut.tempIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tempID' in table 'VIEW_YearlyInOut' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_YearlyInOut.tempIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSelectYearNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_YearlyInOut.SelectYearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSelectYearNull()
            Me(Me.tableVIEW_YearlyInOut.SelectYearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSelectMonthNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_YearlyInOut.SelectMonthColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSelectMonthNull()
            Me(Me.tableVIEW_YearlyInOut.SelectMonthColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMonNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_YearlyInOut.MonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMonNull()
            Me(Me.tableVIEW_YearlyInOut.MonColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issum_Qty_InNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_YearlyInOut.sum_Qty_InColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsum_Qty_InNull()
            Me(Me.tableVIEW_YearlyInOut.sum_Qty_InColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issum_Weight_InNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_YearlyInOut.sum_Weight_InColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsum_Weight_InNull()
            Me(Me.tableVIEW_YearlyInOut.sum_Weight_InColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issum_Volume_InNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_YearlyInOut.sum_Volume_InColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsum_Volume_InNull()
            Me(Me.tableVIEW_YearlyInOut.sum_Volume_InColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issum_Qty_OutNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_YearlyInOut.sum_Qty_OutColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsum_Qty_OutNull()
            Me(Me.tableVIEW_YearlyInOut.sum_Qty_OutColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issum_Weight_OutNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_YearlyInOut.sum_Weight_OutColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsum_Weight_OutNull()
            Me(Me.tableVIEW_YearlyInOut.sum_Weight_OutColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issum_Volume_OutNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_YearlyInOut.sum_Volume_OutColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsum_Volume_OutNull()
            Me(Me.tableVIEW_YearlyInOut.sum_Volume_OutColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issum_Qty_Sku_BalNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_YearlyInOut.sum_Qty_Sku_BalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsum_Qty_Sku_BalNull()
            Me(Me.tableVIEW_YearlyInOut.sum_Qty_Sku_BalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issum_Weight_Sku_BalNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_YearlyInOut.sum_Weight_Sku_BalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsum_Weight_Sku_BalNull()
            Me(Me.tableVIEW_YearlyInOut.sum_Weight_Sku_BalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issum_Volume_Sku_BalNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_YearlyInOut.sum_Volume_Sku_BalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsum_Volume_Sku_BalNull()
            Me(Me.tableVIEW_YearlyInOut.sum_Volume_Sku_BalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Istemp_IDNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_YearlyInOut.temp_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Settemp_IDNull()
            Me(Me.tableVIEW_YearlyInOut.temp_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTemp_DescriptionNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_YearlyInOut.Temp_DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTemp_DescriptionNull()
            Me(Me.tableVIEW_YearlyInOut.Temp_DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstempIDNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_YearlyInOut.tempIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettempIDNull()
            Me(Me.tableVIEW_YearlyInOut.tempIDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VIEW_YearlyInOutRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VIEW_YearlyInOutRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VIEW_YearlyInOutRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VIEW_YearlyInOutRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
