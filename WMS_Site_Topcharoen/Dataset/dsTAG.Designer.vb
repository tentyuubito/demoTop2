'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.8937
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsTag"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsTag
    Inherits Global.System.Data.DataSet
    
    Private tableVIEW_TAG As VIEW_TAGDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("VIEW_TAG")) Is Nothing) Then
                MyBase.Tables.Add(New VIEW_TAGDataTable(ds.Tables("VIEW_TAG")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_TAG() As VIEW_TAGDataTable
        Get
            Return Me.tableVIEW_TAG
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsTag = CType(MyBase.Clone,dsTag)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("VIEW_TAG")) Is Nothing) Then
                MyBase.Tables.Add(New VIEW_TAGDataTable(ds.Tables("VIEW_TAG")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableVIEW_TAG = CType(MyBase.Tables("VIEW_TAG"),VIEW_TAGDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVIEW_TAG) Is Nothing) Then
                Me.tableVIEW_TAG.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsTag"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsTag.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableVIEW_TAG = New VIEW_TAGDataTable
        MyBase.Tables.Add(Me.tableVIEW_TAG)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVIEW_TAG() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsTag = New dsTag
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub VIEW_TAGRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_TAGRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VIEW_TAGDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnOrder_No As Global.System.Data.DataColumn
        
        Private columnOrder_Date As Global.System.Data.DataColumn
        
        Private columnOrder_Time As Global.System.Data.DataColumn
        
        Private columnOrderItem_Index As Global.System.Data.DataColumn
        
        Private columnCustomer_index As Global.System.Data.DataColumn
        
        Private columnCustomer_ID As Global.System.Data.DataColumn
        
        Private columnTitle As Global.System.Data.DataColumn
        
        Private columnCustomer_Name As Global.System.Data.DataColumn
        
        Private columnSupplier_Index As Global.System.Data.DataColumn
        
        Private columnSupplier_Name As Global.System.Data.DataColumn
        
        Private columnSupplier_Title As Global.System.Data.DataColumn
        
        Private columnItemStatus_Index As Global.System.Data.DataColumn
        
        Private columnUnit_Description As Global.System.Data.DataColumn
        
        Private columnUnit_Weight As Global.System.Data.DataColumn
        
        Private columnSize_Index As Global.System.Data.DataColumn
        
        Private columnPallet_No As Global.System.Data.DataColumn
        
        Private columnQty As Global.System.Data.DataColumn
        
        Private columnWeight As Global.System.Data.DataColumn
        
        Private columnVolume As Global.System.Data.DataColumn
        
        Private columnQty_per_TAG As Global.System.Data.DataColumn
        
        Private columnWeight_per_TAG As Global.System.Data.DataColumn
        
        Private columnVolume_per_TAG As Global.System.Data.DataColumn
        
        Private columnTAG_Status As Global.System.Data.DataColumn
        
        Private columnRef_No1 As Global.System.Data.DataColumn
        
        Private columnRef_No2 As Global.System.Data.DataColumn
        
        Private columnOrderItemLocation_Index As Global.System.Data.DataColumn
        
        Private columnSku_Index As Global.System.Data.DataColumn
        
        Private columnPlot As Global.System.Data.DataColumn
        
        Private columnStr1 As Global.System.Data.DataColumn
        
        Private columnStr2 As Global.System.Data.DataColumn
        
        Private columnSku_ID As Global.System.Data.DataColumn
        
        Private columnSupplier_ID As Global.System.Data.DataColumn
        
        Private columnSize_Description As Global.System.Data.DataColumn
        
        Private columnBarcode As Global.System.Data.DataColumn
        
        Private columnTAG_NO As Global.System.Data.DataColumn
        
        Private columnTag_No1 As Global.System.Data.DataColumn
        
        Private columnTag_Barcode1 As Global.System.Data.DataColumn
        
        Private columnTag_No2 As Global.System.Data.DataColumn
        
        Private columnTag_Barcode2 As Global.System.Data.DataColumn
        
        Private columnPackage_No As Global.System.Data.DataColumn
        
        Private columnPackage_Barcode As Global.System.Data.DataColumn
        
        Private columnstrMfg_Date As Global.System.Data.DataColumn
        
        Private columnstrExp_Date As Global.System.Data.DataColumn
        
        Private columnUnit As Global.System.Data.DataColumn
        
        Private columnRatio As Global.System.Data.DataColumn
        
        Private columnUnitSku As Global.System.Data.DataColumn
        
        Private columnTotal_Qty_per_Tag As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VIEW_TAG"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Order_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrder_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Order_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrder_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Order_TimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrder_Time
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrderItem_IndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrderItem_Index
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Customer_indexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomer_index
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Customer_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomer_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TitleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTitle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Customer_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomer_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Supplier_IndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupplier_Index
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Supplier_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupplier_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Supplier_TitleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupplier_Title
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemStatus_IndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemStatus_Index
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Unit_DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnit_Description
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Unit_WeightColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnit_Weight
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Size_IndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSize_Index
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pallet_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPallet_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WeightColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWeight
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VolumeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVolume
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Qty_per_TAGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQty_per_TAG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Weight_per_TAGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWeight_per_TAG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Volume_per_TAGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVolume_per_TAG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TAG_StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTAG_Status
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Ref_No1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRef_No1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Ref_No2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRef_No2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrderItemLocation_IndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrderItemLocation_Index
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Sku_IndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSku_Index
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Str1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnStr1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Str2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnStr2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Sku_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSku_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Supplier_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupplier_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Size_DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSize_Description
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BarcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBarcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TAG_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTAG_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Tag_No1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTag_No1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Tag_Barcode1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTag_Barcode1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Tag_No2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTag_No2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Tag_Barcode2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTag_Barcode2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Package_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPackage_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Package_BarcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPackage_Barcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property strMfg_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstrMfg_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property strExp_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstrExp_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RatioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRatio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnitSkuColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnitSku
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Total_Qty_per_TagColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotal_Qty_per_Tag
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_TAGRow
            Get
                Return CType(Me.Rows(index),VIEW_TAGRow)
            End Get
        End Property
        
        Public Event VIEW_TAGRowChanging As VIEW_TAGRowChangeEventHandler
        
        Public Event VIEW_TAGRowChanged As VIEW_TAGRowChangeEventHandler
        
        Public Event VIEW_TAGRowDeleting As VIEW_TAGRowChangeEventHandler
        
        Public Event VIEW_TAGRowDeleted As VIEW_TAGRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVIEW_TAGRow(ByVal row As VIEW_TAGRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVIEW_TAGRow( _
                    ByVal Order_No As String,  _
                    ByVal Order_Date As Date,  _
                    ByVal Order_Time As String,  _
                    ByVal OrderItem_Index As String,  _
                    ByVal Customer_index As String,  _
                    ByVal Customer_ID As String,  _
                    ByVal Title As String,  _
                    ByVal Customer_Name As String,  _
                    ByVal Supplier_Index As String,  _
                    ByVal Supplier_Name As String,  _
                    ByVal Supplier_Title As String,  _
                    ByVal ItemStatus_Index As String,  _
                    ByVal Unit_Description As String,  _
                    ByVal Unit_Weight As Decimal,  _
                    ByVal Size_Index As String,  _
                    ByVal Pallet_No As String,  _
                    ByVal Qty As Decimal,  _
                    ByVal Weight As Decimal,  _
                    ByVal Volume As Decimal,  _
                    ByVal Qty_per_TAG As Decimal,  _
                    ByVal Weight_per_TAG As Decimal,  _
                    ByVal Volume_per_TAG As Decimal,  _
                    ByVal TAG_Status As String,  _
                    ByVal Ref_No1 As String,  _
                    ByVal Ref_No2 As String,  _
                    ByVal OrderItemLocation_Index As String,  _
                    ByVal Sku_Index As String,  _
                    ByVal Plot As String,  _
                    ByVal Str1 As String,  _
                    ByVal Str2 As String,  _
                    ByVal Sku_ID As String,  _
                    ByVal Supplier_ID As String,  _
                    ByVal Size_Description As String,  _
                    ByVal Barcode() As Byte,  _
                    ByVal TAG_NO As String,  _
                    ByVal Tag_No1 As String,  _
                    ByVal Tag_Barcode1() As Byte,  _
                    ByVal Tag_No2 As String,  _
                    ByVal Tag_Barcode2() As Byte,  _
                    ByVal Package_No As String,  _
                    ByVal Package_Barcode() As Byte,  _
                    ByVal strMfg_Date As String,  _
                    ByVal strExp_Date As String,  _
                    ByVal Unit As String,  _
                    ByVal Ratio As Decimal,  _
                    ByVal UnitSku As String,  _
                    ByVal Total_Qty_per_Tag As Decimal) As VIEW_TAGRow
            Dim rowVIEW_TAGRow As VIEW_TAGRow = CType(Me.NewRow,VIEW_TAGRow)
            Dim columnValuesArray() As Object = New Object() {Order_No, Order_Date, Order_Time, OrderItem_Index, Customer_index, Customer_ID, Title, Customer_Name, Supplier_Index, Supplier_Name, Supplier_Title, ItemStatus_Index, Unit_Description, Unit_Weight, Size_Index, Pallet_No, Qty, Weight, Volume, Qty_per_TAG, Weight_per_TAG, Volume_per_TAG, TAG_Status, Ref_No1, Ref_No2, OrderItemLocation_Index, Sku_Index, Plot, Str1, Str2, Sku_ID, Supplier_ID, Size_Description, Barcode, TAG_NO, Tag_No1, Tag_Barcode1, Tag_No2, Tag_Barcode2, Package_No, Package_Barcode, strMfg_Date, strExp_Date, Unit, Ratio, UnitSku, Total_Qty_per_Tag}
            rowVIEW_TAGRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVIEW_TAGRow)
            Return rowVIEW_TAGRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VIEW_TAGDataTable = CType(MyBase.Clone,VIEW_TAGDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VIEW_TAGDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnOrder_No = MyBase.Columns("Order_No")
            Me.columnOrder_Date = MyBase.Columns("Order_Date")
            Me.columnOrder_Time = MyBase.Columns("Order_Time")
            Me.columnOrderItem_Index = MyBase.Columns("OrderItem_Index")
            Me.columnCustomer_index = MyBase.Columns("Customer_Index")
            Me.columnCustomer_ID = MyBase.Columns("Customer_ID")
            Me.columnTitle = MyBase.Columns("Title")
            Me.columnCustomer_Name = MyBase.Columns("Customer_Name")
            Me.columnSupplier_Index = MyBase.Columns("Supplier_Index")
            Me.columnSupplier_Name = MyBase.Columns("Supplier_Name")
            Me.columnSupplier_Title = MyBase.Columns("Supplier_Title")
            Me.columnItemStatus_Index = MyBase.Columns("ItemStatus_Index")
            Me.columnUnit_Description = MyBase.Columns("Unit_Description")
            Me.columnUnit_Weight = MyBase.Columns("Unit_Weight")
            Me.columnSize_Index = MyBase.Columns("Size_Index")
            Me.columnPallet_No = MyBase.Columns("Pallet_No")
            Me.columnQty = MyBase.Columns("Qty")
            Me.columnWeight = MyBase.Columns("Weight")
            Me.columnVolume = MyBase.Columns("Volume")
            Me.columnQty_per_TAG = MyBase.Columns("Qty_per_TAG")
            Me.columnWeight_per_TAG = MyBase.Columns("Weight_per_TAG")
            Me.columnVolume_per_TAG = MyBase.Columns("Volume_per_TAG")
            Me.columnTAG_Status = MyBase.Columns("TAG_Status")
            Me.columnRef_No1 = MyBase.Columns("Ref_No1")
            Me.columnRef_No2 = MyBase.Columns("Ref_No2")
            Me.columnOrderItemLocation_Index = MyBase.Columns("OrderItemLocation_Index")
            Me.columnSku_Index = MyBase.Columns("Sku_Index")
            Me.columnPlot = MyBase.Columns("Plot")
            Me.columnStr1 = MyBase.Columns("Str1")
            Me.columnStr2 = MyBase.Columns("Str2")
            Me.columnSku_ID = MyBase.Columns("Sku_ID")
            Me.columnSupplier_ID = MyBase.Columns("Supplier_ID")
            Me.columnSize_Description = MyBase.Columns("Size_Description")
            Me.columnBarcode = MyBase.Columns("Barcode")
            Me.columnTAG_NO = MyBase.Columns("TAG_NO")
            Me.columnTag_No1 = MyBase.Columns("Tag_No1")
            Me.columnTag_Barcode1 = MyBase.Columns("Tag_Barcode1")
            Me.columnTag_No2 = MyBase.Columns("Tag_No2")
            Me.columnTag_Barcode2 = MyBase.Columns("Tag_Barcode2")
            Me.columnPackage_No = MyBase.Columns("Package_No")
            Me.columnPackage_Barcode = MyBase.Columns("Package_Barcode")
            Me.columnstrMfg_Date = MyBase.Columns("strMfg_Date")
            Me.columnstrExp_Date = MyBase.Columns("strExp_Date")
            Me.columnUnit = MyBase.Columns("Unit")
            Me.columnRatio = MyBase.Columns("Ratio")
            Me.columnUnitSku = MyBase.Columns("UnitSku")
            Me.columnTotal_Qty_per_Tag = MyBase.Columns("Total_Qty_per_Tag")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnOrder_No = New Global.System.Data.DataColumn("Order_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrder_No)
            Me.columnOrder_Date = New Global.System.Data.DataColumn("Order_Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrder_Date)
            Me.columnOrder_Time = New Global.System.Data.DataColumn("Order_Time", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrder_Time)
            Me.columnOrderItem_Index = New Global.System.Data.DataColumn("OrderItem_Index", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrderItem_Index)
            Me.columnCustomer_index = New Global.System.Data.DataColumn("Customer_Index", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnCustomer_index.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Customer_index")
            Me.columnCustomer_index.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Customer_indexColumn")
            Me.columnCustomer_index.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnCustomer_index")
            Me.columnCustomer_index.ExtendedProperties.Add("Generator_UserColumnName", "Customer_Index")
            MyBase.Columns.Add(Me.columnCustomer_index)
            Me.columnCustomer_ID = New Global.System.Data.DataColumn("Customer_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomer_ID)
            Me.columnTitle = New Global.System.Data.DataColumn("Title", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTitle)
            Me.columnCustomer_Name = New Global.System.Data.DataColumn("Customer_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomer_Name)
            Me.columnSupplier_Index = New Global.System.Data.DataColumn("Supplier_Index", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupplier_Index)
            Me.columnSupplier_Name = New Global.System.Data.DataColumn("Supplier_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupplier_Name)
            Me.columnSupplier_Title = New Global.System.Data.DataColumn("Supplier_Title", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupplier_Title)
            Me.columnItemStatus_Index = New Global.System.Data.DataColumn("ItemStatus_Index", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemStatus_Index)
            Me.columnUnit_Description = New Global.System.Data.DataColumn("Unit_Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnit_Description)
            Me.columnUnit_Weight = New Global.System.Data.DataColumn("Unit_Weight", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnit_Weight)
            Me.columnSize_Index = New Global.System.Data.DataColumn("Size_Index", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSize_Index)
            Me.columnPallet_No = New Global.System.Data.DataColumn("Pallet_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPallet_No)
            Me.columnQty = New Global.System.Data.DataColumn("Qty", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQty)
            Me.columnWeight = New Global.System.Data.DataColumn("Weight", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWeight)
            Me.columnVolume = New Global.System.Data.DataColumn("Volume", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVolume)
            Me.columnQty_per_TAG = New Global.System.Data.DataColumn("Qty_per_TAG", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQty_per_TAG)
            Me.columnWeight_per_TAG = New Global.System.Data.DataColumn("Weight_per_TAG", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWeight_per_TAG)
            Me.columnVolume_per_TAG = New Global.System.Data.DataColumn("Volume_per_TAG", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVolume_per_TAG)
            Me.columnTAG_Status = New Global.System.Data.DataColumn("TAG_Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTAG_Status)
            Me.columnRef_No1 = New Global.System.Data.DataColumn("Ref_No1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRef_No1)
            Me.columnRef_No2 = New Global.System.Data.DataColumn("Ref_No2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRef_No2)
            Me.columnOrderItemLocation_Index = New Global.System.Data.DataColumn("OrderItemLocation_Index", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrderItemLocation_Index)
            Me.columnSku_Index = New Global.System.Data.DataColumn("Sku_Index", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSku_Index)
            Me.columnPlot = New Global.System.Data.DataColumn("Plot", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlot)
            Me.columnStr1 = New Global.System.Data.DataColumn("Str1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStr1)
            Me.columnStr2 = New Global.System.Data.DataColumn("Str2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStr2)
            Me.columnSku_ID = New Global.System.Data.DataColumn("Sku_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSku_ID)
            Me.columnSupplier_ID = New Global.System.Data.DataColumn("Supplier_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupplier_ID)
            Me.columnSize_Description = New Global.System.Data.DataColumn("Size_Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSize_Description)
            Me.columnBarcode = New Global.System.Data.DataColumn("Barcode", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBarcode)
            Me.columnTAG_NO = New Global.System.Data.DataColumn("TAG_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTAG_NO)
            Me.columnTag_No1 = New Global.System.Data.DataColumn("Tag_No1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTag_No1)
            Me.columnTag_Barcode1 = New Global.System.Data.DataColumn("Tag_Barcode1", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTag_Barcode1)
            Me.columnTag_No2 = New Global.System.Data.DataColumn("Tag_No2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTag_No2)
            Me.columnTag_Barcode2 = New Global.System.Data.DataColumn("Tag_Barcode2", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTag_Barcode2)
            Me.columnPackage_No = New Global.System.Data.DataColumn("Package_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPackage_No)
            Me.columnPackage_Barcode = New Global.System.Data.DataColumn("Package_Barcode", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPackage_Barcode)
            Me.columnstrMfg_Date = New Global.System.Data.DataColumn("strMfg_Date", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstrMfg_Date)
            Me.columnstrExp_Date = New Global.System.Data.DataColumn("strExp_Date", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstrExp_Date)
            Me.columnUnit = New Global.System.Data.DataColumn("Unit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnit)
            Me.columnRatio = New Global.System.Data.DataColumn("Ratio", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRatio)
            Me.columnUnitSku = New Global.System.Data.DataColumn("UnitSku", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnitSku)
            Me.columnTotal_Qty_per_Tag = New Global.System.Data.DataColumn("Total_Qty_per_Tag", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotal_Qty_per_Tag)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVIEW_TAGRow() As VIEW_TAGRow
            Return CType(Me.NewRow,VIEW_TAGRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VIEW_TAGRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VIEW_TAGRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_TAGRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_TAGRowChanged(Me, New VIEW_TAGRowChangeEvent(CType(e.Row,VIEW_TAGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_TAGRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_TAGRowChanging(Me, New VIEW_TAGRowChangeEvent(CType(e.Row,VIEW_TAGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_TAGRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_TAGRowDeleted(Me, New VIEW_TAGRowChangeEvent(CType(e.Row,VIEW_TAGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_TAGRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_TAGRowDeleting(Me, New VIEW_TAGRowChangeEvent(CType(e.Row,VIEW_TAGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVIEW_TAGRow(ByVal row As VIEW_TAGRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTag = New dsTag
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VIEW_TAGDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VIEW_TAGRow
        Inherits Global.System.Data.DataRow
        
        Private tableVIEW_TAG As VIEW_TAGDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_TAG = CType(Me.Table,VIEW_TAGDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Order_No() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_TAG.Order_NoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Order_No' in table 'VIEW_TAG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_TAG.Order_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Order_Date() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_TAG.Order_DateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Order_Date' in table 'VIEW_TAG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_TAG.Order_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Order_Time() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_TAG.Order_TimeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Order_Time' in table 'VIEW_TAG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_TAG.Order_TimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OrderItem_Index() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_TAG.OrderItem_IndexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OrderItem_Index' in table 'VIEW_TAG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_TAG.OrderItem_IndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Customer_index() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_TAG.Customer_indexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Customer_Index' in table 'VIEW_TAG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_TAG.Customer_indexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Customer_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_TAG.Customer_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Customer_ID' in table 'VIEW_TAG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_TAG.Customer_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Title() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_TAG.TitleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Title' in table 'VIEW_TAG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_TAG.TitleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Customer_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_TAG.Customer_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Customer_Name' in table 'VIEW_TAG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_TAG.Customer_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Supplier_Index() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_TAG.Supplier_IndexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Supplier_Index' in table 'VIEW_TAG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_TAG.Supplier_IndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Supplier_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_TAG.Supplier_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Supplier_Name' in table 'VIEW_TAG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_TAG.Supplier_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Supplier_Title() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_TAG.Supplier_TitleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Supplier_Title' in table 'VIEW_TAG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_TAG.Supplier_TitleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemStatus_Index() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_TAG.ItemStatus_IndexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemStatus_Index' in table 'VIEW_TAG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_TAG.ItemStatus_IndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unit_Description() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_TAG.Unit_DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unit_Description' in table 'VIEW_TAG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_TAG.Unit_DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unit_Weight() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_TAG.Unit_WeightColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unit_Weight' in table 'VIEW_TAG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_TAG.Unit_WeightColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Size_Index() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_TAG.Size_IndexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Size_Index' in table 'VIEW_TAG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_TAG.Size_IndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pallet_No() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_TAG.Pallet_NoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pallet_No' in table 'VIEW_TAG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_TAG.Pallet_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Qty() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_TAG.QtyColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Qty' in table 'VIEW_TAG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_TAG.QtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Weight() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_TAG.WeightColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Weight' in table 'VIEW_TAG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_TAG.WeightColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Volume() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_TAG.VolumeColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Volume' in table 'VIEW_TAG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_TAG.VolumeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Qty_per_TAG() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_TAG.Qty_per_TAGColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Qty_per_TAG' in table 'VIEW_TAG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_TAG.Qty_per_TAGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Weight_per_TAG() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_TAG.Weight_per_TAGColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Weight_per_TAG' in table 'VIEW_TAG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_TAG.Weight_per_TAGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Volume_per_TAG() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_TAG.Volume_per_TAGColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Volume_per_TAG' in table 'VIEW_TAG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_TAG.Volume_per_TAGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TAG_Status() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_TAG.TAG_StatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TAG_Status' in table 'VIEW_TAG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_TAG.TAG_StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ref_No1() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_TAG.Ref_No1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ref_No1' in table 'VIEW_TAG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_TAG.Ref_No1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ref_No2() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_TAG.Ref_No2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ref_No2' in table 'VIEW_TAG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_TAG.Ref_No2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OrderItemLocation_Index() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_TAG.OrderItemLocation_IndexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OrderItemLocation_Index' in table 'VIEW_TAG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_TAG.OrderItemLocation_IndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sku_Index() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_TAG.Sku_IndexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sku_Index' in table 'VIEW_TAG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_TAG.Sku_IndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Plot() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_TAG.PlotColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Plot' in table 'VIEW_TAG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_TAG.PlotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Str1() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_TAG.Str1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Str1' in table 'VIEW_TAG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_TAG.Str1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Str2() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_TAG.Str2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Str2' in table 'VIEW_TAG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_TAG.Str2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sku_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_TAG.Sku_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sku_ID' in table 'VIEW_TAG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_TAG.Sku_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Supplier_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_TAG.Supplier_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Supplier_ID' in table 'VIEW_TAG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_TAG.Supplier_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Size_Description() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_TAG.Size_DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Size_Description' in table 'VIEW_TAG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_TAG.Size_DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Barcode() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_TAG.BarcodeColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Barcode' in table 'VIEW_TAG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_TAG.BarcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TAG_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_TAG.TAG_NOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TAG_NO' in table 'VIEW_TAG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_TAG.TAG_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tag_No1() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_TAG.Tag_No1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tag_No1' in table 'VIEW_TAG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_TAG.Tag_No1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tag_Barcode1() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_TAG.Tag_Barcode1Column),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tag_Barcode1' in table 'VIEW_TAG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_TAG.Tag_Barcode1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tag_No2() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_TAG.Tag_No2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tag_No2' in table 'VIEW_TAG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_TAG.Tag_No2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tag_Barcode2() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_TAG.Tag_Barcode2Column),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tag_Barcode2' in table 'VIEW_TAG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_TAG.Tag_Barcode2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Package_No() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_TAG.Package_NoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Package_No' in table 'VIEW_TAG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_TAG.Package_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Package_Barcode() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_TAG.Package_BarcodeColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Package_Barcode' in table 'VIEW_TAG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_TAG.Package_BarcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property strMfg_Date() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_TAG.strMfg_DateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'strMfg_Date' in table 'VIEW_TAG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_TAG.strMfg_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property strExp_Date() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_TAG.strExp_DateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'strExp_Date' in table 'VIEW_TAG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_TAG.strExp_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unit() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_TAG.UnitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unit' in table 'VIEW_TAG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_TAG.UnitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ratio() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_TAG.RatioColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ratio' in table 'VIEW_TAG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_TAG.RatioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UnitSku() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_TAG.UnitSkuColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UnitSku' in table 'VIEW_TAG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_TAG.UnitSkuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Total_Qty_per_Tag() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_TAG.Total_Qty_per_TagColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Total_Qty_per_Tag' in table 'VIEW_TAG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_TAG.Total_Qty_per_TagColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrder_NoNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_TAG.Order_NoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrder_NoNull()
            Me(Me.tableVIEW_TAG.Order_NoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrder_DateNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_TAG.Order_DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrder_DateNull()
            Me(Me.tableVIEW_TAG.Order_DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrder_TimeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_TAG.Order_TimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrder_TimeNull()
            Me(Me.tableVIEW_TAG.Order_TimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrderItem_IndexNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_TAG.OrderItem_IndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrderItem_IndexNull()
            Me(Me.tableVIEW_TAG.OrderItem_IndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomer_indexNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_TAG.Customer_indexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustomer_indexNull()
            Me(Me.tableVIEW_TAG.Customer_indexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomer_IDNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_TAG.Customer_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustomer_IDNull()
            Me(Me.tableVIEW_TAG.Customer_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTitleNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_TAG.TitleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTitleNull()
            Me(Me.tableVIEW_TAG.TitleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomer_NameNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_TAG.Customer_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustomer_NameNull()
            Me(Me.tableVIEW_TAG.Customer_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSupplier_IndexNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_TAG.Supplier_IndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSupplier_IndexNull()
            Me(Me.tableVIEW_TAG.Supplier_IndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSupplier_NameNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_TAG.Supplier_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSupplier_NameNull()
            Me(Me.tableVIEW_TAG.Supplier_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSupplier_TitleNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_TAG.Supplier_TitleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSupplier_TitleNull()
            Me(Me.tableVIEW_TAG.Supplier_TitleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemStatus_IndexNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_TAG.ItemStatus_IndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemStatus_IndexNull()
            Me(Me.tableVIEW_TAG.ItemStatus_IndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnit_DescriptionNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_TAG.Unit_DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnit_DescriptionNull()
            Me(Me.tableVIEW_TAG.Unit_DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnit_WeightNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_TAG.Unit_WeightColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnit_WeightNull()
            Me(Me.tableVIEW_TAG.Unit_WeightColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSize_IndexNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_TAG.Size_IndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSize_IndexNull()
            Me(Me.tableVIEW_TAG.Size_IndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPallet_NoNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_TAG.Pallet_NoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPallet_NoNull()
            Me(Me.tableVIEW_TAG.Pallet_NoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQtyNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_TAG.QtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQtyNull()
            Me(Me.tableVIEW_TAG.QtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWeightNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_TAG.WeightColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWeightNull()
            Me(Me.tableVIEW_TAG.WeightColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVolumeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_TAG.VolumeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVolumeNull()
            Me(Me.tableVIEW_TAG.VolumeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQty_per_TAGNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_TAG.Qty_per_TAGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQty_per_TAGNull()
            Me(Me.tableVIEW_TAG.Qty_per_TAGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWeight_per_TAGNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_TAG.Weight_per_TAGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWeight_per_TAGNull()
            Me(Me.tableVIEW_TAG.Weight_per_TAGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVolume_per_TAGNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_TAG.Volume_per_TAGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVolume_per_TAGNull()
            Me(Me.tableVIEW_TAG.Volume_per_TAGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTAG_StatusNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_TAG.TAG_StatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTAG_StatusNull()
            Me(Me.tableVIEW_TAG.TAG_StatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRef_No1Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_TAG.Ref_No1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRef_No1Null()
            Me(Me.tableVIEW_TAG.Ref_No1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRef_No2Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_TAG.Ref_No2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRef_No2Null()
            Me(Me.tableVIEW_TAG.Ref_No2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrderItemLocation_IndexNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_TAG.OrderItemLocation_IndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrderItemLocation_IndexNull()
            Me(Me.tableVIEW_TAG.OrderItemLocation_IndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSku_IndexNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_TAG.Sku_IndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSku_IndexNull()
            Me(Me.tableVIEW_TAG.Sku_IndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlotNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_TAG.PlotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlotNull()
            Me(Me.tableVIEW_TAG.PlotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStr1Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_TAG.Str1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStr1Null()
            Me(Me.tableVIEW_TAG.Str1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStr2Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_TAG.Str2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStr2Null()
            Me(Me.tableVIEW_TAG.Str2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSku_IDNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_TAG.Sku_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSku_IDNull()
            Me(Me.tableVIEW_TAG.Sku_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSupplier_IDNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_TAG.Supplier_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSupplier_IDNull()
            Me(Me.tableVIEW_TAG.Supplier_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSize_DescriptionNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_TAG.Size_DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSize_DescriptionNull()
            Me(Me.tableVIEW_TAG.Size_DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBarcodeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_TAG.BarcodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBarcodeNull()
            Me(Me.tableVIEW_TAG.BarcodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTAG_NONull() As Boolean
            Return Me.IsNull(Me.tableVIEW_TAG.TAG_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTAG_NONull()
            Me(Me.tableVIEW_TAG.TAG_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTag_No1Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_TAG.Tag_No1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTag_No1Null()
            Me(Me.tableVIEW_TAG.Tag_No1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTag_Barcode1Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_TAG.Tag_Barcode1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTag_Barcode1Null()
            Me(Me.tableVIEW_TAG.Tag_Barcode1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTag_No2Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_TAG.Tag_No2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTag_No2Null()
            Me(Me.tableVIEW_TAG.Tag_No2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTag_Barcode2Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_TAG.Tag_Barcode2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTag_Barcode2Null()
            Me(Me.tableVIEW_TAG.Tag_Barcode2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPackage_NoNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_TAG.Package_NoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPackage_NoNull()
            Me(Me.tableVIEW_TAG.Package_NoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPackage_BarcodeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_TAG.Package_BarcodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPackage_BarcodeNull()
            Me(Me.tableVIEW_TAG.Package_BarcodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstrMfg_DateNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_TAG.strMfg_DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstrMfg_DateNull()
            Me(Me.tableVIEW_TAG.strMfg_DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstrExp_DateNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_TAG.strExp_DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstrExp_DateNull()
            Me(Me.tableVIEW_TAG.strExp_DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnitNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_TAG.UnitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnitNull()
            Me(Me.tableVIEW_TAG.UnitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRatioNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_TAG.RatioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRatioNull()
            Me(Me.tableVIEW_TAG.RatioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnitSkuNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_TAG.UnitSkuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnitSkuNull()
            Me(Me.tableVIEW_TAG.UnitSkuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotal_Qty_per_TagNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_TAG.Total_Qty_per_TagColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotal_Qty_per_TagNull()
            Me(Me.tableVIEW_TAG.Total_Qty_per_TagColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VIEW_TAGRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VIEW_TAGRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VIEW_TAGRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VIEW_TAGRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
