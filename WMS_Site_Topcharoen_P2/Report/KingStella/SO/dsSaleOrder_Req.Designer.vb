'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.8833
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsSaleOrder_Req"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsSaleOrder_Req
    Inherits Global.System.Data.DataSet
    
    Private tableSaleOrder_Req As SaleOrder_ReqDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("SaleOrder_Req")) Is Nothing) Then
                MyBase.Tables.Add(New SaleOrder_ReqDataTable(ds.Tables("SaleOrder_Req")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SaleOrder_Req() As SaleOrder_ReqDataTable
        Get
            Return Me.tableSaleOrder_Req
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsSaleOrder_Req = CType(MyBase.Clone,dsSaleOrder_Req)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("SaleOrder_Req")) Is Nothing) Then
                MyBase.Tables.Add(New SaleOrder_ReqDataTable(ds.Tables("SaleOrder_Req")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableSaleOrder_Req = CType(MyBase.Tables("SaleOrder_Req"),SaleOrder_ReqDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSaleOrder_Req) Is Nothing) Then
                Me.tableSaleOrder_Req.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsSaleOrder_Req"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsSaleOrder_Req.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableSaleOrder_Req = New SaleOrder_ReqDataTable
        MyBase.Tables.Add(Me.tableSaleOrder_Req)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSaleOrder_Req() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsSaleOrder_Req = New dsSaleOrder_Req
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub SaleOrder_ReqRowChangeEventHandler(ByVal sender As Object, ByVal e As SaleOrder_ReqRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SaleOrder_ReqDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnWH As Global.System.Data.DataColumn
        
        Private columnSku_Index As Global.System.Data.DataColumn
        
        Private columnSku_Id As Global.System.Data.DataColumn
        
        Private columnSku_Name As Global.System.Data.DataColumn
        
        Private columnZone_Sku_Index As Global.System.Data.DataColumn
        
        Private columnERP_Location As Global.System.Data.DataColumn
        
        Private columnTotal_Qty As Global.System.Data.DataColumn
        
        Private columnTotal_Qty_Pending As Global.System.Data.DataColumn
        
        Private columnQty_Bal As Global.System.Data.DataColumn
        
        Private columnQty_Bal_Old As Global.System.Data.DataColumn
        
        Private columnQty_Bal_Real As Global.System.Data.DataColumn
        
        Private columnTotal_Qty_Pending_PO1 As Global.System.Data.DataColumn
        
        Private columnTotal_Qty_Pending_PO2 As Global.System.Data.DataColumn
        
        Private columnWH_ID As Global.System.Data.DataColumn
        
        Private columnPackage As Global.System.Data.DataColumn
        
        Private columnColumn1 As Global.System.Data.DataColumn
        
        Private columnTotal_Qty_Pending_PR As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SaleOrder_Req"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Sku_IndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSku_Index
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Sku_IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSku_Id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Sku_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSku_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Zone_Sku_IndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZone_Sku_Index
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ERP_LocationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnERP_Location
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Total_QtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotal_Qty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Total_Qty_PendingColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotal_Qty_Pending
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Qty_BalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQty_Bal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Qty_Bal_OldColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQty_Bal_Old
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Qty_Bal_RealColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQty_Bal_Real
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Total_Qty_Pending_PO1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotal_Qty_Pending_PO1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Total_Qty_Pending_PO2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotal_Qty_Pending_PO2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WH_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWH_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PackageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPackage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Column1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnColumn1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Total_Qty_Pending_PRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotal_Qty_Pending_PR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SaleOrder_ReqRow
            Get
                Return CType(Me.Rows(index),SaleOrder_ReqRow)
            End Get
        End Property
        
        Public Event SaleOrder_ReqRowChanging As SaleOrder_ReqRowChangeEventHandler
        
        Public Event SaleOrder_ReqRowChanged As SaleOrder_ReqRowChangeEventHandler
        
        Public Event SaleOrder_ReqRowDeleting As SaleOrder_ReqRowChangeEventHandler
        
        Public Event SaleOrder_ReqRowDeleted As SaleOrder_ReqRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSaleOrder_ReqRow(ByVal row As SaleOrder_ReqRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSaleOrder_ReqRow( _
                    ByVal WH As String,  _
                    ByVal Sku_Index As String,  _
                    ByVal Sku_Id As String,  _
                    ByVal Sku_Name As String,  _
                    ByVal Zone_Sku_Index As String,  _
                    ByVal ERP_Location As String,  _
                    ByVal Total_Qty As Double,  _
                    ByVal Total_Qty_Pending As Double,  _
                    ByVal Qty_Bal As Double,  _
                    ByVal Qty_Bal_Old As Double,  _
                    ByVal Qty_Bal_Real As Double,  _
                    ByVal Total_Qty_Pending_PO1 As Double,  _
                    ByVal Total_Qty_Pending_PO2 As Double,  _
                    ByVal WH_ID As Double,  _
                    ByVal Package As String,  _
                    ByVal Column1 As String,  _
                    ByVal Total_Qty_Pending_PR As Double) As SaleOrder_ReqRow
            Dim rowSaleOrder_ReqRow As SaleOrder_ReqRow = CType(Me.NewRow,SaleOrder_ReqRow)
            Dim columnValuesArray() As Object = New Object() {WH, Sku_Index, Sku_Id, Sku_Name, Zone_Sku_Index, ERP_Location, Total_Qty, Total_Qty_Pending, Qty_Bal, Qty_Bal_Old, Qty_Bal_Real, Total_Qty_Pending_PO1, Total_Qty_Pending_PO2, WH_ID, Package, Column1, Total_Qty_Pending_PR}
            rowSaleOrder_ReqRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSaleOrder_ReqRow)
            Return rowSaleOrder_ReqRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SaleOrder_ReqDataTable = CType(MyBase.Clone,SaleOrder_ReqDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SaleOrder_ReqDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnWH = MyBase.Columns("WH")
            Me.columnSku_Index = MyBase.Columns("Sku_Index")
            Me.columnSku_Id = MyBase.Columns("Sku_Id")
            Me.columnSku_Name = MyBase.Columns("Sku_Name")
            Me.columnZone_Sku_Index = MyBase.Columns("Zone_Sku_Index")
            Me.columnERP_Location = MyBase.Columns("ERP_Location")
            Me.columnTotal_Qty = MyBase.Columns("Total_Qty")
            Me.columnTotal_Qty_Pending = MyBase.Columns("Total_Qty_Pending")
            Me.columnQty_Bal = MyBase.Columns("Qty_Bal")
            Me.columnQty_Bal_Old = MyBase.Columns("Qty_Bal_Old")
            Me.columnQty_Bal_Real = MyBase.Columns("Qty_Bal_Real")
            Me.columnTotal_Qty_Pending_PO1 = MyBase.Columns("Total_Qty_Pending_PO1")
            Me.columnTotal_Qty_Pending_PO2 = MyBase.Columns("Total_Qty_Pending_PO2")
            Me.columnWH_ID = MyBase.Columns("WH_ID")
            Me.columnPackage = MyBase.Columns("Package")
            Me.columnColumn1 = MyBase.Columns("Column1")
            Me.columnTotal_Qty_Pending_PR = MyBase.Columns("Total_Qty_Pending_PR")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnWH = New Global.System.Data.DataColumn("WH", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWH)
            Me.columnSku_Index = New Global.System.Data.DataColumn("Sku_Index", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSku_Index)
            Me.columnSku_Id = New Global.System.Data.DataColumn("Sku_Id", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSku_Id)
            Me.columnSku_Name = New Global.System.Data.DataColumn("Sku_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSku_Name)
            Me.columnZone_Sku_Index = New Global.System.Data.DataColumn("Zone_Sku_Index", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZone_Sku_Index)
            Me.columnERP_Location = New Global.System.Data.DataColumn("ERP_Location", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnERP_Location)
            Me.columnTotal_Qty = New Global.System.Data.DataColumn("Total_Qty", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotal_Qty)
            Me.columnTotal_Qty_Pending = New Global.System.Data.DataColumn("Total_Qty_Pending", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotal_Qty_Pending)
            Me.columnQty_Bal = New Global.System.Data.DataColumn("Qty_Bal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQty_Bal)
            Me.columnQty_Bal_Old = New Global.System.Data.DataColumn("Qty_Bal_Old", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQty_Bal_Old)
            Me.columnQty_Bal_Real = New Global.System.Data.DataColumn("Qty_Bal_Real", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQty_Bal_Real)
            Me.columnTotal_Qty_Pending_PO1 = New Global.System.Data.DataColumn("Total_Qty_Pending_PO1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotal_Qty_Pending_PO1)
            Me.columnTotal_Qty_Pending_PO2 = New Global.System.Data.DataColumn("Total_Qty_Pending_PO2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotal_Qty_Pending_PO2)
            Me.columnWH_ID = New Global.System.Data.DataColumn("WH_ID", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWH_ID)
            Me.columnPackage = New Global.System.Data.DataColumn("Package", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPackage)
            Me.columnColumn1 = New Global.System.Data.DataColumn("Column1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColumn1)
            Me.columnTotal_Qty_Pending_PR = New Global.System.Data.DataColumn("Total_Qty_Pending_PR", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotal_Qty_Pending_PR)
            Me.columnTotal_Qty_Pending.Caption = "Qty_Bal"
            Me.columnQty_Bal_Real.Caption = "Qty_Bal"
            Me.columnTotal_Qty_Pending_PO1.Caption = "Qty_Bal"
            Me.columnTotal_Qty_Pending_PO2.Caption = "Qty_Bal"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSaleOrder_ReqRow() As SaleOrder_ReqRow
            Return CType(Me.NewRow,SaleOrder_ReqRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SaleOrder_ReqRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SaleOrder_ReqRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SaleOrder_ReqRowChangedEvent) Is Nothing) Then
                RaiseEvent SaleOrder_ReqRowChanged(Me, New SaleOrder_ReqRowChangeEvent(CType(e.Row,SaleOrder_ReqRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SaleOrder_ReqRowChangingEvent) Is Nothing) Then
                RaiseEvent SaleOrder_ReqRowChanging(Me, New SaleOrder_ReqRowChangeEvent(CType(e.Row,SaleOrder_ReqRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SaleOrder_ReqRowDeletedEvent) Is Nothing) Then
                RaiseEvent SaleOrder_ReqRowDeleted(Me, New SaleOrder_ReqRowChangeEvent(CType(e.Row,SaleOrder_ReqRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SaleOrder_ReqRowDeletingEvent) Is Nothing) Then
                RaiseEvent SaleOrder_ReqRowDeleting(Me, New SaleOrder_ReqRowChangeEvent(CType(e.Row,SaleOrder_ReqRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSaleOrder_ReqRow(ByVal row As SaleOrder_ReqRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSaleOrder_Req = New dsSaleOrder_Req
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SaleOrder_ReqDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SaleOrder_ReqRow
        Inherits Global.System.Data.DataRow
        
        Private tableSaleOrder_Req As SaleOrder_ReqDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSaleOrder_Req = CType(Me.Table,SaleOrder_ReqDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WH() As String
            Get
                Try 
                    Return CType(Me(Me.tableSaleOrder_Req.WHColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WH' in table 'SaleOrder_Req' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSaleOrder_Req.WHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sku_Index() As String
            Get
                Try 
                    Return CType(Me(Me.tableSaleOrder_Req.Sku_IndexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sku_Index' in table 'SaleOrder_Req' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSaleOrder_Req.Sku_IndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sku_Id() As String
            Get
                Try 
                    Return CType(Me(Me.tableSaleOrder_Req.Sku_IdColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sku_Id' in table 'SaleOrder_Req' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSaleOrder_Req.Sku_IdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sku_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableSaleOrder_Req.Sku_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sku_Name' in table 'SaleOrder_Req' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSaleOrder_Req.Sku_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Zone_Sku_Index() As String
            Get
                Try 
                    Return CType(Me(Me.tableSaleOrder_Req.Zone_Sku_IndexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Zone_Sku_Index' in table 'SaleOrder_Req' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSaleOrder_Req.Zone_Sku_IndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ERP_Location() As String
            Get
                Try 
                    Return CType(Me(Me.tableSaleOrder_Req.ERP_LocationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ERP_Location' in table 'SaleOrder_Req' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSaleOrder_Req.ERP_LocationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Total_Qty() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSaleOrder_Req.Total_QtyColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Total_Qty' in table 'SaleOrder_Req' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSaleOrder_Req.Total_QtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Total_Qty_Pending() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSaleOrder_Req.Total_Qty_PendingColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Total_Qty_Pending' in table 'SaleOrder_Req' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSaleOrder_Req.Total_Qty_PendingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Qty_Bal() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSaleOrder_Req.Qty_BalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Qty_Bal' in table 'SaleOrder_Req' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSaleOrder_Req.Qty_BalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Qty_Bal_Old() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSaleOrder_Req.Qty_Bal_OldColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Qty_Bal_Old' in table 'SaleOrder_Req' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSaleOrder_Req.Qty_Bal_OldColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Qty_Bal_Real() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSaleOrder_Req.Qty_Bal_RealColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Qty_Bal_Real' in table 'SaleOrder_Req' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSaleOrder_Req.Qty_Bal_RealColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Total_Qty_Pending_PO1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSaleOrder_Req.Total_Qty_Pending_PO1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Total_Qty_Pending_PO1' in table 'SaleOrder_Req' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSaleOrder_Req.Total_Qty_Pending_PO1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Total_Qty_Pending_PO2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSaleOrder_Req.Total_Qty_Pending_PO2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Total_Qty_Pending_PO2' in table 'SaleOrder_Req' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSaleOrder_Req.Total_Qty_Pending_PO2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WH_ID() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSaleOrder_Req.WH_IDColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WH_ID' in table 'SaleOrder_Req' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSaleOrder_Req.WH_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Package() As String
            Get
                Try 
                    Return CType(Me(Me.tableSaleOrder_Req.PackageColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Package' in table 'SaleOrder_Req' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSaleOrder_Req.PackageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Column1() As String
            Get
                Try 
                    Return CType(Me(Me.tableSaleOrder_Req.Column1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Column1' in table 'SaleOrder_Req' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSaleOrder_Req.Column1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Total_Qty_Pending_PR() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSaleOrder_Req.Total_Qty_Pending_PRColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Total_Qty_Pending_PR' in table 'SaleOrder_Req' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSaleOrder_Req.Total_Qty_Pending_PRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWHNull() As Boolean
            Return Me.IsNull(Me.tableSaleOrder_Req.WHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWHNull()
            Me(Me.tableSaleOrder_Req.WHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSku_IndexNull() As Boolean
            Return Me.IsNull(Me.tableSaleOrder_Req.Sku_IndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSku_IndexNull()
            Me(Me.tableSaleOrder_Req.Sku_IndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSku_IdNull() As Boolean
            Return Me.IsNull(Me.tableSaleOrder_Req.Sku_IdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSku_IdNull()
            Me(Me.tableSaleOrder_Req.Sku_IdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSku_NameNull() As Boolean
            Return Me.IsNull(Me.tableSaleOrder_Req.Sku_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSku_NameNull()
            Me(Me.tableSaleOrder_Req.Sku_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsZone_Sku_IndexNull() As Boolean
            Return Me.IsNull(Me.tableSaleOrder_Req.Zone_Sku_IndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetZone_Sku_IndexNull()
            Me(Me.tableSaleOrder_Req.Zone_Sku_IndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsERP_LocationNull() As Boolean
            Return Me.IsNull(Me.tableSaleOrder_Req.ERP_LocationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetERP_LocationNull()
            Me(Me.tableSaleOrder_Req.ERP_LocationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotal_QtyNull() As Boolean
            Return Me.IsNull(Me.tableSaleOrder_Req.Total_QtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotal_QtyNull()
            Me(Me.tableSaleOrder_Req.Total_QtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotal_Qty_PendingNull() As Boolean
            Return Me.IsNull(Me.tableSaleOrder_Req.Total_Qty_PendingColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotal_Qty_PendingNull()
            Me(Me.tableSaleOrder_Req.Total_Qty_PendingColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQty_BalNull() As Boolean
            Return Me.IsNull(Me.tableSaleOrder_Req.Qty_BalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQty_BalNull()
            Me(Me.tableSaleOrder_Req.Qty_BalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQty_Bal_OldNull() As Boolean
            Return Me.IsNull(Me.tableSaleOrder_Req.Qty_Bal_OldColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQty_Bal_OldNull()
            Me(Me.tableSaleOrder_Req.Qty_Bal_OldColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQty_Bal_RealNull() As Boolean
            Return Me.IsNull(Me.tableSaleOrder_Req.Qty_Bal_RealColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQty_Bal_RealNull()
            Me(Me.tableSaleOrder_Req.Qty_Bal_RealColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotal_Qty_Pending_PO1Null() As Boolean
            Return Me.IsNull(Me.tableSaleOrder_Req.Total_Qty_Pending_PO1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotal_Qty_Pending_PO1Null()
            Me(Me.tableSaleOrder_Req.Total_Qty_Pending_PO1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotal_Qty_Pending_PO2Null() As Boolean
            Return Me.IsNull(Me.tableSaleOrder_Req.Total_Qty_Pending_PO2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotal_Qty_Pending_PO2Null()
            Me(Me.tableSaleOrder_Req.Total_Qty_Pending_PO2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWH_IDNull() As Boolean
            Return Me.IsNull(Me.tableSaleOrder_Req.WH_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWH_IDNull()
            Me(Me.tableSaleOrder_Req.WH_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPackageNull() As Boolean
            Return Me.IsNull(Me.tableSaleOrder_Req.PackageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPackageNull()
            Me(Me.tableSaleOrder_Req.PackageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsColumn1Null() As Boolean
            Return Me.IsNull(Me.tableSaleOrder_Req.Column1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetColumn1Null()
            Me(Me.tableSaleOrder_Req.Column1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotal_Qty_Pending_PRNull() As Boolean
            Return Me.IsNull(Me.tableSaleOrder_Req.Total_Qty_Pending_PRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotal_Qty_Pending_PRNull()
            Me(Me.tableSaleOrder_Req.Total_Qty_Pending_PRColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SaleOrder_ReqRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SaleOrder_ReqRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SaleOrder_ReqRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SaleOrder_ReqRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
