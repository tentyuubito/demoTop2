'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.8937
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsMaster_Custome"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsMaster_Custome
    Inherits Global.System.Data.DataSet
    
    Private tablems_Customer As ms_CustomerDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("ms_Customer")) Is Nothing) Then
                MyBase.Tables.Add(New ms_CustomerDataTable(ds.Tables("ms_Customer")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ms_Customer() As ms_CustomerDataTable
        Get
            Return Me.tablems_Customer
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsMaster_Custome = CType(MyBase.Clone,dsMaster_Custome)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("ms_Customer")) Is Nothing) Then
                MyBase.Tables.Add(New ms_CustomerDataTable(ds.Tables("ms_Customer")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablems_Customer = CType(MyBase.Tables("ms_Customer"),ms_CustomerDataTable)
        If (initTable = true) Then
            If (Not (Me.tablems_Customer) Is Nothing) Then
                Me.tablems_Customer.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsMaster_Custome"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsMaster_Custome.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablems_Customer = New ms_CustomerDataTable
        MyBase.Tables.Add(Me.tablems_Customer)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializems_Customer() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsMaster_Custome = New dsMaster_Custome
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub ms_CustomerRowChangeEventHandler(ByVal sender As Object, ByVal e As ms_CustomerRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ms_CustomerDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCustomer_Index As Global.System.Data.DataColumn
        
        Private columnCustomer_Id As Global.System.Data.DataColumn
        
        Private columnTitle As Global.System.Data.DataColumn
        
        Private columnCustomer_Name As Global.System.Data.DataColumn
        
        Private columnBilling_Location As Global.System.Data.DataColumn
        
        Private columnCustomer_Type_Index As Global.System.Data.DataColumn
        
        Private columnAddress As Global.System.Data.DataColumn
        
        Private columnDistrict_Index As Global.System.Data.DataColumn
        
        Private columnProvince_Index As Global.System.Data.DataColumn
        
        Private columnPostcode As Global.System.Data.DataColumn
        
        Private columnTel As Global.System.Data.DataColumn
        
        Private columnFax As Global.System.Data.DataColumn
        
        Private columnMobile As Global.System.Data.DataColumn
        
        Private columnEmail As Global.System.Data.DataColumn
        
        Private columnContact_Person As Global.System.Data.DataColumn
        
        Private columnContact_Person2 As Global.System.Data.DataColumn
        
        Private columnContact_Person3 As Global.System.Data.DataColumn
        
        Private columnBarcode As Global.System.Data.DataColumn
        
        Private columnCredit_Term As Global.System.Data.DataColumn
        
        Private columnVat_Inc As Global.System.Data.DataColumn
        
        Private columnBilling_Date As Global.System.Data.DataColumn
        
        Private columnRemark As Global.System.Data.DataColumn
        
        Private columnPrice1 As Global.System.Data.DataColumn
        
        Private columnPrice_Unit1 As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnStr1 As Global.System.Data.DataColumn
        
        Private columnStr2 As Global.System.Data.DataColumn
        
        Private columnStr3 As Global.System.Data.DataColumn
        
        Private columnStr4 As Global.System.Data.DataColumn
        
        Private columnStr5 As Global.System.Data.DataColumn
        
        Private columnStr6 As Global.System.Data.DataColumn
        
        Private columnStr7 As Global.System.Data.DataColumn
        
        Private columnStr8 As Global.System.Data.DataColumn
        
        Private columnStr9 As Global.System.Data.DataColumn
        
        Private columnStr10 As Global.System.Data.DataColumn
        
        Private columnadd_by As Global.System.Data.DataColumn
        
        Private columnadd_date As Global.System.Data.DataColumn
        
        Private columnadd_branch As Global.System.Data.DataColumn
        
        Private columnupdate_by As Global.System.Data.DataColumn
        
        Private columnupdate_date As Global.System.Data.DataColumn
        
        Private columnupdate_branch As Global.System.Data.DataColumn
        
        Private columnBilling_Type_Index As Global.System.Data.DataColumn
        
        Private columnstatus_id As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ms_Customer"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Customer_IndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomer_Index
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Customer_IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomer_Id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TitleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTitle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Customer_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomer_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Billing_LocationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBilling_Location
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Customer_Type_IndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomer_Type_Index
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property District_IndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDistrict_Index
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Province_IndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProvince_Index
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PostcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPostcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FaxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MobileColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMobile
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Contact_PersonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContact_Person
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Contact_Person2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnContact_Person2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Contact_Person3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnContact_Person3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BarcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBarcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Credit_TermColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCredit_Term
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Vat_IncColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVat_Inc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Billing_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBilling_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemark
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Price1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrice1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Price_Unit1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrice_Unit1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Str1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnStr1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Str2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnStr2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Str3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnStr3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Str4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnStr4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Str5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnStr5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Str6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnStr6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Str7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnStr7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Str8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnStr8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Str9Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnStr9
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Str10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnStr10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property add_byColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnadd_by
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property add_dateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnadd_date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property add_branchColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnadd_branch
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property update_byColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnupdate_by
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property update_dateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnupdate_date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property update_branchColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnupdate_branch
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Billing_Type_IndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBilling_Type_Index
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property status_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstatus_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ms_CustomerRow
            Get
                Return CType(Me.Rows(index),ms_CustomerRow)
            End Get
        End Property
        
        Public Event ms_CustomerRowChanging As ms_CustomerRowChangeEventHandler
        
        Public Event ms_CustomerRowChanged As ms_CustomerRowChangeEventHandler
        
        Public Event ms_CustomerRowDeleting As ms_CustomerRowChangeEventHandler
        
        Public Event ms_CustomerRowDeleted As ms_CustomerRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addms_CustomerRow(ByVal row As ms_CustomerRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addms_CustomerRow( _
                    ByVal Customer_Index As String,  _
                    ByVal Customer_Id As String,  _
                    ByVal Title As String,  _
                    ByVal Customer_Name As String,  _
                    ByVal Billing_Location As String,  _
                    ByVal Customer_Type_Index As String,  _
                    ByVal Address As String,  _
                    ByVal District_Index As Integer,  _
                    ByVal Province_Index As Integer,  _
                    ByVal Postcode As String,  _
                    ByVal Tel As String,  _
                    ByVal Fax As String,  _
                    ByVal Mobile As String,  _
                    ByVal Email As String,  _
                    ByVal Contact_Person As String,  _
                    ByVal Contact_Person2 As String,  _
                    ByVal Contact_Person3 As String,  _
                    ByVal Barcode As String,  _
                    ByVal Credit_Term As Integer,  _
                    ByVal Vat_Inc As Integer,  _
                    ByVal Billing_Date As Integer,  _
                    ByVal Remark As String,  _
                    ByVal Price1 As Double,  _
                    ByVal Price_Unit1 As String,  _
                    ByVal Status As Integer,  _
                    ByVal Str1 As String,  _
                    ByVal Str2 As String,  _
                    ByVal Str3 As String,  _
                    ByVal Str4 As String,  _
                    ByVal Str5 As String,  _
                    ByVal Str6 As String,  _
                    ByVal Str7 As String,  _
                    ByVal Str8 As String,  _
                    ByVal Str9 As String,  _
                    ByVal Str10 As String,  _
                    ByVal add_by As String,  _
                    ByVal add_date As Date,  _
                    ByVal add_branch As Integer,  _
                    ByVal update_by As String,  _
                    ByVal update_date As Date,  _
                    ByVal update_branch As Integer,  _
                    ByVal Billing_Type_Index As String,  _
                    ByVal status_id As Integer) As ms_CustomerRow
            Dim rowms_CustomerRow As ms_CustomerRow = CType(Me.NewRow,ms_CustomerRow)
            Dim columnValuesArray() As Object = New Object() {Customer_Index, Customer_Id, Title, Customer_Name, Billing_Location, Customer_Type_Index, Address, District_Index, Province_Index, Postcode, Tel, Fax, Mobile, Email, Contact_Person, Contact_Person2, Contact_Person3, Barcode, Credit_Term, Vat_Inc, Billing_Date, Remark, Price1, Price_Unit1, Status, Str1, Str2, Str3, Str4, Str5, Str6, Str7, Str8, Str9, Str10, add_by, add_date, add_branch, update_by, update_date, update_branch, Billing_Type_Index, status_id}
            rowms_CustomerRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowms_CustomerRow)
            Return rowms_CustomerRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCustomer_Index(ByVal Customer_Index As String) As ms_CustomerRow
            Return CType(Me.Rows.Find(New Object() {Customer_Index}),ms_CustomerRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ms_CustomerDataTable = CType(MyBase.Clone,ms_CustomerDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ms_CustomerDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCustomer_Index = MyBase.Columns("Customer_Index")
            Me.columnCustomer_Id = MyBase.Columns("Customer_Id")
            Me.columnTitle = MyBase.Columns("Title")
            Me.columnCustomer_Name = MyBase.Columns("Customer_Name")
            Me.columnBilling_Location = MyBase.Columns("Billing_Location")
            Me.columnCustomer_Type_Index = MyBase.Columns("Customer_Type_Index")
            Me.columnAddress = MyBase.Columns("Address")
            Me.columnDistrict_Index = MyBase.Columns("District_Index")
            Me.columnProvince_Index = MyBase.Columns("Province_Index")
            Me.columnPostcode = MyBase.Columns("Postcode")
            Me.columnTel = MyBase.Columns("Tel")
            Me.columnFax = MyBase.Columns("Fax")
            Me.columnMobile = MyBase.Columns("Mobile")
            Me.columnEmail = MyBase.Columns("Email")
            Me.columnContact_Person = MyBase.Columns("Contact_Person")
            Me.columnContact_Person2 = MyBase.Columns("Contact_Person2")
            Me.columnContact_Person3 = MyBase.Columns("Contact_Person3")
            Me.columnBarcode = MyBase.Columns("Barcode")
            Me.columnCredit_Term = MyBase.Columns("Credit_Term")
            Me.columnVat_Inc = MyBase.Columns("Vat_Inc")
            Me.columnBilling_Date = MyBase.Columns("Billing_Date")
            Me.columnRemark = MyBase.Columns("Remark")
            Me.columnPrice1 = MyBase.Columns("Price1")
            Me.columnPrice_Unit1 = MyBase.Columns("Price_Unit1")
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnStr1 = MyBase.Columns("Str1")
            Me.columnStr2 = MyBase.Columns("Str2")
            Me.columnStr3 = MyBase.Columns("Str3")
            Me.columnStr4 = MyBase.Columns("Str4")
            Me.columnStr5 = MyBase.Columns("Str5")
            Me.columnStr6 = MyBase.Columns("Str6")
            Me.columnStr7 = MyBase.Columns("Str7")
            Me.columnStr8 = MyBase.Columns("Str8")
            Me.columnStr9 = MyBase.Columns("Str9")
            Me.columnStr10 = MyBase.Columns("Str10")
            Me.columnadd_by = MyBase.Columns("add_by")
            Me.columnadd_date = MyBase.Columns("add_date")
            Me.columnadd_branch = MyBase.Columns("add_branch")
            Me.columnupdate_by = MyBase.Columns("update_by")
            Me.columnupdate_date = MyBase.Columns("update_date")
            Me.columnupdate_branch = MyBase.Columns("update_branch")
            Me.columnBilling_Type_Index = MyBase.Columns("Billing_Type_Index")
            Me.columnstatus_id = MyBase.Columns("status_id")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCustomer_Index = New Global.System.Data.DataColumn("Customer_Index", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomer_Index)
            Me.columnCustomer_Id = New Global.System.Data.DataColumn("Customer_Id", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomer_Id)
            Me.columnTitle = New Global.System.Data.DataColumn("Title", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTitle)
            Me.columnCustomer_Name = New Global.System.Data.DataColumn("Customer_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomer_Name)
            Me.columnBilling_Location = New Global.System.Data.DataColumn("Billing_Location", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBilling_Location)
            Me.columnCustomer_Type_Index = New Global.System.Data.DataColumn("Customer_Type_Index", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomer_Type_Index)
            Me.columnAddress = New Global.System.Data.DataColumn("Address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress)
            Me.columnDistrict_Index = New Global.System.Data.DataColumn("District_Index", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDistrict_Index)
            Me.columnProvince_Index = New Global.System.Data.DataColumn("Province_Index", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProvince_Index)
            Me.columnPostcode = New Global.System.Data.DataColumn("Postcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPostcode)
            Me.columnTel = New Global.System.Data.DataColumn("Tel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTel)
            Me.columnFax = New Global.System.Data.DataColumn("Fax", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFax)
            Me.columnMobile = New Global.System.Data.DataColumn("Mobile", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMobile)
            Me.columnEmail = New Global.System.Data.DataColumn("Email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmail)
            Me.columnContact_Person = New Global.System.Data.DataColumn("Contact_Person", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContact_Person)
            Me.columnContact_Person2 = New Global.System.Data.DataColumn("Contact_Person2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContact_Person2)
            Me.columnContact_Person3 = New Global.System.Data.DataColumn("Contact_Person3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContact_Person3)
            Me.columnBarcode = New Global.System.Data.DataColumn("Barcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBarcode)
            Me.columnCredit_Term = New Global.System.Data.DataColumn("Credit_Term", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCredit_Term)
            Me.columnVat_Inc = New Global.System.Data.DataColumn("Vat_Inc", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVat_Inc)
            Me.columnBilling_Date = New Global.System.Data.DataColumn("Billing_Date", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBilling_Date)
            Me.columnRemark = New Global.System.Data.DataColumn("Remark", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemark)
            Me.columnPrice1 = New Global.System.Data.DataColumn("Price1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrice1)
            Me.columnPrice_Unit1 = New Global.System.Data.DataColumn("Price_Unit1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrice_Unit1)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnStr1 = New Global.System.Data.DataColumn("Str1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStr1)
            Me.columnStr2 = New Global.System.Data.DataColumn("Str2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStr2)
            Me.columnStr3 = New Global.System.Data.DataColumn("Str3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStr3)
            Me.columnStr4 = New Global.System.Data.DataColumn("Str4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStr4)
            Me.columnStr5 = New Global.System.Data.DataColumn("Str5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStr5)
            Me.columnStr6 = New Global.System.Data.DataColumn("Str6", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStr6)
            Me.columnStr7 = New Global.System.Data.DataColumn("Str7", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStr7)
            Me.columnStr8 = New Global.System.Data.DataColumn("Str8", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStr8)
            Me.columnStr9 = New Global.System.Data.DataColumn("Str9", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStr9)
            Me.columnStr10 = New Global.System.Data.DataColumn("Str10", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStr10)
            Me.columnadd_by = New Global.System.Data.DataColumn("add_by", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnadd_by)
            Me.columnadd_date = New Global.System.Data.DataColumn("add_date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnadd_date)
            Me.columnadd_branch = New Global.System.Data.DataColumn("add_branch", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnadd_branch)
            Me.columnupdate_by = New Global.System.Data.DataColumn("update_by", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnupdate_by)
            Me.columnupdate_date = New Global.System.Data.DataColumn("update_date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnupdate_date)
            Me.columnupdate_branch = New Global.System.Data.DataColumn("update_branch", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnupdate_branch)
            Me.columnBilling_Type_Index = New Global.System.Data.DataColumn("Billing_Type_Index", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBilling_Type_Index)
            Me.columnstatus_id = New Global.System.Data.DataColumn("status_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstatus_id)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCustomer_Index}, true))
            Me.columnCustomer_Index.AllowDBNull = false
            Me.columnCustomer_Index.Unique = true
            Me.columnCustomer_Index.MaxLength = 13
            Me.columnCustomer_Id.AllowDBNull = false
            Me.columnCustomer_Id.MaxLength = 13
            Me.columnTitle.MaxLength = 50
            Me.columnCustomer_Name.MaxLength = 100
            Me.columnBilling_Location.MaxLength = 255
            Me.columnCustomer_Type_Index.MaxLength = 13
            Me.columnAddress.MaxLength = 255
            Me.columnPostcode.MaxLength = 100
            Me.columnTel.MaxLength = 100
            Me.columnFax.MaxLength = 100
            Me.columnMobile.MaxLength = 100
            Me.columnEmail.MaxLength = 100
            Me.columnContact_Person.MaxLength = 100
            Me.columnContact_Person2.MaxLength = 100
            Me.columnContact_Person3.MaxLength = 100
            Me.columnBarcode.MaxLength = 100
            Me.columnRemark.MaxLength = 255
            Me.columnPrice_Unit1.MaxLength = 100
            Me.columnStr1.MaxLength = 100
            Me.columnStr2.MaxLength = 100
            Me.columnStr3.MaxLength = 100
            Me.columnStr4.MaxLength = 100
            Me.columnStr5.MaxLength = 100
            Me.columnStr6.MaxLength = 100
            Me.columnStr7.MaxLength = 100
            Me.columnStr8.MaxLength = 100
            Me.columnStr9.MaxLength = 2000
            Me.columnStr10.MaxLength = 2000
            Me.columnadd_by.MaxLength = 50
            Me.columnupdate_by.MaxLength = 50
            Me.columnBilling_Type_Index.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newms_CustomerRow() As ms_CustomerRow
            Return CType(Me.NewRow,ms_CustomerRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ms_CustomerRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ms_CustomerRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ms_CustomerRowChangedEvent) Is Nothing) Then
                RaiseEvent ms_CustomerRowChanged(Me, New ms_CustomerRowChangeEvent(CType(e.Row,ms_CustomerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ms_CustomerRowChangingEvent) Is Nothing) Then
                RaiseEvent ms_CustomerRowChanging(Me, New ms_CustomerRowChangeEvent(CType(e.Row,ms_CustomerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ms_CustomerRowDeletedEvent) Is Nothing) Then
                RaiseEvent ms_CustomerRowDeleted(Me, New ms_CustomerRowChangeEvent(CType(e.Row,ms_CustomerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ms_CustomerRowDeletingEvent) Is Nothing) Then
                RaiseEvent ms_CustomerRowDeleting(Me, New ms_CustomerRowChangeEvent(CType(e.Row,ms_CustomerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removems_CustomerRow(ByVal row As ms_CustomerRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsMaster_Custome = New dsMaster_Custome
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ms_CustomerDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ms_CustomerRow
        Inherits Global.System.Data.DataRow
        
        Private tablems_Customer As ms_CustomerDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablems_Customer = CType(Me.Table,ms_CustomerDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Customer_Index() As String
            Get
                Return CType(Me(Me.tablems_Customer.Customer_IndexColumn),String)
            End Get
            Set
                Me(Me.tablems_Customer.Customer_IndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Customer_Id() As String
            Get
                Return CType(Me(Me.tablems_Customer.Customer_IdColumn),String)
            End Get
            Set
                Me(Me.tablems_Customer.Customer_IdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Title() As String
            Get
                Try 
                    Return CType(Me(Me.tablems_Customer.TitleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Title' in table 'ms_Customer' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablems_Customer.TitleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Customer_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tablems_Customer.Customer_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Customer_Name' in table 'ms_Customer' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablems_Customer.Customer_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Billing_Location() As String
            Get
                Try 
                    Return CType(Me(Me.tablems_Customer.Billing_LocationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Billing_Location' in table 'ms_Customer' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablems_Customer.Billing_LocationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Customer_Type_Index() As String
            Get
                Try 
                    Return CType(Me(Me.tablems_Customer.Customer_Type_IndexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Customer_Type_Index' in table 'ms_Customer' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablems_Customer.Customer_Type_IndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address() As String
            Get
                Try 
                    Return CType(Me(Me.tablems_Customer.AddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Address' in table 'ms_Customer' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablems_Customer.AddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property District_Index() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablems_Customer.District_IndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'District_Index' in table 'ms_Customer' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablems_Customer.District_IndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Province_Index() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablems_Customer.Province_IndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Province_Index' in table 'ms_Customer' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablems_Customer.Province_IndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Postcode() As String
            Get
                Try 
                    Return CType(Me(Me.tablems_Customer.PostcodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Postcode' in table 'ms_Customer' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablems_Customer.PostcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tel() As String
            Get
                Try 
                    Return CType(Me(Me.tablems_Customer.TelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tel' in table 'ms_Customer' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablems_Customer.TelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fax() As String
            Get
                Try 
                    Return CType(Me(Me.tablems_Customer.FaxColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fax' in table 'ms_Customer' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablems_Customer.FaxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Mobile() As String
            Get
                Try 
                    Return CType(Me(Me.tablems_Customer.MobileColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Mobile' in table 'ms_Customer' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablems_Customer.MobileColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Email() As String
            Get
                Try 
                    Return CType(Me(Me.tablems_Customer.EmailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Email' in table 'ms_Customer' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablems_Customer.EmailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Contact_Person() As String
            Get
                Try 
                    Return CType(Me(Me.tablems_Customer.Contact_PersonColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Contact_Person' in table 'ms_Customer' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablems_Customer.Contact_PersonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Contact_Person2() As String
            Get
                Try 
                    Return CType(Me(Me.tablems_Customer.Contact_Person2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Contact_Person2' in table 'ms_Customer' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablems_Customer.Contact_Person2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Contact_Person3() As String
            Get
                Try 
                    Return CType(Me(Me.tablems_Customer.Contact_Person3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Contact_Person3' in table 'ms_Customer' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablems_Customer.Contact_Person3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Barcode() As String
            Get
                Try 
                    Return CType(Me(Me.tablems_Customer.BarcodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Barcode' in table 'ms_Customer' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablems_Customer.BarcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Credit_Term() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablems_Customer.Credit_TermColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Credit_Term' in table 'ms_Customer' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablems_Customer.Credit_TermColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Vat_Inc() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablems_Customer.Vat_IncColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Vat_Inc' in table 'ms_Customer' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablems_Customer.Vat_IncColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Billing_Date() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablems_Customer.Billing_DateColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Billing_Date' in table 'ms_Customer' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablems_Customer.Billing_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remark() As String
            Get
                Try 
                    Return CType(Me(Me.tablems_Customer.RemarkColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remark' in table 'ms_Customer' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablems_Customer.RemarkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Price1() As Double
            Get
                Try 
                    Return CType(Me(Me.tablems_Customer.Price1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Price1' in table 'ms_Customer' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablems_Customer.Price1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Price_Unit1() As String
            Get
                Try 
                    Return CType(Me(Me.tablems_Customer.Price_Unit1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Price_Unit1' in table 'ms_Customer' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablems_Customer.Price_Unit1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablems_Customer.StatusColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Status' in table 'ms_Customer' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablems_Customer.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Str1() As String
            Get
                Try 
                    Return CType(Me(Me.tablems_Customer.Str1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Str1' in table 'ms_Customer' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablems_Customer.Str1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Str2() As String
            Get
                Try 
                    Return CType(Me(Me.tablems_Customer.Str2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Str2' in table 'ms_Customer' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablems_Customer.Str2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Str3() As String
            Get
                Try 
                    Return CType(Me(Me.tablems_Customer.Str3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Str3' in table 'ms_Customer' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablems_Customer.Str3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Str4() As String
            Get
                Try 
                    Return CType(Me(Me.tablems_Customer.Str4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Str4' in table 'ms_Customer' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablems_Customer.Str4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Str5() As String
            Get
                Try 
                    Return CType(Me(Me.tablems_Customer.Str5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Str5' in table 'ms_Customer' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablems_Customer.Str5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Str6() As String
            Get
                Try 
                    Return CType(Me(Me.tablems_Customer.Str6Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Str6' in table 'ms_Customer' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablems_Customer.Str6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Str7() As String
            Get
                Try 
                    Return CType(Me(Me.tablems_Customer.Str7Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Str7' in table 'ms_Customer' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablems_Customer.Str7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Str8() As String
            Get
                Try 
                    Return CType(Me(Me.tablems_Customer.Str8Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Str8' in table 'ms_Customer' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablems_Customer.Str8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Str9() As String
            Get
                Try 
                    Return CType(Me(Me.tablems_Customer.Str9Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Str9' in table 'ms_Customer' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablems_Customer.Str9Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Str10() As String
            Get
                Try 
                    Return CType(Me(Me.tablems_Customer.Str10Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Str10' in table 'ms_Customer' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablems_Customer.Str10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property add_by() As String
            Get
                Try 
                    Return CType(Me(Me.tablems_Customer.add_byColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'add_by' in table 'ms_Customer' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablems_Customer.add_byColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property add_date() As Date
            Get
                Try 
                    Return CType(Me(Me.tablems_Customer.add_dateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'add_date' in table 'ms_Customer' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablems_Customer.add_dateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property add_branch() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablems_Customer.add_branchColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'add_branch' in table 'ms_Customer' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablems_Customer.add_branchColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property update_by() As String
            Get
                Try 
                    Return CType(Me(Me.tablems_Customer.update_byColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'update_by' in table 'ms_Customer' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablems_Customer.update_byColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property update_date() As Date
            Get
                Try 
                    Return CType(Me(Me.tablems_Customer.update_dateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'update_date' in table 'ms_Customer' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablems_Customer.update_dateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property update_branch() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablems_Customer.update_branchColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'update_branch' in table 'ms_Customer' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablems_Customer.update_branchColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Billing_Type_Index() As String
            Get
                Try 
                    Return CType(Me(Me.tablems_Customer.Billing_Type_IndexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Billing_Type_Index' in table 'ms_Customer' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablems_Customer.Billing_Type_IndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property status_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablems_Customer.status_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'status_id' in table 'ms_Customer' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablems_Customer.status_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTitleNull() As Boolean
            Return Me.IsNull(Me.tablems_Customer.TitleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTitleNull()
            Me(Me.tablems_Customer.TitleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomer_NameNull() As Boolean
            Return Me.IsNull(Me.tablems_Customer.Customer_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustomer_NameNull()
            Me(Me.tablems_Customer.Customer_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBilling_LocationNull() As Boolean
            Return Me.IsNull(Me.tablems_Customer.Billing_LocationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBilling_LocationNull()
            Me(Me.tablems_Customer.Billing_LocationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomer_Type_IndexNull() As Boolean
            Return Me.IsNull(Me.tablems_Customer.Customer_Type_IndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustomer_Type_IndexNull()
            Me(Me.tablems_Customer.Customer_Type_IndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddressNull() As Boolean
            Return Me.IsNull(Me.tablems_Customer.AddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddressNull()
            Me(Me.tablems_Customer.AddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDistrict_IndexNull() As Boolean
            Return Me.IsNull(Me.tablems_Customer.District_IndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDistrict_IndexNull()
            Me(Me.tablems_Customer.District_IndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProvince_IndexNull() As Boolean
            Return Me.IsNull(Me.tablems_Customer.Province_IndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProvince_IndexNull()
            Me(Me.tablems_Customer.Province_IndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPostcodeNull() As Boolean
            Return Me.IsNull(Me.tablems_Customer.PostcodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPostcodeNull()
            Me(Me.tablems_Customer.PostcodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelNull() As Boolean
            Return Me.IsNull(Me.tablems_Customer.TelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelNull()
            Me(Me.tablems_Customer.TelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFaxNull() As Boolean
            Return Me.IsNull(Me.tablems_Customer.FaxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFaxNull()
            Me(Me.tablems_Customer.FaxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMobileNull() As Boolean
            Return Me.IsNull(Me.tablems_Customer.MobileColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMobileNull()
            Me(Me.tablems_Customer.MobileColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmailNull() As Boolean
            Return Me.IsNull(Me.tablems_Customer.EmailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmailNull()
            Me(Me.tablems_Customer.EmailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsContact_PersonNull() As Boolean
            Return Me.IsNull(Me.tablems_Customer.Contact_PersonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetContact_PersonNull()
            Me(Me.tablems_Customer.Contact_PersonColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsContact_Person2Null() As Boolean
            Return Me.IsNull(Me.tablems_Customer.Contact_Person2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetContact_Person2Null()
            Me(Me.tablems_Customer.Contact_Person2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsContact_Person3Null() As Boolean
            Return Me.IsNull(Me.tablems_Customer.Contact_Person3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetContact_Person3Null()
            Me(Me.tablems_Customer.Contact_Person3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBarcodeNull() As Boolean
            Return Me.IsNull(Me.tablems_Customer.BarcodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBarcodeNull()
            Me(Me.tablems_Customer.BarcodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCredit_TermNull() As Boolean
            Return Me.IsNull(Me.tablems_Customer.Credit_TermColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCredit_TermNull()
            Me(Me.tablems_Customer.Credit_TermColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVat_IncNull() As Boolean
            Return Me.IsNull(Me.tablems_Customer.Vat_IncColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVat_IncNull()
            Me(Me.tablems_Customer.Vat_IncColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBilling_DateNull() As Boolean
            Return Me.IsNull(Me.tablems_Customer.Billing_DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBilling_DateNull()
            Me(Me.tablems_Customer.Billing_DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemarkNull() As Boolean
            Return Me.IsNull(Me.tablems_Customer.RemarkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemarkNull()
            Me(Me.tablems_Customer.RemarkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrice1Null() As Boolean
            Return Me.IsNull(Me.tablems_Customer.Price1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrice1Null()
            Me(Me.tablems_Customer.Price1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrice_Unit1Null() As Boolean
            Return Me.IsNull(Me.tablems_Customer.Price_Unit1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrice_Unit1Null()
            Me(Me.tablems_Customer.Price_Unit1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me.tablems_Customer.StatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusNull()
            Me(Me.tablems_Customer.StatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStr1Null() As Boolean
            Return Me.IsNull(Me.tablems_Customer.Str1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStr1Null()
            Me(Me.tablems_Customer.Str1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStr2Null() As Boolean
            Return Me.IsNull(Me.tablems_Customer.Str2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStr2Null()
            Me(Me.tablems_Customer.Str2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStr3Null() As Boolean
            Return Me.IsNull(Me.tablems_Customer.Str3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStr3Null()
            Me(Me.tablems_Customer.Str3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStr4Null() As Boolean
            Return Me.IsNull(Me.tablems_Customer.Str4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStr4Null()
            Me(Me.tablems_Customer.Str4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStr5Null() As Boolean
            Return Me.IsNull(Me.tablems_Customer.Str5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStr5Null()
            Me(Me.tablems_Customer.Str5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStr6Null() As Boolean
            Return Me.IsNull(Me.tablems_Customer.Str6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStr6Null()
            Me(Me.tablems_Customer.Str6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStr7Null() As Boolean
            Return Me.IsNull(Me.tablems_Customer.Str7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStr7Null()
            Me(Me.tablems_Customer.Str7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStr8Null() As Boolean
            Return Me.IsNull(Me.tablems_Customer.Str8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStr8Null()
            Me(Me.tablems_Customer.Str8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStr9Null() As Boolean
            Return Me.IsNull(Me.tablems_Customer.Str9Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStr9Null()
            Me(Me.tablems_Customer.Str9Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStr10Null() As Boolean
            Return Me.IsNull(Me.tablems_Customer.Str10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStr10Null()
            Me(Me.tablems_Customer.Str10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isadd_byNull() As Boolean
            Return Me.IsNull(Me.tablems_Customer.add_byColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setadd_byNull()
            Me(Me.tablems_Customer.add_byColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isadd_dateNull() As Boolean
            Return Me.IsNull(Me.tablems_Customer.add_dateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setadd_dateNull()
            Me(Me.tablems_Customer.add_dateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isadd_branchNull() As Boolean
            Return Me.IsNull(Me.tablems_Customer.add_branchColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setadd_branchNull()
            Me(Me.tablems_Customer.add_branchColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isupdate_byNull() As Boolean
            Return Me.IsNull(Me.tablems_Customer.update_byColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setupdate_byNull()
            Me(Me.tablems_Customer.update_byColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isupdate_dateNull() As Boolean
            Return Me.IsNull(Me.tablems_Customer.update_dateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setupdate_dateNull()
            Me(Me.tablems_Customer.update_dateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isupdate_branchNull() As Boolean
            Return Me.IsNull(Me.tablems_Customer.update_branchColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setupdate_branchNull()
            Me(Me.tablems_Customer.update_branchColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBilling_Type_IndexNull() As Boolean
            Return Me.IsNull(Me.tablems_Customer.Billing_Type_IndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBilling_Type_IndexNull()
            Me(Me.tablems_Customer.Billing_Type_IndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isstatus_idNull() As Boolean
            Return Me.IsNull(Me.tablems_Customer.status_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setstatus_idNull()
            Me(Me.tablems_Customer.status_idColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ms_CustomerRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ms_CustomerRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ms_CustomerRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ms_CustomerRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
