'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.8937
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsMounth_Sku"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsMounth_Sku
    Inherits Global.System.Data.DataSet
    
    Private tableVIEW_mounth_Report As VIEW_mounth_ReportDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("VIEW_mounth_Report")) Is Nothing) Then
                MyBase.Tables.Add(New VIEW_mounth_ReportDataTable(ds.Tables("VIEW_mounth_Report")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_mounth_Report() As VIEW_mounth_ReportDataTable
        Get
            Return Me.tableVIEW_mounth_Report
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsMounth_Sku = CType(MyBase.Clone,dsMounth_Sku)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("VIEW_mounth_Report")) Is Nothing) Then
                MyBase.Tables.Add(New VIEW_mounth_ReportDataTable(ds.Tables("VIEW_mounth_Report")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableVIEW_mounth_Report = CType(MyBase.Tables("VIEW_mounth_Report"),VIEW_mounth_ReportDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVIEW_mounth_Report) Is Nothing) Then
                Me.tableVIEW_mounth_Report.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsMounth_Sku"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsMounth_Sku.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableVIEW_mounth_Report = New VIEW_mounth_ReportDataTable
        MyBase.Tables.Add(Me.tableVIEW_mounth_Report)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVIEW_mounth_Report() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsMounth_Sku = New dsMounth_Sku
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub VIEW_mounth_ReportRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_mounth_ReportRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VIEW_mounth_ReportDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnday As Global.System.Data.DataColumn
        
        Private columnSelectDay As Global.System.Data.DataColumn
        
        Private columnSelectYear As Global.System.Data.DataColumn
        
        Private columnSelectMonth As Global.System.Data.DataColumn
        
        Private columnCustomer_Id As Global.System.Data.DataColumn
        
        Private columnCustomer_Name As Global.System.Data.DataColumn
        
        Private columnSku_Id As Global.System.Data.DataColumn
        
        Private columnskudes As Global.System.Data.DataColumn
        
        Private columnQty_In As Global.System.Data.DataColumn
        
        Private columnWeight_In As Global.System.Data.DataColumn
        
        Private columnVolume_In As Global.System.Data.DataColumn
        
        Private columnQty_Out As Global.System.Data.DataColumn
        
        Private columnWeight_Out As Global.System.Data.DataColumn
        
        Private columnVolume_Out As Global.System.Data.DataColumn
        
        Private columnQty_Sku_Bal As Global.System.Data.DataColumn
        
        Private columnWeight_Sku_Bal As Global.System.Data.DataColumn
        
        Private columnVolume_Sku_Bal As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VIEW_mounth_Report"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SelectDayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSelectDay
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SelectYearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSelectYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SelectMonthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSelectMonth
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Customer_IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomer_Id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Customer_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomer_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Sku_IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSku_Id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property skudesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnskudes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Qty_InColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQty_In
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Weight_InColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWeight_In
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Volume_InColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVolume_In
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Qty_OutColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQty_Out
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Weight_OutColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWeight_Out
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Volume_OutColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVolume_Out
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Qty_Sku_BalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQty_Sku_Bal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Weight_Sku_BalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWeight_Sku_Bal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Volume_Sku_BalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVolume_Sku_Bal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_mounth_ReportRow
            Get
                Return CType(Me.Rows(index),VIEW_mounth_ReportRow)
            End Get
        End Property
        
        Public Event VIEW_mounth_ReportRowChanging As VIEW_mounth_ReportRowChangeEventHandler
        
        Public Event VIEW_mounth_ReportRowChanged As VIEW_mounth_ReportRowChangeEventHandler
        
        Public Event VIEW_mounth_ReportRowDeleting As VIEW_mounth_ReportRowChangeEventHandler
        
        Public Event VIEW_mounth_ReportRowDeleted As VIEW_mounth_ReportRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVIEW_mounth_ReportRow(ByVal row As VIEW_mounth_ReportRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVIEW_mounth_ReportRow( _
                    ByVal day As String,  _
                    ByVal SelectDay As Integer,  _
                    ByVal SelectYear As Integer,  _
                    ByVal SelectMonth As Integer,  _
                    ByVal Customer_Id As String,  _
                    ByVal Customer_Name As String,  _
                    ByVal Sku_Id As String,  _
                    ByVal skudes As String,  _
                    ByVal Qty_In As Double,  _
                    ByVal Weight_In As Double,  _
                    ByVal Volume_In As Double,  _
                    ByVal Qty_Out As Double,  _
                    ByVal Weight_Out As Double,  _
                    ByVal Volume_Out As Double,  _
                    ByVal Qty_Sku_Bal As Double,  _
                    ByVal Weight_Sku_Bal As Double,  _
                    ByVal Volume_Sku_Bal As Double) As VIEW_mounth_ReportRow
            Dim rowVIEW_mounth_ReportRow As VIEW_mounth_ReportRow = CType(Me.NewRow,VIEW_mounth_ReportRow)
            Dim columnValuesArray() As Object = New Object() {day, SelectDay, SelectYear, SelectMonth, Customer_Id, Customer_Name, Sku_Id, skudes, Qty_In, Weight_In, Volume_In, Qty_Out, Weight_Out, Volume_Out, Qty_Sku_Bal, Weight_Sku_Bal, Volume_Sku_Bal}
            rowVIEW_mounth_ReportRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVIEW_mounth_ReportRow)
            Return rowVIEW_mounth_ReportRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VIEW_mounth_ReportDataTable = CType(MyBase.Clone,VIEW_mounth_ReportDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VIEW_mounth_ReportDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnday = MyBase.Columns("day")
            Me.columnSelectDay = MyBase.Columns("SelectDay")
            Me.columnSelectYear = MyBase.Columns("SelectYear")
            Me.columnSelectMonth = MyBase.Columns("SelectMonth")
            Me.columnCustomer_Id = MyBase.Columns("Customer_Id")
            Me.columnCustomer_Name = MyBase.Columns("Customer_Name")
            Me.columnSku_Id = MyBase.Columns("Sku_Id")
            Me.columnskudes = MyBase.Columns("skudes")
            Me.columnQty_In = MyBase.Columns("Qty_In")
            Me.columnWeight_In = MyBase.Columns("Weight_In")
            Me.columnVolume_In = MyBase.Columns("Volume_In")
            Me.columnQty_Out = MyBase.Columns("Qty_Out")
            Me.columnWeight_Out = MyBase.Columns("Weight_Out")
            Me.columnVolume_Out = MyBase.Columns("Volume_Out")
            Me.columnQty_Sku_Bal = MyBase.Columns("Qty_Sku_Bal")
            Me.columnWeight_Sku_Bal = MyBase.Columns("Weight_Sku_Bal")
            Me.columnVolume_Sku_Bal = MyBase.Columns("Volume_Sku_Bal")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnday = New Global.System.Data.DataColumn("day", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnday)
            Me.columnSelectDay = New Global.System.Data.DataColumn("SelectDay", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSelectDay)
            Me.columnSelectYear = New Global.System.Data.DataColumn("SelectYear", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSelectYear)
            Me.columnSelectMonth = New Global.System.Data.DataColumn("SelectMonth", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSelectMonth)
            Me.columnCustomer_Id = New Global.System.Data.DataColumn("Customer_Id", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomer_Id)
            Me.columnCustomer_Name = New Global.System.Data.DataColumn("Customer_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomer_Name)
            Me.columnSku_Id = New Global.System.Data.DataColumn("Sku_Id", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSku_Id)
            Me.columnskudes = New Global.System.Data.DataColumn("skudes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnskudes)
            Me.columnQty_In = New Global.System.Data.DataColumn("Qty_In", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQty_In)
            Me.columnWeight_In = New Global.System.Data.DataColumn("Weight_In", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWeight_In)
            Me.columnVolume_In = New Global.System.Data.DataColumn("Volume_In", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVolume_In)
            Me.columnQty_Out = New Global.System.Data.DataColumn("Qty_Out", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQty_Out)
            Me.columnWeight_Out = New Global.System.Data.DataColumn("Weight_Out", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWeight_Out)
            Me.columnVolume_Out = New Global.System.Data.DataColumn("Volume_Out", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVolume_Out)
            Me.columnQty_Sku_Bal = New Global.System.Data.DataColumn("Qty_Sku_Bal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQty_Sku_Bal)
            Me.columnWeight_Sku_Bal = New Global.System.Data.DataColumn("Weight_Sku_Bal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWeight_Sku_Bal)
            Me.columnVolume_Sku_Bal = New Global.System.Data.DataColumn("Volume_Sku_Bal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVolume_Sku_Bal)
            Me.columnday.ReadOnly = true
            Me.columnday.MaxLength = 20
            Me.columnSelectDay.ReadOnly = true
            Me.columnSelectYear.ReadOnly = true
            Me.columnSelectMonth.ReadOnly = true
            Me.columnCustomer_Id.AllowDBNull = false
            Me.columnCustomer_Id.MaxLength = 13
            Me.columnCustomer_Name.MaxLength = 100
            Me.columnSku_Id.AllowDBNull = false
            Me.columnSku_Id.MaxLength = 50
            Me.columnskudes.MaxLength = 100
            Me.columnQty_In.AllowDBNull = false
            Me.columnWeight_In.AllowDBNull = false
            Me.columnVolume_In.AllowDBNull = false
            Me.columnQty_Out.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVIEW_mounth_ReportRow() As VIEW_mounth_ReportRow
            Return CType(Me.NewRow,VIEW_mounth_ReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VIEW_mounth_ReportRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VIEW_mounth_ReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_mounth_ReportRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_mounth_ReportRowChanged(Me, New VIEW_mounth_ReportRowChangeEvent(CType(e.Row,VIEW_mounth_ReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_mounth_ReportRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_mounth_ReportRowChanging(Me, New VIEW_mounth_ReportRowChangeEvent(CType(e.Row,VIEW_mounth_ReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_mounth_ReportRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_mounth_ReportRowDeleted(Me, New VIEW_mounth_ReportRowChangeEvent(CType(e.Row,VIEW_mounth_ReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_mounth_ReportRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_mounth_ReportRowDeleting(Me, New VIEW_mounth_ReportRowChangeEvent(CType(e.Row,VIEW_mounth_ReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVIEW_mounth_ReportRow(ByVal row As VIEW_mounth_ReportRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsMounth_Sku = New dsMounth_Sku
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VIEW_mounth_ReportDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VIEW_mounth_ReportRow
        Inherits Global.System.Data.DataRow
        
        Private tableVIEW_mounth_Report As VIEW_mounth_ReportDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_mounth_Report = CType(Me.Table,VIEW_mounth_ReportDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property day() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_mounth_Report.dayColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'day' in table 'VIEW_mounth_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_mounth_Report.dayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SelectDay() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_mounth_Report.SelectDayColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SelectDay' in table 'VIEW_mounth_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_mounth_Report.SelectDayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SelectYear() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_mounth_Report.SelectYearColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SelectYear' in table 'VIEW_mounth_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_mounth_Report.SelectYearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SelectMonth() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_mounth_Report.SelectMonthColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SelectMonth' in table 'VIEW_mounth_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_mounth_Report.SelectMonthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Customer_Id() As String
            Get
                Return CType(Me(Me.tableVIEW_mounth_Report.Customer_IdColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_mounth_Report.Customer_IdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Customer_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_mounth_Report.Customer_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Customer_Name' in table 'VIEW_mounth_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_mounth_Report.Customer_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sku_Id() As String
            Get
                Return CType(Me(Me.tableVIEW_mounth_Report.Sku_IdColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_mounth_Report.Sku_IdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property skudes() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_mounth_Report.skudesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'skudes' in table 'VIEW_mounth_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_mounth_Report.skudesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Qty_In() As Double
            Get
                Return CType(Me(Me.tableVIEW_mounth_Report.Qty_InColumn),Double)
            End Get
            Set
                Me(Me.tableVIEW_mounth_Report.Qty_InColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Weight_In() As Double
            Get
                Return CType(Me(Me.tableVIEW_mounth_Report.Weight_InColumn),Double)
            End Get
            Set
                Me(Me.tableVIEW_mounth_Report.Weight_InColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Volume_In() As Double
            Get
                Return CType(Me(Me.tableVIEW_mounth_Report.Volume_InColumn),Double)
            End Get
            Set
                Me(Me.tableVIEW_mounth_Report.Volume_InColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Qty_Out() As Double
            Get
                Return CType(Me(Me.tableVIEW_mounth_Report.Qty_OutColumn),Double)
            End Get
            Set
                Me(Me.tableVIEW_mounth_Report.Qty_OutColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Weight_Out() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_mounth_Report.Weight_OutColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Weight_Out' in table 'VIEW_mounth_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_mounth_Report.Weight_OutColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Volume_Out() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_mounth_Report.Volume_OutColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Volume_Out' in table 'VIEW_mounth_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_mounth_Report.Volume_OutColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Qty_Sku_Bal() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_mounth_Report.Qty_Sku_BalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Qty_Sku_Bal' in table 'VIEW_mounth_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_mounth_Report.Qty_Sku_BalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Weight_Sku_Bal() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_mounth_Report.Weight_Sku_BalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Weight_Sku_Bal' in table 'VIEW_mounth_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_mounth_Report.Weight_Sku_BalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Volume_Sku_Bal() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_mounth_Report.Volume_Sku_BalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Volume_Sku_Bal' in table 'VIEW_mounth_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_mounth_Report.Volume_Sku_BalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdayNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_mounth_Report.dayColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdayNull()
            Me(Me.tableVIEW_mounth_Report.dayColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSelectDayNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_mounth_Report.SelectDayColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSelectDayNull()
            Me(Me.tableVIEW_mounth_Report.SelectDayColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSelectYearNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_mounth_Report.SelectYearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSelectYearNull()
            Me(Me.tableVIEW_mounth_Report.SelectYearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSelectMonthNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_mounth_Report.SelectMonthColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSelectMonthNull()
            Me(Me.tableVIEW_mounth_Report.SelectMonthColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomer_NameNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_mounth_Report.Customer_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustomer_NameNull()
            Me(Me.tableVIEW_mounth_Report.Customer_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsskudesNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_mounth_Report.skudesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetskudesNull()
            Me(Me.tableVIEW_mounth_Report.skudesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWeight_OutNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_mounth_Report.Weight_OutColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWeight_OutNull()
            Me(Me.tableVIEW_mounth_Report.Weight_OutColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVolume_OutNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_mounth_Report.Volume_OutColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVolume_OutNull()
            Me(Me.tableVIEW_mounth_Report.Volume_OutColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQty_Sku_BalNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_mounth_Report.Qty_Sku_BalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQty_Sku_BalNull()
            Me(Me.tableVIEW_mounth_Report.Qty_Sku_BalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWeight_Sku_BalNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_mounth_Report.Weight_Sku_BalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWeight_Sku_BalNull()
            Me(Me.tableVIEW_mounth_Report.Weight_Sku_BalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVolume_Sku_BalNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_mounth_Report.Volume_Sku_BalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVolume_Sku_BalNull()
            Me(Me.tableVIEW_mounth_Report.Volume_Sku_BalColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VIEW_mounth_ReportRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VIEW_mounth_ReportRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VIEW_mounth_ReportRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VIEW_mounth_ReportRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
