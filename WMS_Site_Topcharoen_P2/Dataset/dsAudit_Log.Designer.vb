'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.8937
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsAudit_Log"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsAudit_Log
    Inherits Global.System.Data.DataSet
    
    Private tableVIEW_Audit_Log As VIEW_Audit_LogDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("VIEW_Audit_Log")) Is Nothing) Then
                MyBase.Tables.Add(New VIEW_Audit_LogDataTable(ds.Tables("VIEW_Audit_Log")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_Audit_Log() As VIEW_Audit_LogDataTable
        Get
            Return Me.tableVIEW_Audit_Log
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsAudit_Log = CType(MyBase.Clone,dsAudit_Log)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("VIEW_Audit_Log")) Is Nothing) Then
                MyBase.Tables.Add(New VIEW_Audit_LogDataTable(ds.Tables("VIEW_Audit_Log")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableVIEW_Audit_Log = CType(MyBase.Tables("VIEW_Audit_Log"),VIEW_Audit_LogDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVIEW_Audit_Log) Is Nothing) Then
                Me.tableVIEW_Audit_Log.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsAudit_Log"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsAudit_Log.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableVIEW_Audit_Log = New VIEW_Audit_LogDataTable
        MyBase.Tables.Add(Me.tableVIEW_Audit_Log)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVIEW_Audit_Log() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsAudit_Log = New dsAudit_Log
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub VIEW_Audit_LogRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_Audit_LogRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VIEW_Audit_LogDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnAudit_Log_Index As Global.System.Data.DataColumn
        
        Private columnBranch_ID As Global.System.Data.DataColumn
        
        Private columnLog_Date As Global.System.Data.DataColumn
        
        Private columnEvent_Date As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnDocument_Index As Global.System.Data.DataColumn
        
        Private columnDocument_No As Global.System.Data.DataColumn
        
        Private columnuserName_add As Global.System.Data.DataColumn
        
        Private columnHost_Name As Global.System.Data.DataColumn
        
        Private columnHost_IP As Global.System.Data.DataColumn
        
        Private columnRef_No1 As Global.System.Data.DataColumn
        
        Private columnRef_No2 As Global.System.Data.DataColumn
        
        Private columnStr1 As Global.System.Data.DataColumn
        
        Private columnStr2 As Global.System.Data.DataColumn
        
        Private columnStr3 As Global.System.Data.DataColumn
        
        Private columnStr4 As Global.System.Data.DataColumn
        
        Private columnStr5 As Global.System.Data.DataColumn
        
        Private columnStr6 As Global.System.Data.DataColumn
        
        Private columnStr7 As Global.System.Data.DataColumn
        
        Private columnStr8 As Global.System.Data.DataColumn
        
        Private columnStr9 As Global.System.Data.DataColumn
        
        Private columnStr10 As Global.System.Data.DataColumn
        
        Private columnLog_Type_ID As Global.System.Data.DataColumn
        
        Private columnLog_Type As Global.System.Data.DataColumn
        
        Private columnuser_id As Global.System.Data.DataColumn
        
        Private columnuserName As Global.System.Data.DataColumn
        
        Private columngroup_des As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VIEW_Audit_Log"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Audit_Log_IndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAudit_Log_Index
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Branch_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBranch_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Log_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLog_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Event_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEvent_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Document_IndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocument_Index
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Document_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocument_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property userName_addColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnuserName_add
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Host_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHost_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Host_IPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHost_IP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Ref_No1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRef_No1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Ref_No2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRef_No2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Str1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnStr1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Str2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnStr2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Str3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnStr3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Str4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnStr4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Str5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnStr5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Str6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnStr6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Str7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnStr7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Str8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnStr8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Str9Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnStr9
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Str10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnStr10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Log_Type_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLog_Type_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Log_TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLog_Type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property user_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnuser_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property userNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnuserName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property group_desColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columngroup_des
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_Audit_LogRow
            Get
                Return CType(Me.Rows(index),VIEW_Audit_LogRow)
            End Get
        End Property
        
        Public Event VIEW_Audit_LogRowChanging As VIEW_Audit_LogRowChangeEventHandler
        
        Public Event VIEW_Audit_LogRowChanged As VIEW_Audit_LogRowChangeEventHandler
        
        Public Event VIEW_Audit_LogRowDeleting As VIEW_Audit_LogRowChangeEventHandler
        
        Public Event VIEW_Audit_LogRowDeleted As VIEW_Audit_LogRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVIEW_Audit_LogRow(ByVal row As VIEW_Audit_LogRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVIEW_Audit_LogRow( _
                    ByVal Audit_Log_Index As String,  _
                    ByVal Branch_ID As Integer,  _
                    ByVal Log_Date As Date,  _
                    ByVal Event_Date As Date,  _
                    ByVal Description As String,  _
                    ByVal Document_Index As String,  _
                    ByVal Document_No As String,  _
                    ByVal userName_add As String,  _
                    ByVal Host_Name As String,  _
                    ByVal Host_IP As String,  _
                    ByVal Ref_No1 As String,  _
                    ByVal Ref_No2 As String,  _
                    ByVal Str1 As String,  _
                    ByVal Str2 As String,  _
                    ByVal Str3 As String,  _
                    ByVal Str4 As String,  _
                    ByVal Str5 As String,  _
                    ByVal Str6 As String,  _
                    ByVal Str7 As String,  _
                    ByVal Str8 As String,  _
                    ByVal Str9 As String,  _
                    ByVal Str10 As String,  _
                    ByVal Log_Type_ID As Integer,  _
                    ByVal Log_Type As String,  _
                    ByVal user_id As String,  _
                    ByVal userName As String,  _
                    ByVal group_des As String) As VIEW_Audit_LogRow
            Dim rowVIEW_Audit_LogRow As VIEW_Audit_LogRow = CType(Me.NewRow,VIEW_Audit_LogRow)
            Dim columnValuesArray() As Object = New Object() {Audit_Log_Index, Branch_ID, Log_Date, Event_Date, Description, Document_Index, Document_No, userName_add, Host_Name, Host_IP, Ref_No1, Ref_No2, Str1, Str2, Str3, Str4, Str5, Str6, Str7, Str8, Str9, Str10, Log_Type_ID, Log_Type, user_id, userName, group_des}
            rowVIEW_Audit_LogRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVIEW_Audit_LogRow)
            Return rowVIEW_Audit_LogRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VIEW_Audit_LogDataTable = CType(MyBase.Clone,VIEW_Audit_LogDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VIEW_Audit_LogDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAudit_Log_Index = MyBase.Columns("Audit_Log_Index")
            Me.columnBranch_ID = MyBase.Columns("Branch_ID")
            Me.columnLog_Date = MyBase.Columns("Log_Date")
            Me.columnEvent_Date = MyBase.Columns("Event_Date")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnDocument_Index = MyBase.Columns("Document_Index")
            Me.columnDocument_No = MyBase.Columns("Document_No")
            Me.columnuserName_add = MyBase.Columns("userName_add")
            Me.columnHost_Name = MyBase.Columns("Host_Name")
            Me.columnHost_IP = MyBase.Columns("Host_IP")
            Me.columnRef_No1 = MyBase.Columns("Ref_No1")
            Me.columnRef_No2 = MyBase.Columns("Ref_No2")
            Me.columnStr1 = MyBase.Columns("Str1")
            Me.columnStr2 = MyBase.Columns("Str2")
            Me.columnStr3 = MyBase.Columns("Str3")
            Me.columnStr4 = MyBase.Columns("Str4")
            Me.columnStr5 = MyBase.Columns("Str5")
            Me.columnStr6 = MyBase.Columns("Str6")
            Me.columnStr7 = MyBase.Columns("Str7")
            Me.columnStr8 = MyBase.Columns("Str8")
            Me.columnStr9 = MyBase.Columns("Str9")
            Me.columnStr10 = MyBase.Columns("Str10")
            Me.columnLog_Type_ID = MyBase.Columns("Log_Type_ID")
            Me.columnLog_Type = MyBase.Columns("Log_Type")
            Me.columnuser_id = MyBase.Columns("user_id")
            Me.columnuserName = MyBase.Columns("userName")
            Me.columngroup_des = MyBase.Columns("group_des")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAudit_Log_Index = New Global.System.Data.DataColumn("Audit_Log_Index", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAudit_Log_Index)
            Me.columnBranch_ID = New Global.System.Data.DataColumn("Branch_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBranch_ID)
            Me.columnLog_Date = New Global.System.Data.DataColumn("Log_Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLog_Date)
            Me.columnEvent_Date = New Global.System.Data.DataColumn("Event_Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEvent_Date)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnDocument_Index = New Global.System.Data.DataColumn("Document_Index", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocument_Index)
            Me.columnDocument_No = New Global.System.Data.DataColumn("Document_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocument_No)
            Me.columnuserName_add = New Global.System.Data.DataColumn("userName_add", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnuserName_add)
            Me.columnHost_Name = New Global.System.Data.DataColumn("Host_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHost_Name)
            Me.columnHost_IP = New Global.System.Data.DataColumn("Host_IP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHost_IP)
            Me.columnRef_No1 = New Global.System.Data.DataColumn("Ref_No1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRef_No1)
            Me.columnRef_No2 = New Global.System.Data.DataColumn("Ref_No2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRef_No2)
            Me.columnStr1 = New Global.System.Data.DataColumn("Str1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStr1)
            Me.columnStr2 = New Global.System.Data.DataColumn("Str2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStr2)
            Me.columnStr3 = New Global.System.Data.DataColumn("Str3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStr3)
            Me.columnStr4 = New Global.System.Data.DataColumn("Str4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStr4)
            Me.columnStr5 = New Global.System.Data.DataColumn("Str5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStr5)
            Me.columnStr6 = New Global.System.Data.DataColumn("Str6", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStr6)
            Me.columnStr7 = New Global.System.Data.DataColumn("Str7", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStr7)
            Me.columnStr8 = New Global.System.Data.DataColumn("Str8", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStr8)
            Me.columnStr9 = New Global.System.Data.DataColumn("Str9", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStr9)
            Me.columnStr10 = New Global.System.Data.DataColumn("Str10", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStr10)
            Me.columnLog_Type_ID = New Global.System.Data.DataColumn("Log_Type_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLog_Type_ID)
            Me.columnLog_Type = New Global.System.Data.DataColumn("Log_Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLog_Type)
            Me.columnuser_id = New Global.System.Data.DataColumn("user_id", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnuser_id)
            Me.columnuserName = New Global.System.Data.DataColumn("userName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnuserName)
            Me.columngroup_des = New Global.System.Data.DataColumn("group_des", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngroup_des)
            Me.columnAudit_Log_Index.AllowDBNull = false
            Me.columnAudit_Log_Index.MaxLength = 13
            Me.columnBranch_ID.AllowDBNull = false
            Me.columnLog_Date.AllowDBNull = false
            Me.columnDescription.MaxLength = 255
            Me.columnDocument_Index.MaxLength = 13
            Me.columnDocument_No.AllowDBNull = false
            Me.columnDocument_No.MaxLength = 50
            Me.columnuserName_add.AllowDBNull = false
            Me.columnuserName_add.MaxLength = 50
            Me.columnHost_Name.MaxLength = 50
            Me.columnHost_IP.MaxLength = 50
            Me.columnRef_No1.MaxLength = 50
            Me.columnRef_No2.MaxLength = 50
            Me.columnStr1.MaxLength = 255
            Me.columnStr2.MaxLength = 255
            Me.columnStr3.MaxLength = 255
            Me.columnStr4.MaxLength = 255
            Me.columnStr5.MaxLength = 255
            Me.columnStr6.MaxLength = 100
            Me.columnStr7.MaxLength = 100
            Me.columnStr8.MaxLength = 100
            Me.columnStr9.MaxLength = 100
            Me.columnStr10.MaxLength = 100
            Me.columnLog_Type.MaxLength = 255
            Me.columnuser_id.MaxLength = 50
            Me.columnuserName.MaxLength = 50
            Me.columngroup_des.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVIEW_Audit_LogRow() As VIEW_Audit_LogRow
            Return CType(Me.NewRow,VIEW_Audit_LogRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VIEW_Audit_LogRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VIEW_Audit_LogRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_Audit_LogRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_Audit_LogRowChanged(Me, New VIEW_Audit_LogRowChangeEvent(CType(e.Row,VIEW_Audit_LogRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_Audit_LogRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_Audit_LogRowChanging(Me, New VIEW_Audit_LogRowChangeEvent(CType(e.Row,VIEW_Audit_LogRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_Audit_LogRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_Audit_LogRowDeleted(Me, New VIEW_Audit_LogRowChangeEvent(CType(e.Row,VIEW_Audit_LogRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_Audit_LogRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_Audit_LogRowDeleting(Me, New VIEW_Audit_LogRowChangeEvent(CType(e.Row,VIEW_Audit_LogRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVIEW_Audit_LogRow(ByVal row As VIEW_Audit_LogRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsAudit_Log = New dsAudit_Log
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VIEW_Audit_LogDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VIEW_Audit_LogRow
        Inherits Global.System.Data.DataRow
        
        Private tableVIEW_Audit_Log As VIEW_Audit_LogDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_Audit_Log = CType(Me.Table,VIEW_Audit_LogDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Audit_Log_Index() As String
            Get
                Return CType(Me(Me.tableVIEW_Audit_Log.Audit_Log_IndexColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_Audit_Log.Audit_Log_IndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Branch_ID() As Integer
            Get
                Return CType(Me(Me.tableVIEW_Audit_Log.Branch_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableVIEW_Audit_Log.Branch_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Log_Date() As Date
            Get
                Return CType(Me(Me.tableVIEW_Audit_Log.Log_DateColumn),Date)
            End Get
            Set
                Me(Me.tableVIEW_Audit_Log.Log_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Event_Date() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_Audit_Log.Event_DateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Event_Date' in table 'VIEW_Audit_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_Audit_Log.Event_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_Audit_Log.DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'VIEW_Audit_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_Audit_Log.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Document_Index() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_Audit_Log.Document_IndexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Document_Index' in table 'VIEW_Audit_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_Audit_Log.Document_IndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Document_No() As String
            Get
                Return CType(Me(Me.tableVIEW_Audit_Log.Document_NoColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_Audit_Log.Document_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property userName_add() As String
            Get
                Return CType(Me(Me.tableVIEW_Audit_Log.userName_addColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_Audit_Log.userName_addColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Host_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_Audit_Log.Host_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Host_Name' in table 'VIEW_Audit_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_Audit_Log.Host_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Host_IP() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_Audit_Log.Host_IPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Host_IP' in table 'VIEW_Audit_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_Audit_Log.Host_IPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ref_No1() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_Audit_Log.Ref_No1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ref_No1' in table 'VIEW_Audit_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_Audit_Log.Ref_No1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ref_No2() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_Audit_Log.Ref_No2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ref_No2' in table 'VIEW_Audit_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_Audit_Log.Ref_No2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Str1() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_Audit_Log.Str1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Str1' in table 'VIEW_Audit_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_Audit_Log.Str1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Str2() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_Audit_Log.Str2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Str2' in table 'VIEW_Audit_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_Audit_Log.Str2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Str3() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_Audit_Log.Str3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Str3' in table 'VIEW_Audit_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_Audit_Log.Str3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Str4() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_Audit_Log.Str4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Str4' in table 'VIEW_Audit_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_Audit_Log.Str4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Str5() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_Audit_Log.Str5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Str5' in table 'VIEW_Audit_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_Audit_Log.Str5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Str6() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_Audit_Log.Str6Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Str6' in table 'VIEW_Audit_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_Audit_Log.Str6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Str7() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_Audit_Log.Str7Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Str7' in table 'VIEW_Audit_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_Audit_Log.Str7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Str8() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_Audit_Log.Str8Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Str8' in table 'VIEW_Audit_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_Audit_Log.Str8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Str9() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_Audit_Log.Str9Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Str9' in table 'VIEW_Audit_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_Audit_Log.Str9Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Str10() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_Audit_Log.Str10Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Str10' in table 'VIEW_Audit_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_Audit_Log.Str10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Log_Type_ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_Audit_Log.Log_Type_IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Log_Type_ID' in table 'VIEW_Audit_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_Audit_Log.Log_Type_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Log_Type() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_Audit_Log.Log_TypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Log_Type' in table 'VIEW_Audit_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_Audit_Log.Log_TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property user_id() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_Audit_Log.user_idColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'user_id' in table 'VIEW_Audit_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_Audit_Log.user_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property userName() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_Audit_Log.userNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'userName' in table 'VIEW_Audit_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_Audit_Log.userNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property group_des() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_Audit_Log.group_desColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'group_des' in table 'VIEW_Audit_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_Audit_Log.group_desColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEvent_DateNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_Audit_Log.Event_DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEvent_DateNull()
            Me(Me.tableVIEW_Audit_Log.Event_DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_Audit_Log.DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescriptionNull()
            Me(Me.tableVIEW_Audit_Log.DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocument_IndexNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_Audit_Log.Document_IndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocument_IndexNull()
            Me(Me.tableVIEW_Audit_Log.Document_IndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHost_NameNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_Audit_Log.Host_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHost_NameNull()
            Me(Me.tableVIEW_Audit_Log.Host_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHost_IPNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_Audit_Log.Host_IPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHost_IPNull()
            Me(Me.tableVIEW_Audit_Log.Host_IPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRef_No1Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_Audit_Log.Ref_No1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRef_No1Null()
            Me(Me.tableVIEW_Audit_Log.Ref_No1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRef_No2Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_Audit_Log.Ref_No2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRef_No2Null()
            Me(Me.tableVIEW_Audit_Log.Ref_No2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStr1Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_Audit_Log.Str1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStr1Null()
            Me(Me.tableVIEW_Audit_Log.Str1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStr2Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_Audit_Log.Str2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStr2Null()
            Me(Me.tableVIEW_Audit_Log.Str2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStr3Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_Audit_Log.Str3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStr3Null()
            Me(Me.tableVIEW_Audit_Log.Str3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStr4Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_Audit_Log.Str4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStr4Null()
            Me(Me.tableVIEW_Audit_Log.Str4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStr5Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_Audit_Log.Str5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStr5Null()
            Me(Me.tableVIEW_Audit_Log.Str5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStr6Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_Audit_Log.Str6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStr6Null()
            Me(Me.tableVIEW_Audit_Log.Str6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStr7Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_Audit_Log.Str7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStr7Null()
            Me(Me.tableVIEW_Audit_Log.Str7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStr8Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_Audit_Log.Str8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStr8Null()
            Me(Me.tableVIEW_Audit_Log.Str8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStr9Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_Audit_Log.Str9Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStr9Null()
            Me(Me.tableVIEW_Audit_Log.Str9Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStr10Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_Audit_Log.Str10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStr10Null()
            Me(Me.tableVIEW_Audit_Log.Str10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLog_Type_IDNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_Audit_Log.Log_Type_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLog_Type_IDNull()
            Me(Me.tableVIEW_Audit_Log.Log_Type_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLog_TypeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_Audit_Log.Log_TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLog_TypeNull()
            Me(Me.tableVIEW_Audit_Log.Log_TypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isuser_idNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_Audit_Log.user_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setuser_idNull()
            Me(Me.tableVIEW_Audit_Log.user_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsuserNameNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_Audit_Log.userNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetuserNameNull()
            Me(Me.tableVIEW_Audit_Log.userNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isgroup_desNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_Audit_Log.group_desColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setgroup_desNull()
            Me(Me.tableVIEW_Audit_Log.group_desColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VIEW_Audit_LogRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VIEW_Audit_LogRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VIEW_Audit_LogRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VIEW_Audit_LogRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
