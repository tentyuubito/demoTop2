'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.8937
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsStockAge_AnalysisByMfgDate"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsStockAge_AnalysisByMfgDate
    Inherits Global.System.Data.DataSet
    
    Private tableVIEW_StockAge_AnalysisByMfgDate As VIEW_StockAge_AnalysisByMfgDateDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("VIEW_StockAge_AnalysisByMfgDate")) Is Nothing) Then
                MyBase.Tables.Add(New VIEW_StockAge_AnalysisByMfgDateDataTable(ds.Tables("VIEW_StockAge_AnalysisByMfgDate")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_StockAge_AnalysisByMfgDate() As VIEW_StockAge_AnalysisByMfgDateDataTable
        Get
            Return Me.tableVIEW_StockAge_AnalysisByMfgDate
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsStockAge_AnalysisByMfgDate = CType(MyBase.Clone,dsStockAge_AnalysisByMfgDate)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("VIEW_StockAge_AnalysisByMfgDate")) Is Nothing) Then
                MyBase.Tables.Add(New VIEW_StockAge_AnalysisByMfgDateDataTable(ds.Tables("VIEW_StockAge_AnalysisByMfgDate")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableVIEW_StockAge_AnalysisByMfgDate = CType(MyBase.Tables("VIEW_StockAge_AnalysisByMfgDate"),VIEW_StockAge_AnalysisByMfgDateDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVIEW_StockAge_AnalysisByMfgDate) Is Nothing) Then
                Me.tableVIEW_StockAge_AnalysisByMfgDate.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsStockAge_AnalysisByMfgDate"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsStockAge_AnalysisByMfgDate.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableVIEW_StockAge_AnalysisByMfgDate = New VIEW_StockAge_AnalysisByMfgDateDataTable
        MyBase.Tables.Add(Me.tableVIEW_StockAge_AnalysisByMfgDate)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVIEW_StockAge_AnalysisByMfgDate() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsStockAge_AnalysisByMfgDate = New dsStockAge_AnalysisByMfgDate
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub VIEW_StockAge_AnalysisByMfgDateRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_StockAge_AnalysisByMfgDateRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VIEW_StockAge_AnalysisByMfgDateDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSku_Index As Global.System.Data.DataColumn
        
        Private columnSku_Id As Global.System.Data.DataColumn
        
        Private columnMain_Package As Global.System.Data.DataColumn
        
        Private columnSumQty_Bal As Global.System.Data.DataColumn
        
        Private columnAvgAge_day As Global.System.Data.DataColumn
        
        Private columnSKU_Name_Th As Global.System.Data.DataColumn
        
        Private columnSKU_Name_En As Global.System.Data.DataColumn
        
        Private columnCustomer_Index As Global.System.Data.DataColumn
        
        Private columnQty_Interval1 As Global.System.Data.DataColumn
        
        Private columnQty_Interval2 As Global.System.Data.DataColumn
        
        Private columnQty_Interval3 As Global.System.Data.DataColumn
        
        Private columnQty_Interval4 As Global.System.Data.DataColumn
        
        Private columnPercent_Qty_Interval1 As Global.System.Data.DataColumn
        
        Private columnPercent_Qty_Interval2 As Global.System.Data.DataColumn
        
        Private columnPercent_Qty_Interva3 As Global.System.Data.DataColumn
        
        Private columnPercent_Qty_Interval4 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VIEW_StockAge_AnalysisByMfgDate"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Sku_IndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSku_Index
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Sku_IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSku_Id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Main_PackageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMain_Package
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SumQty_BalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSumQty_Bal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AvgAge_dayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAvgAge_day
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SKU_Name_ThColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSKU_Name_Th
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SKU_Name_EnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSKU_Name_En
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Customer_IndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomer_Index
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Qty_Interval1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnQty_Interval1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Qty_Interval2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnQty_Interval2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Qty_Interval3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnQty_Interval3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Qty_Interval4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnQty_Interval4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Percent_Qty_Interval1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPercent_Qty_Interval1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Percent_Qty_Interval2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPercent_Qty_Interval2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Percent_Qty_Interva3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPercent_Qty_Interva3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Percent_Qty_Interval4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPercent_Qty_Interval4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_StockAge_AnalysisByMfgDateRow
            Get
                Return CType(Me.Rows(index),VIEW_StockAge_AnalysisByMfgDateRow)
            End Get
        End Property
        
        Public Event VIEW_StockAge_AnalysisByMfgDateRowChanging As VIEW_StockAge_AnalysisByMfgDateRowChangeEventHandler
        
        Public Event VIEW_StockAge_AnalysisByMfgDateRowChanged As VIEW_StockAge_AnalysisByMfgDateRowChangeEventHandler
        
        Public Event VIEW_StockAge_AnalysisByMfgDateRowDeleting As VIEW_StockAge_AnalysisByMfgDateRowChangeEventHandler
        
        Public Event VIEW_StockAge_AnalysisByMfgDateRowDeleted As VIEW_StockAge_AnalysisByMfgDateRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVIEW_StockAge_AnalysisByMfgDateRow(ByVal row As VIEW_StockAge_AnalysisByMfgDateRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVIEW_StockAge_AnalysisByMfgDateRow( _
                    ByVal Sku_Index As String,  _
                    ByVal Sku_Id As String,  _
                    ByVal Main_Package As String,  _
                    ByVal SumQty_Bal As Double,  _
                    ByVal AvgAge_day As Double,  _
                    ByVal SKU_Name_Th As String,  _
                    ByVal SKU_Name_En As String,  _
                    ByVal Customer_Index As String,  _
                    ByVal Qty_Interval1 As Double,  _
                    ByVal Qty_Interval2 As Double,  _
                    ByVal Qty_Interval3 As Double,  _
                    ByVal Qty_Interval4 As Double,  _
                    ByVal Percent_Qty_Interval1 As Double,  _
                    ByVal Percent_Qty_Interval2 As Double,  _
                    ByVal Percent_Qty_Interva3 As Double,  _
                    ByVal Percent_Qty_Interval4 As Double) As VIEW_StockAge_AnalysisByMfgDateRow
            Dim rowVIEW_StockAge_AnalysisByMfgDateRow As VIEW_StockAge_AnalysisByMfgDateRow = CType(Me.NewRow,VIEW_StockAge_AnalysisByMfgDateRow)
            Dim columnValuesArray() As Object = New Object() {Sku_Index, Sku_Id, Main_Package, SumQty_Bal, AvgAge_day, SKU_Name_Th, SKU_Name_En, Customer_Index, Qty_Interval1, Qty_Interval2, Qty_Interval3, Qty_Interval4, Percent_Qty_Interval1, Percent_Qty_Interval2, Percent_Qty_Interva3, Percent_Qty_Interval4}
            rowVIEW_StockAge_AnalysisByMfgDateRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVIEW_StockAge_AnalysisByMfgDateRow)
            Return rowVIEW_StockAge_AnalysisByMfgDateRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VIEW_StockAge_AnalysisByMfgDateDataTable = CType(MyBase.Clone,VIEW_StockAge_AnalysisByMfgDateDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VIEW_StockAge_AnalysisByMfgDateDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSku_Index = MyBase.Columns("Sku_Index")
            Me.columnSku_Id = MyBase.Columns("Sku_Id")
            Me.columnMain_Package = MyBase.Columns("Main_Package")
            Me.columnSumQty_Bal = MyBase.Columns("SumQty_Bal")
            Me.columnAvgAge_day = MyBase.Columns("AvgAge_day")
            Me.columnSKU_Name_Th = MyBase.Columns("SKU_Name_Th")
            Me.columnSKU_Name_En = MyBase.Columns("SKU_Name_En")
            Me.columnCustomer_Index = MyBase.Columns("Customer_Index")
            Me.columnQty_Interval1 = MyBase.Columns("Qty_Interval1")
            Me.columnQty_Interval2 = MyBase.Columns("Qty_Interval2")
            Me.columnQty_Interval3 = MyBase.Columns("Qty_Interval3")
            Me.columnQty_Interval4 = MyBase.Columns("Qty_Interval4")
            Me.columnPercent_Qty_Interval1 = MyBase.Columns("Percent_Qty_Interval1")
            Me.columnPercent_Qty_Interval2 = MyBase.Columns("Percent_Qty_Interval2")
            Me.columnPercent_Qty_Interva3 = MyBase.Columns("Percent_Qty_Interva3")
            Me.columnPercent_Qty_Interval4 = MyBase.Columns("Percent_Qty_Interval4")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSku_Index = New Global.System.Data.DataColumn("Sku_Index", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSku_Index)
            Me.columnSku_Id = New Global.System.Data.DataColumn("Sku_Id", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSku_Id)
            Me.columnMain_Package = New Global.System.Data.DataColumn("Main_Package", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMain_Package)
            Me.columnSumQty_Bal = New Global.System.Data.DataColumn("SumQty_Bal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSumQty_Bal)
            Me.columnAvgAge_day = New Global.System.Data.DataColumn("AvgAge_day", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAvgAge_day)
            Me.columnSKU_Name_Th = New Global.System.Data.DataColumn("SKU_Name_Th", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSKU_Name_Th)
            Me.columnSKU_Name_En = New Global.System.Data.DataColumn("SKU_Name_En", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSKU_Name_En)
            Me.columnCustomer_Index = New Global.System.Data.DataColumn("Customer_Index", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomer_Index)
            Me.columnQty_Interval1 = New Global.System.Data.DataColumn("Qty_Interval1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQty_Interval1)
            Me.columnQty_Interval2 = New Global.System.Data.DataColumn("Qty_Interval2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQty_Interval2)
            Me.columnQty_Interval3 = New Global.System.Data.DataColumn("Qty_Interval3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQty_Interval3)
            Me.columnQty_Interval4 = New Global.System.Data.DataColumn("Qty_Interval4", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQty_Interval4)
            Me.columnPercent_Qty_Interval1 = New Global.System.Data.DataColumn("Percent_Qty_Interval1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPercent_Qty_Interval1)
            Me.columnPercent_Qty_Interval2 = New Global.System.Data.DataColumn("Percent_Qty_Interval2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPercent_Qty_Interval2)
            Me.columnPercent_Qty_Interva3 = New Global.System.Data.DataColumn("Percent_Qty_Interva3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPercent_Qty_Interva3)
            Me.columnPercent_Qty_Interval4 = New Global.System.Data.DataColumn("Percent_Qty_Interval4", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPercent_Qty_Interval4)
            Me.columnSku_Index.AllowDBNull = false
            Me.columnSku_Index.MaxLength = 13
            Me.columnSku_Id.AllowDBNull = false
            Me.columnSku_Id.MaxLength = 50
            Me.columnMain_Package.MaxLength = 100
            Me.columnSKU_Name_Th.MaxLength = 100
            Me.columnSKU_Name_En.MaxLength = 100
            Me.columnCustomer_Index.MaxLength = 13
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVIEW_StockAge_AnalysisByMfgDateRow() As VIEW_StockAge_AnalysisByMfgDateRow
            Return CType(Me.NewRow,VIEW_StockAge_AnalysisByMfgDateRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VIEW_StockAge_AnalysisByMfgDateRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VIEW_StockAge_AnalysisByMfgDateRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_StockAge_AnalysisByMfgDateRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_StockAge_AnalysisByMfgDateRowChanged(Me, New VIEW_StockAge_AnalysisByMfgDateRowChangeEvent(CType(e.Row,VIEW_StockAge_AnalysisByMfgDateRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_StockAge_AnalysisByMfgDateRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_StockAge_AnalysisByMfgDateRowChanging(Me, New VIEW_StockAge_AnalysisByMfgDateRowChangeEvent(CType(e.Row,VIEW_StockAge_AnalysisByMfgDateRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_StockAge_AnalysisByMfgDateRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_StockAge_AnalysisByMfgDateRowDeleted(Me, New VIEW_StockAge_AnalysisByMfgDateRowChangeEvent(CType(e.Row,VIEW_StockAge_AnalysisByMfgDateRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_StockAge_AnalysisByMfgDateRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_StockAge_AnalysisByMfgDateRowDeleting(Me, New VIEW_StockAge_AnalysisByMfgDateRowChangeEvent(CType(e.Row,VIEW_StockAge_AnalysisByMfgDateRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVIEW_StockAge_AnalysisByMfgDateRow(ByVal row As VIEW_StockAge_AnalysisByMfgDateRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsStockAge_AnalysisByMfgDate = New dsStockAge_AnalysisByMfgDate
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VIEW_StockAge_AnalysisByMfgDateDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VIEW_StockAge_AnalysisByMfgDateRow
        Inherits Global.System.Data.DataRow
        
        Private tableVIEW_StockAge_AnalysisByMfgDate As VIEW_StockAge_AnalysisByMfgDateDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_StockAge_AnalysisByMfgDate = CType(Me.Table,VIEW_StockAge_AnalysisByMfgDateDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sku_Index() As String
            Get
                Return CType(Me(Me.tableVIEW_StockAge_AnalysisByMfgDate.Sku_IndexColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_StockAge_AnalysisByMfgDate.Sku_IndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sku_Id() As String
            Get
                Return CType(Me(Me.tableVIEW_StockAge_AnalysisByMfgDate.Sku_IdColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_StockAge_AnalysisByMfgDate.Sku_IdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Main_Package() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_StockAge_AnalysisByMfgDate.Main_PackageColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Main_Package' in table 'VIEW_StockAge_AnalysisByMfgDate' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_StockAge_AnalysisByMfgDate.Main_PackageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SumQty_Bal() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_StockAge_AnalysisByMfgDate.SumQty_BalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SumQty_Bal' in table 'VIEW_StockAge_AnalysisByMfgDate' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_StockAge_AnalysisByMfgDate.SumQty_BalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AvgAge_day() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_StockAge_AnalysisByMfgDate.AvgAge_dayColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AvgAge_day' in table 'VIEW_StockAge_AnalysisByMfgDate' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_StockAge_AnalysisByMfgDate.AvgAge_dayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SKU_Name_Th() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_StockAge_AnalysisByMfgDate.SKU_Name_ThColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SKU_Name_Th' in table 'VIEW_StockAge_AnalysisByMfgDate' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_StockAge_AnalysisByMfgDate.SKU_Name_ThColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SKU_Name_En() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_StockAge_AnalysisByMfgDate.SKU_Name_EnColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SKU_Name_En' in table 'VIEW_StockAge_AnalysisByMfgDate' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_StockAge_AnalysisByMfgDate.SKU_Name_EnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Customer_Index() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_StockAge_AnalysisByMfgDate.Customer_IndexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Customer_Index' in table 'VIEW_StockAge_AnalysisByMfgDate' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_StockAge_AnalysisByMfgDate.Customer_IndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Qty_Interval1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_StockAge_AnalysisByMfgDate.Qty_Interval1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Qty_Interval1' in table 'VIEW_StockAge_AnalysisByMfgDate' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_StockAge_AnalysisByMfgDate.Qty_Interval1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Qty_Interval2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_StockAge_AnalysisByMfgDate.Qty_Interval2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Qty_Interval2' in table 'VIEW_StockAge_AnalysisByMfgDate' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_StockAge_AnalysisByMfgDate.Qty_Interval2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Qty_Interval3() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_StockAge_AnalysisByMfgDate.Qty_Interval3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Qty_Interval3' in table 'VIEW_StockAge_AnalysisByMfgDate' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_StockAge_AnalysisByMfgDate.Qty_Interval3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Qty_Interval4() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_StockAge_AnalysisByMfgDate.Qty_Interval4Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Qty_Interval4' in table 'VIEW_StockAge_AnalysisByMfgDate' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_StockAge_AnalysisByMfgDate.Qty_Interval4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Percent_Qty_Interval1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_StockAge_AnalysisByMfgDate.Percent_Qty_Interval1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Percent_Qty_Interval1' in table 'VIEW_StockAge_AnalysisByMf"& _ 
                            "gDate' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_StockAge_AnalysisByMfgDate.Percent_Qty_Interval1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Percent_Qty_Interval2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_StockAge_AnalysisByMfgDate.Percent_Qty_Interval2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Percent_Qty_Interval2' in table 'VIEW_StockAge_AnalysisByMf"& _ 
                            "gDate' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_StockAge_AnalysisByMfgDate.Percent_Qty_Interval2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Percent_Qty_Interva3() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_StockAge_AnalysisByMfgDate.Percent_Qty_Interva3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Percent_Qty_Interva3' in table 'VIEW_StockAge_AnalysisByMfg"& _ 
                            "Date' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_StockAge_AnalysisByMfgDate.Percent_Qty_Interva3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Percent_Qty_Interval4() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_StockAge_AnalysisByMfgDate.Percent_Qty_Interval4Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Percent_Qty_Interval4' in table 'VIEW_StockAge_AnalysisByMf"& _ 
                            "gDate' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_StockAge_AnalysisByMfgDate.Percent_Qty_Interval4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMain_PackageNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_StockAge_AnalysisByMfgDate.Main_PackageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMain_PackageNull()
            Me(Me.tableVIEW_StockAge_AnalysisByMfgDate.Main_PackageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSumQty_BalNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_StockAge_AnalysisByMfgDate.SumQty_BalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSumQty_BalNull()
            Me(Me.tableVIEW_StockAge_AnalysisByMfgDate.SumQty_BalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAvgAge_dayNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_StockAge_AnalysisByMfgDate.AvgAge_dayColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAvgAge_dayNull()
            Me(Me.tableVIEW_StockAge_AnalysisByMfgDate.AvgAge_dayColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSKU_Name_ThNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_StockAge_AnalysisByMfgDate.SKU_Name_ThColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSKU_Name_ThNull()
            Me(Me.tableVIEW_StockAge_AnalysisByMfgDate.SKU_Name_ThColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSKU_Name_EnNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_StockAge_AnalysisByMfgDate.SKU_Name_EnColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSKU_Name_EnNull()
            Me(Me.tableVIEW_StockAge_AnalysisByMfgDate.SKU_Name_EnColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomer_IndexNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_StockAge_AnalysisByMfgDate.Customer_IndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustomer_IndexNull()
            Me(Me.tableVIEW_StockAge_AnalysisByMfgDate.Customer_IndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQty_Interval1Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_StockAge_AnalysisByMfgDate.Qty_Interval1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQty_Interval1Null()
            Me(Me.tableVIEW_StockAge_AnalysisByMfgDate.Qty_Interval1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQty_Interval2Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_StockAge_AnalysisByMfgDate.Qty_Interval2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQty_Interval2Null()
            Me(Me.tableVIEW_StockAge_AnalysisByMfgDate.Qty_Interval2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQty_Interval3Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_StockAge_AnalysisByMfgDate.Qty_Interval3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQty_Interval3Null()
            Me(Me.tableVIEW_StockAge_AnalysisByMfgDate.Qty_Interval3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQty_Interval4Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_StockAge_AnalysisByMfgDate.Qty_Interval4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQty_Interval4Null()
            Me(Me.tableVIEW_StockAge_AnalysisByMfgDate.Qty_Interval4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPercent_Qty_Interval1Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_StockAge_AnalysisByMfgDate.Percent_Qty_Interval1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPercent_Qty_Interval1Null()
            Me(Me.tableVIEW_StockAge_AnalysisByMfgDate.Percent_Qty_Interval1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPercent_Qty_Interval2Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_StockAge_AnalysisByMfgDate.Percent_Qty_Interval2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPercent_Qty_Interval2Null()
            Me(Me.tableVIEW_StockAge_AnalysisByMfgDate.Percent_Qty_Interval2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPercent_Qty_Interva3Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_StockAge_AnalysisByMfgDate.Percent_Qty_Interva3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPercent_Qty_Interva3Null()
            Me(Me.tableVIEW_StockAge_AnalysisByMfgDate.Percent_Qty_Interva3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPercent_Qty_Interval4Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_StockAge_AnalysisByMfgDate.Percent_Qty_Interval4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPercent_Qty_Interval4Null()
            Me(Me.tableVIEW_StockAge_AnalysisByMfgDate.Percent_Qty_Interval4Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VIEW_StockAge_AnalysisByMfgDateRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VIEW_StockAge_AnalysisByMfgDateRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VIEW_StockAge_AnalysisByMfgDateRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VIEW_StockAge_AnalysisByMfgDateRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
