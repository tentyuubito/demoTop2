'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.8937
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsTAG_Label"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsTAG_Label
    Inherits Global.System.Data.DataSet
    
    Private tableVIEW_RPT_Receive_TAG_Label As VIEW_RPT_Receive_TAG_LabelDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("VIEW_RPT_Receive_TAG_Label")) Is Nothing) Then
                MyBase.Tables.Add(New VIEW_RPT_Receive_TAG_LabelDataTable(ds.Tables("VIEW_RPT_Receive_TAG_Label")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_RPT_Receive_TAG_Label() As VIEW_RPT_Receive_TAG_LabelDataTable
        Get
            Return Me.tableVIEW_RPT_Receive_TAG_Label
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsTAG_Label = CType(MyBase.Clone,dsTAG_Label)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("VIEW_RPT_Receive_TAG_Label")) Is Nothing) Then
                MyBase.Tables.Add(New VIEW_RPT_Receive_TAG_LabelDataTable(ds.Tables("VIEW_RPT_Receive_TAG_Label")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableVIEW_RPT_Receive_TAG_Label = CType(MyBase.Tables("VIEW_RPT_Receive_TAG_Label"),VIEW_RPT_Receive_TAG_LabelDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVIEW_RPT_Receive_TAG_Label) Is Nothing) Then
                Me.tableVIEW_RPT_Receive_TAG_Label.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsTAG_Label"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsTAG_Label.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableVIEW_RPT_Receive_TAG_Label = New VIEW_RPT_Receive_TAG_LabelDataTable
        MyBase.Tables.Add(Me.tableVIEW_RPT_Receive_TAG_Label)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVIEW_RPT_Receive_TAG_Label() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsTAG_Label = New dsTAG_Label
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub VIEW_RPT_Receive_TAG_LabelRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_RPT_Receive_TAG_LabelRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VIEW_RPT_Receive_TAG_LabelDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnProduct_Group As Global.System.Data.DataColumn
        
        Private columnGroup_Desc As Global.System.Data.DataColumn
        
        Private columnColor As Global.System.Data.DataColumn
        
        Private columnSPH As Global.System.Data.DataColumn
        
        Private columnCYL As Global.System.Data.DataColumn
        
        Private columnAXIS As Global.System.Data.DataColumn
        
        Private columnBC As Global.System.Data.DataColumn
        
        Private columnBarcode As Global.System.Data.DataColumn
        
        Private columnBarcode_No As Global.System.Data.DataColumn
        
        Private columnStr1 As Global.System.Data.DataColumn
        
        Private columnStr2 As Global.System.Data.DataColumn
        
        Private columnStr3 As Global.System.Data.DataColumn
        
        Private columnStr4 As Global.System.Data.DataColumn
        
        Private columnStr5 As Global.System.Data.DataColumn
        
        Private columnFlo1 As Global.System.Data.DataColumn
        
        Private columnFlo2 As Global.System.Data.DataColumn
        
        Private columnFlo3 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VIEW_RPT_Receive_TAG_Label"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Product_GroupColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProduct_Group
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Group_DescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGroup_Desc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ColorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnColor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CYLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCYL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AXISColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAXIS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BarcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBarcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Barcode_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBarcode_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Str1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnStr1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Str2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnStr2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Str3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnStr3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Str4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnStr4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Str5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnStr5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Flo1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFlo1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Flo2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFlo2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Flo3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFlo3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_RPT_Receive_TAG_LabelRow
            Get
                Return CType(Me.Rows(index),VIEW_RPT_Receive_TAG_LabelRow)
            End Get
        End Property
        
        Public Event VIEW_RPT_Receive_TAG_LabelRowChanging As VIEW_RPT_Receive_TAG_LabelRowChangeEventHandler
        
        Public Event VIEW_RPT_Receive_TAG_LabelRowChanged As VIEW_RPT_Receive_TAG_LabelRowChangeEventHandler
        
        Public Event VIEW_RPT_Receive_TAG_LabelRowDeleting As VIEW_RPT_Receive_TAG_LabelRowChangeEventHandler
        
        Public Event VIEW_RPT_Receive_TAG_LabelRowDeleted As VIEW_RPT_Receive_TAG_LabelRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVIEW_RPT_Receive_TAG_LabelRow(ByVal row As VIEW_RPT_Receive_TAG_LabelRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVIEW_RPT_Receive_TAG_LabelRow( _
                    ByVal Product_Group As String,  _
                    ByVal Group_Desc As String,  _
                    ByVal Color As String,  _
                    ByVal SPH As String,  _
                    ByVal CYL As Double,  _
                    ByVal AXIS As Double,  _
                    ByVal BC As Double,  _
                    ByVal Barcode As Single,  _
                    ByVal Barcode_No As String,  _
                    ByVal Str1 As String,  _
                    ByVal Str2 As String,  _
                    ByVal Str3 As String,  _
                    ByVal Str4 As String,  _
                    ByVal Str5 As String,  _
                    ByVal Flo1 As Double,  _
                    ByVal Flo2 As Double,  _
                    ByVal Flo3 As Double) As VIEW_RPT_Receive_TAG_LabelRow
            Dim rowVIEW_RPT_Receive_TAG_LabelRow As VIEW_RPT_Receive_TAG_LabelRow = CType(Me.NewRow,VIEW_RPT_Receive_TAG_LabelRow)
            Dim columnValuesArray() As Object = New Object() {Product_Group, Group_Desc, Color, SPH, CYL, AXIS, BC, Barcode, Barcode_No, Str1, Str2, Str3, Str4, Str5, Flo1, Flo2, Flo3}
            rowVIEW_RPT_Receive_TAG_LabelRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVIEW_RPT_Receive_TAG_LabelRow)
            Return rowVIEW_RPT_Receive_TAG_LabelRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VIEW_RPT_Receive_TAG_LabelDataTable = CType(MyBase.Clone,VIEW_RPT_Receive_TAG_LabelDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VIEW_RPT_Receive_TAG_LabelDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnProduct_Group = MyBase.Columns("Product_Group")
            Me.columnGroup_Desc = MyBase.Columns("Group_Desc")
            Me.columnColor = MyBase.Columns("Color")
            Me.columnSPH = MyBase.Columns("SPH")
            Me.columnCYL = MyBase.Columns("CYL")
            Me.columnAXIS = MyBase.Columns("AXIS")
            Me.columnBC = MyBase.Columns("BC")
            Me.columnBarcode = MyBase.Columns("Barcode")
            Me.columnBarcode_No = MyBase.Columns("Barcode_No")
            Me.columnStr1 = MyBase.Columns("Str1")
            Me.columnStr2 = MyBase.Columns("Str2")
            Me.columnStr3 = MyBase.Columns("Str3")
            Me.columnStr4 = MyBase.Columns("Str4")
            Me.columnStr5 = MyBase.Columns("Str5")
            Me.columnFlo1 = MyBase.Columns("Flo1")
            Me.columnFlo2 = MyBase.Columns("Flo2")
            Me.columnFlo3 = MyBase.Columns("Flo3")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnProduct_Group = New Global.System.Data.DataColumn("Product_Group", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProduct_Group)
            Me.columnGroup_Desc = New Global.System.Data.DataColumn("Group_Desc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGroup_Desc)
            Me.columnColor = New Global.System.Data.DataColumn("Color", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColor)
            Me.columnSPH = New Global.System.Data.DataColumn("SPH", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPH)
            Me.columnCYL = New Global.System.Data.DataColumn("CYL", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCYL)
            Me.columnAXIS = New Global.System.Data.DataColumn("AXIS", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAXIS)
            Me.columnBC = New Global.System.Data.DataColumn("BC", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBC)
            Me.columnBarcode = New Global.System.Data.DataColumn("Barcode", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBarcode)
            Me.columnBarcode_No = New Global.System.Data.DataColumn("Barcode_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBarcode_No)
            Me.columnStr1 = New Global.System.Data.DataColumn("Str1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStr1)
            Me.columnStr2 = New Global.System.Data.DataColumn("Str2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStr2)
            Me.columnStr3 = New Global.System.Data.DataColumn("Str3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStr3)
            Me.columnStr4 = New Global.System.Data.DataColumn("Str4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStr4)
            Me.columnStr5 = New Global.System.Data.DataColumn("Str5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStr5)
            Me.columnFlo1 = New Global.System.Data.DataColumn("Flo1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFlo1)
            Me.columnFlo2 = New Global.System.Data.DataColumn("Flo2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFlo2)
            Me.columnFlo3 = New Global.System.Data.DataColumn("Flo3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFlo3)
            Me.columnGroup_Desc.Caption = "Column1"
            Me.columnColor.Caption = "Column1"
            Me.columnSPH.Caption = "Column1"
            Me.columnCYL.Caption = "Column1"
            Me.columnAXIS.Caption = "Column1"
            Me.columnBC.Caption = "Column1"
            Me.columnBarcode.Caption = "Column1"
            Me.columnBarcode_No.Caption = "Column1"
            Me.columnStr1.Caption = "Column1"
            Me.columnStr2.Caption = "Column1"
            Me.columnStr3.Caption = "Column1"
            Me.columnStr4.Caption = "Column1"
            Me.columnStr5.Caption = "Column1"
            Me.columnFlo1.Caption = "Column1"
            Me.columnFlo2.Caption = "Column1"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVIEW_RPT_Receive_TAG_LabelRow() As VIEW_RPT_Receive_TAG_LabelRow
            Return CType(Me.NewRow,VIEW_RPT_Receive_TAG_LabelRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VIEW_RPT_Receive_TAG_LabelRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VIEW_RPT_Receive_TAG_LabelRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_RPT_Receive_TAG_LabelRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_RPT_Receive_TAG_LabelRowChanged(Me, New VIEW_RPT_Receive_TAG_LabelRowChangeEvent(CType(e.Row,VIEW_RPT_Receive_TAG_LabelRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_RPT_Receive_TAG_LabelRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_RPT_Receive_TAG_LabelRowChanging(Me, New VIEW_RPT_Receive_TAG_LabelRowChangeEvent(CType(e.Row,VIEW_RPT_Receive_TAG_LabelRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_RPT_Receive_TAG_LabelRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_RPT_Receive_TAG_LabelRowDeleted(Me, New VIEW_RPT_Receive_TAG_LabelRowChangeEvent(CType(e.Row,VIEW_RPT_Receive_TAG_LabelRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_RPT_Receive_TAG_LabelRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_RPT_Receive_TAG_LabelRowDeleting(Me, New VIEW_RPT_Receive_TAG_LabelRowChangeEvent(CType(e.Row,VIEW_RPT_Receive_TAG_LabelRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVIEW_RPT_Receive_TAG_LabelRow(ByVal row As VIEW_RPT_Receive_TAG_LabelRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTAG_Label = New dsTAG_Label
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VIEW_RPT_Receive_TAG_LabelDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VIEW_RPT_Receive_TAG_LabelRow
        Inherits Global.System.Data.DataRow
        
        Private tableVIEW_RPT_Receive_TAG_Label As VIEW_RPT_Receive_TAG_LabelDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_RPT_Receive_TAG_Label = CType(Me.Table,VIEW_RPT_Receive_TAG_LabelDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Product_Group() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_RPT_Receive_TAG_Label.Product_GroupColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Product_Group' in table 'VIEW_RPT_Receive_TAG_Label' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_RPT_Receive_TAG_Label.Product_GroupColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Group_Desc() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_RPT_Receive_TAG_Label.Group_DescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Group_Desc' in table 'VIEW_RPT_Receive_TAG_Label' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_RPT_Receive_TAG_Label.Group_DescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Color() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_RPT_Receive_TAG_Label.ColorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Color' in table 'VIEW_RPT_Receive_TAG_Label' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_RPT_Receive_TAG_Label.ColorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPH() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_RPT_Receive_TAG_Label.SPHColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SPH' in table 'VIEW_RPT_Receive_TAG_Label' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_RPT_Receive_TAG_Label.SPHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CYL() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_RPT_Receive_TAG_Label.CYLColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CYL' in table 'VIEW_RPT_Receive_TAG_Label' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_RPT_Receive_TAG_Label.CYLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AXIS() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_RPT_Receive_TAG_Label.AXISColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AXIS' in table 'VIEW_RPT_Receive_TAG_Label' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_RPT_Receive_TAG_Label.AXISColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BC() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_RPT_Receive_TAG_Label.BCColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BC' in table 'VIEW_RPT_Receive_TAG_Label' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_RPT_Receive_TAG_Label.BCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Barcode() As Single
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_RPT_Receive_TAG_Label.BarcodeColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Barcode' in table 'VIEW_RPT_Receive_TAG_Label' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_RPT_Receive_TAG_Label.BarcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Barcode_No() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_RPT_Receive_TAG_Label.Barcode_NoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Barcode_No' in table 'VIEW_RPT_Receive_TAG_Label' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_RPT_Receive_TAG_Label.Barcode_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Str1() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_RPT_Receive_TAG_Label.Str1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Str1' in table 'VIEW_RPT_Receive_TAG_Label' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_RPT_Receive_TAG_Label.Str1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Str2() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_RPT_Receive_TAG_Label.Str2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Str2' in table 'VIEW_RPT_Receive_TAG_Label' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_RPT_Receive_TAG_Label.Str2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Str3() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_RPT_Receive_TAG_Label.Str3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Str3' in table 'VIEW_RPT_Receive_TAG_Label' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_RPT_Receive_TAG_Label.Str3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Str4() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_RPT_Receive_TAG_Label.Str4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Str4' in table 'VIEW_RPT_Receive_TAG_Label' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_RPT_Receive_TAG_Label.Str4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Str5() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_RPT_Receive_TAG_Label.Str5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Str5' in table 'VIEW_RPT_Receive_TAG_Label' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_RPT_Receive_TAG_Label.Str5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Flo1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_RPT_Receive_TAG_Label.Flo1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Flo1' in table 'VIEW_RPT_Receive_TAG_Label' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_RPT_Receive_TAG_Label.Flo1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Flo2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_RPT_Receive_TAG_Label.Flo2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Flo2' in table 'VIEW_RPT_Receive_TAG_Label' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_RPT_Receive_TAG_Label.Flo2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Flo3() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_RPT_Receive_TAG_Label.Flo3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Flo3' in table 'VIEW_RPT_Receive_TAG_Label' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_RPT_Receive_TAG_Label.Flo3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProduct_GroupNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_RPT_Receive_TAG_Label.Product_GroupColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProduct_GroupNull()
            Me(Me.tableVIEW_RPT_Receive_TAG_Label.Product_GroupColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGroup_DescNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_RPT_Receive_TAG_Label.Group_DescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGroup_DescNull()
            Me(Me.tableVIEW_RPT_Receive_TAG_Label.Group_DescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsColorNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_RPT_Receive_TAG_Label.ColorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetColorNull()
            Me(Me.tableVIEW_RPT_Receive_TAG_Label.ColorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSPHNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_RPT_Receive_TAG_Label.SPHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSPHNull()
            Me(Me.tableVIEW_RPT_Receive_TAG_Label.SPHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCYLNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_RPT_Receive_TAG_Label.CYLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCYLNull()
            Me(Me.tableVIEW_RPT_Receive_TAG_Label.CYLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAXISNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_RPT_Receive_TAG_Label.AXISColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAXISNull()
            Me(Me.tableVIEW_RPT_Receive_TAG_Label.AXISColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBCNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_RPT_Receive_TAG_Label.BCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBCNull()
            Me(Me.tableVIEW_RPT_Receive_TAG_Label.BCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBarcodeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_RPT_Receive_TAG_Label.BarcodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBarcodeNull()
            Me(Me.tableVIEW_RPT_Receive_TAG_Label.BarcodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBarcode_NoNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_RPT_Receive_TAG_Label.Barcode_NoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBarcode_NoNull()
            Me(Me.tableVIEW_RPT_Receive_TAG_Label.Barcode_NoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStr1Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_RPT_Receive_TAG_Label.Str1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStr1Null()
            Me(Me.tableVIEW_RPT_Receive_TAG_Label.Str1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStr2Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_RPT_Receive_TAG_Label.Str2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStr2Null()
            Me(Me.tableVIEW_RPT_Receive_TAG_Label.Str2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStr3Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_RPT_Receive_TAG_Label.Str3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStr3Null()
            Me(Me.tableVIEW_RPT_Receive_TAG_Label.Str3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStr4Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_RPT_Receive_TAG_Label.Str4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStr4Null()
            Me(Me.tableVIEW_RPT_Receive_TAG_Label.Str4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStr5Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_RPT_Receive_TAG_Label.Str5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStr5Null()
            Me(Me.tableVIEW_RPT_Receive_TAG_Label.Str5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFlo1Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_RPT_Receive_TAG_Label.Flo1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFlo1Null()
            Me(Me.tableVIEW_RPT_Receive_TAG_Label.Flo1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFlo2Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_RPT_Receive_TAG_Label.Flo2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFlo2Null()
            Me(Me.tableVIEW_RPT_Receive_TAG_Label.Flo2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFlo3Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_RPT_Receive_TAG_Label.Flo3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFlo3Null()
            Me(Me.tableVIEW_RPT_Receive_TAG_Label.Flo3Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VIEW_RPT_Receive_TAG_LabelRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VIEW_RPT_Receive_TAG_LabelRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VIEW_RPT_Receive_TAG_LabelRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VIEW_RPT_Receive_TAG_LabelRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
